{
  "name": "HrFlow.ai Connectors",
  "connectors": [
    {
      "name": "Abacus Umantis",
      "type": "ATS",
      "subtype": "abacusumantis",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/abacusumantis/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "ADP Workforce Now",
      "type": "HCM",
      "subtype": "adpworkforcenow",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/adpworkforcenow/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Adzuna",
      "type": "JOBBOARD",
      "subtype": "adzuna",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/adzuna/logo.png",
      "actions": [
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "Adzuna Jobs",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "country": {
                "description": "ISO 8601 country code of the country of interest",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/CountryCode"
                  }
                ]
              },
              "app_id": {
                "title": "App Id",
                "description": "Application ID, supplied by Adzuna",
                "field_type": "Auth",
                "type": "string"
              },
              "app_key": {
                "title": "App Key",
                "description": "Application key, supplied by Adzuna",
                "field_type": "Auth",
                "type": "string"
              },
              "results_per_page": {
                "title": "Results Per Page",
                "description": "The number of results to include on a page of search results.",
                "field_type": "Query Param",
                "type": "integer"
              },
              "what": {
                "title": "What",
                "description": "The keywords to search for. Multiple terms may be space separated.",
                "field_type": "Query Param",
                "type": "string"
              },
              "what_and": {
                "title": "What And",
                "description": "The keywords to search for, all keywords must be found.",
                "field_type": "Query Param",
                "type": "string"
              },
              "what_phrase": {
                "title": "What Phrase",
                "description": "An entire phrase which must be found in the description or title.",
                "field_type": "Query Param",
                "type": "string"
              },
              "what_or": {
                "title": "What Or",
                "description": "The keywords to search for, any keywords may be found. Multiple terms may be space separated.",
                "field_type": "Query Param",
                "type": "string"
              },
              "what_exclude": {
                "title": "What Exclude",
                "description": "Keywords to exclude from the search. Multiple terms may be space separated.",
                "field_type": "Query Param",
                "type": "string"
              },
              "title_only": {
                "title": "Title Only",
                "description": "Keywords to find, but only in the title. Multiple terms may be space separated.",
                "field_type": "Query Param",
                "type": "string"
              },
              "where": {
                "title": "Where",
                "description": "The geographic centre of the search. Place names, postal codes, etc. may be used.\t",
                "field_type": "Query Param",
                "type": "string"
              },
              "distance": {
                "title": "Distance",
                "description": "The distance in kilometres from the centre of the place described by the 'where' parameter. Defaults to 5km.",
                "field_type": "Query Param",
                "type": "integer"
              },
              "location0": {
                "title": "Location0",
                "description": "The location fields may be used to describe a location, in a similar form to that returned in a Adzuna::API::Response::Location object.For example, \"location0=UK&location1=South East England&location2=Surrey\"  will performn a search over the county of Surrey.",
                "field_type": "Query Param",
                "type": "string"
              },
              "location1": {
                "title": "Location1",
                "field_type": "Query Param",
                "type": "string"
              },
              "location2": {
                "title": "Location2",
                "field_type": "Query Param",
                "type": "string"
              },
              "location3": {
                "title": "Location3",
                "field_type": "Query Param",
                "type": "string"
              },
              "location4": {
                "title": "Location4",
                "field_type": "Query Param",
                "type": "string"
              },
              "location5": {
                "title": "Location5",
                "field_type": "Query Param",
                "type": "string"
              },
              "location6": {
                "title": "Location6",
                "field_type": "Query Param",
                "type": "string"
              },
              "location7": {
                "title": "Location7",
                "field_type": "Query Param",
                "type": "string"
              },
              "max_days_old": {
                "title": "Max Days Old",
                "description": "The age of the oldest advertisment in days that will be returned.",
                "field_type": "Query Param",
                "type": "integer"
              },
              "category": {
                "title": "Category",
                "description": "The category tag, as returned by the \"category\" endpoint.",
                "field_type": "Query Param",
                "type": "string"
              },
              "sort_dir": {
                "description": "The direction to order the search results.",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/SortDir"
                  }
                ]
              },
              "sort_by": {
                "description": "The ordering of the search results.",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/SortKey"
                  }
                ]
              },
              "salary_min": {
                "title": "Salary Min",
                "description": "The minimum salary we wish to get results for.",
                "field_type": "Query Param",
                "type": "integer"
              },
              "salary_max": {
                "title": "Salary Max",
                "description": "The maximum salary we wish to get results for.",
                "field_type": "Query Param",
                "type": "integer"
              },
              "salary_include_unknown": {
                "description": "If set it \"1\", jobs without a known salary are returned.",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/Filter"
                  }
                ]
              },
              "full_time": {
                "description": "If set to \"1\", only full time jobs will be returned.",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/Filter"
                  }
                ]
              },
              "part_time": {
                "description": "If set to \"1\", only part time jobs will be returned.",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/Filter"
                  }
                ]
              },
              "contract": {
                "description": "If set to \"1\", only contract jobs will be returned.",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/Filter"
                  }
                ]
              },
              "permanent": {
                "description": "If set to \"1\", only permanent jobs will be returned.",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/Filter"
                  }
                ]
              },
              "company": {
                "title": "Company",
                "description": "The canonical company name. This may be returned in a Adzuna::API::Response::Company object when a job is returned. A full list of allowed terms in not available through the API.",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "country",
              "app_id",
              "app_key"
            ],
            "additionalProperties": false,
            "definitions": {
              "CountryCode": {
                "title": "CountryCode",
                "description": "An enumeration.",
                "enum": [
                  "gb",
                  "at",
                  "au",
                  "br",
                  "ca",
                  "de",
                  "fr",
                  "in",
                  "it",
                  "nl",
                  "nz",
                  "pl",
                  "ru",
                  "sg",
                  "us",
                  "za"
                ],
                "type": "string"
              },
              "SortDir": {
                "title": "SortDir",
                "description": "An enumeration.",
                "enum": [
                  "up",
                  "down"
                ],
                "type": "string"
              },
              "SortKey": {
                "title": "SortKey",
                "description": "An enumeration.",
                "enum": [
                  "default",
                  "hybrid",
                  "date",
                  "salary",
                  "relevance"
                ],
                "type": "string"
              },
              "Filter": {
                "title": "Filter",
                "description": "An enumeration.",
                "enum": [
                  "1"
                ],
                "type": "string"
              }
            }
          },
          "origin_data_schema": {
            "title": "AdzunaJob",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "type": "string"
              },
              "created": {
                "title": "Created",
                "type": "string"
              },
              "title": {
                "title": "Title",
                "type": "string"
              },
              "description": {
                "title": "Description",
                "type": "string"
              },
              "full_description": {
                "title": "Full Description",
                "type": "string"
              },
              "redirect_url": {
                "title": "Redirect Url",
                "type": "string"
              },
              "latitude": {
                "title": "Latitude",
                "type": "number"
              },
              "longitude": {
                "title": "Longitude",
                "type": "number"
              },
              "category": {
                "$ref": "#/definitions/Category"
              },
              "location": {
                "$ref": "#/definitions/Location"
              },
              "salary_min": {
                "title": "Salary Min",
                "type": "integer"
              },
              "salary_max": {
                "title": "Salary Max",
                "type": "integer"
              },
              "salary_is_predicted": {
                "$ref": "#/definitions/Flag"
              },
              "company": {
                "$ref": "#/definitions/Company"
              },
              "contract_type": {
                "$ref": "#/definitions/ContractType"
              },
              "contract_time": {
                "$ref": "#/definitions/ContractTime"
              }
            },
            "required": [
              "id",
              "created",
              "title",
              "description",
              "redirect_url",
              "category",
              "location",
              "salary_min",
              "salary_max",
              "salary_is_predicted",
              "company",
              "contract_time"
            ],
            "definitions": {
              "Category": {
                "title": "Category",
                "type": "object",
                "properties": {
                  "tag": {
                    "title": "Tag",
                    "type": "string"
                  },
                  "label": {
                    "title": "Label",
                    "type": "string"
                  }
                },
                "required": [
                  "tag",
                  "label"
                ]
              },
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "area": {
                    "title": "Area",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "display_name": {
                    "title": "Display Name",
                    "type": "string"
                  }
                },
                "required": [
                  "area",
                  "display_name"
                ]
              },
              "Flag": {
                "title": "Flag",
                "description": "An enumeration.",
                "enum": [
                  "1",
                  "0"
                ],
                "type": "string"
              },
              "Company": {
                "title": "Company",
                "type": "object",
                "properties": {
                  "display_name": {
                    "title": "Display Name",
                    "type": "string"
                  },
                  "canonical_name": {
                    "title": "Canonical Name",
                    "type": "string"
                  },
                  "count": {
                    "title": "Count",
                    "type": "integer"
                  }
                },
                "required": [
                  "display_name"
                ]
              },
              "ContractType": {
                "title": "ContractType",
                "description": "An enumeration.",
                "enum": [
                  "permanent",
                  "contract"
                ],
                "type": "string"
              },
              "ContractTime": {
                "title": "ContractTime",
                "description": "An enumeration.",
                "enum": [
                  "full_time",
                  "part_time"
                ],
                "type": "string"
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": "?.title",
            "reference": "?.id | $string",
            "created_at": "?.created",
            "location": {
              "lat": "?.latitude != null ?? .latitude | $float : null",
              "lng": "?.longitude != null ?? .longitude | $float : null",
              "text": "?.location.display_name"
            },
            "url": "?.redirect_url",
            "summary": "?.description",
            "sections": [],
            "tags": [
              {
                "name": "salary_min",
                "value": "?.salary_min"
              },
              {
                "name": "salary_max",
                "value": "?.salary_max"
              },
              {
                "name": "salaries_are_predicted",
                "value": "?.salary_is_predicted == '1' ?? true : false"
              },
              {
                "name": "category",
                "value": "?.category?.label"
              },
              {
                "name": "company",
                "value": "?.company?.display_name"
              }
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Adzuna\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Adzuna.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['country', 'app_id', 'app_key', 'results_per_page', 'what', 'what_and', 'what_phrase', 'what_or', 'what_exclude', 'title_only', 'where', 'distance', 'location0', 'location1', 'location2', 'location3', 'location4', 'location5', 'location6', 'location7', 'max_days_old', 'category', 'sort_dir', 'sort_by', 'salary_min', 'salary_max', 'salary_include_unknown', 'full_time', 'part_time', 'contract', 'permanent', 'company']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Adzuna.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "AFAS Software",
      "type": "ATS",
      "subtype": "afas",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/afas/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Agefiph",
      "type": "JOBBOARD",
      "subtype": "agefiph",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/agefiph/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "APEC",
      "type": "JOBBOARD",
      "subtype": "apec",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/apec/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Applicantstack",
      "type": "ATS",
      "subtype": "applicantstack",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/applicantstack/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Ashby",
      "type": "ATS",
      "subtype": "ashby",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/ashby/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Avature",
      "type": "ATS",
      "subtype": "avature",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/avature/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "BambooHR",
      "type": "ATS",
      "subtype": "bamboohr",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/bamboohr/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Beetween",
      "type": "ATS",
      "subtype": "beetween",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/beetween/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "BITE",
      "type": "ATS",
      "subtype": "bite",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/bite/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Breezy HR",
      "type": "ATS",
      "subtype": "breezyhr",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/breezyhr/logo.jpg",
      "actions": [
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "PullJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "BreezyHRJobWarehouse",
          "origin_parameters": {
            "title": "BreezyhrReadParameters",
            "type": "object",
            "properties": {
              "email": {
                "title": "Email",
                "description": "email",
                "field_type": "Other",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "password",
                "field_type": "Auth",
                "type": "string"
              },
              "company_id": {
                "title": "Company Id",
                "description": "ID of company to pull jobs from in Breezy HR database associated with the authenticated user",
                "field_type": "Other",
                "type": "string"
              },
              "company_name": {
                "title": "Company Name",
                "description": "[\u26a0\ufe0f Requiered if company_id is not specified], the company associated with the authenticated user",
                "field_type": "Other",
                "type": "string"
              }
            },
            "required": [
              "email",
              "password"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": "?.name",
            "reference": "?.friendly_id",
            "summary": null,
            "location": {
              "text": "?.location?.name",
              "geojson": {
                "country": "?.location?.country?.name",
                "city": "?.location?.city"
              },
              "lat": null,
              "lng": null
            },
            "sections": [
              {
                "name": "breezy_hr_description",
                "title": "Breezy_hr_description",
                "description": "?.description | $sub('<[^<]+?>', '') | $sub('&nbsp;', ' ')"
              }
            ],
            "tags": [
              {
                "name": "breezy_hr_type",
                "value": ".type?.name ?? .type.name: .type"
              },
              {
                "name": "breezy_hr_experience",
                "value": ".experience?.name ?? .experience.name: .experience"
              },
              {
                "name": "breezy_hr_education",
                "value": ".education?.name ?? .education.name: .education"
              },
              {
                "name": "breezy_hr_department",
                "value": ".department?.name ?? .department.name: .department"
              },
              {
                "name": "breezy_hr_requisition_id",
                "value": ".requisition_id"
              },
              {
                "name": "breezy_hr_category",
                "value": ".category?.name ?? .category.name: .category"
              },
              {
                "name": "breezy_hr_candidate_type",
                "value": ".candidate_type?.name ?? .candidate_type.name: .candidate_type"
              },
              {
                "name": "breezy_hr_remote",
                "value": "?.location?.is_remote"
              }
            ],
            "created_at": "?.creation_date",
            "updated_at": "?.updated_date"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import BreezyHR\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return BreezyHR.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['email', 'password', 'company_id', 'company_name']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return BreezyHR.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "push_profile_list",
          "action_type": "outbound",
          "action_parameters": {
            "title": "PushProfilesActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "BreezyHRWarehouse",
          "target_parameters": {
            "title": "BreezyHRWriteParameters",
            "type": "object",
            "properties": {
              "email": {
                "title": "Email",
                "description": "email",
                "field_type": "Other",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "password",
                "field_type": "Auth",
                "type": "string"
              },
              "company_id": {
                "title": "Company Id",
                "description": "ID of company to pull jobs from in Breezy HR database associated with the authenticated user \n [\u26a0\ufe0f Requiered if company_name is not specified]",
                "field_type": "Other",
                "type": "string"
              },
              "company_name": {
                "title": "Company Name",
                "description": "the company associated with the authenticated user \n [\u26a0\ufe0f Requiered if company_id is not specified]",
                "field_type": "Other",
                "type": "string"
              },
              "position_id": {
                "title": "Position Id",
                "description": "Id of the position to create a new candidate for",
                "field_type": "Other",
                "type": "string"
              },
              "origin": {
                "title": "Origin",
                "description": "will indicate in Breezy if the candidate should be marked as sourced or applied",
                "default": "sourced",
                "field_type": "Other",
                "type": "string"
              }
            },
            "required": [
              "email",
              "password",
              "position_id"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "jsonmap": {
            "name": "?.info?.full_name",
            "address": "?.info?.location?.text",
            "email_address": "?.info?.email",
            "phone_number": "?.info?.phone",
            "summary": "?.info?.summary",
            "work_history": "?.experiences | $map({company_name: ?.company >> 'Undefined', title: ?.title, summary: ?.description, start_year: .date_start | $slice(0, 3) | $int, start_month: .date_start | $slice(3, 5) | $int, end_year: .date_end | $slice(0, 3) | $int, end_month: .date_end | $slice(3, 5) | $int})",
            "education": "?.educations | $map({school_name: ?.school >> 'Undefined', field_of_study: ?.title, start_year: .date_start | $slice(0, 3) | $int, end_year: .date_end | $slice(0, 3) | $int})",
            "social_profiles": ".info?.urls >> [] | $map({.type: .url | $sub('(^https?://)(.*)', 'https://$2')})",
            "tags": "?.skills >> [] | $map(?.name)"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import BreezyHR\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return BreezyHR.push_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = BreezyHR.model.action_by_name(\"push_profile_list\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return BreezyHR.push_profile_list(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['email', 'password', 'company_id', 'company_name', 'position_id', 'origin']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return BreezyHR.push_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_profile_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "PullProfilesActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "schedule",
          "origin": "BreezyHRWarehouse",
          "origin_parameters": {
            "title": "BreezyHRReadProfilesParameters",
            "type": "object",
            "properties": {
              "email": {
                "title": "Email",
                "description": "email",
                "field_type": "Other",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "password",
                "field_type": "Auth",
                "type": "string"
              },
              "company_id": {
                "title": "Company Id",
                "description": "ID of company to pull jobs from in Breezy HR database associated with the authenticated user",
                "field_type": "Other",
                "type": "string"
              },
              "company_name": {
                "title": "Company Name",
                "description": "[\u26a0\ufe0f Requiered if company_id is not specified], the company associated with the authenticated user",
                "field_type": "Other",
                "type": "string"
              },
              "position_id": {
                "title": "Position Id",
                "description": "Id of the position to create a new candidate for",
                "field_type": "Other",
                "type": "string"
              }
            },
            "required": [
              "email",
              "password",
              "position_id"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_parameters": {
            "title": "WriteProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "edit": {
                "title": "Edit",
                "description": "When enabled the profile must exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "only_edit_fields": {
                "title": "Only Edit Fields",
                "description": "List of attributes to use for the edit operation e.g. ['tags', 'metadatas']",
                "field_type": "Other",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "only_edit_fields"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "jsonmap": {
            "info": {
              "full_name": ".name",
              "email": ".email_address",
              "phone": ".phone_number",
              "urls": ".social_profiles | $map({type: .type, url: .url})",
              "summary": ".summary",
              "location": {
                "text": ".address",
                "lat": null,
                "lng": null
              }
            },
            "experiences": "?.work_history >> [] | $map({company: ?.company_name, title: ?.title, description: ?.summary, date_start: ?.start_date.year != null and ?.start_date.month != null and ?.start_date.day != null ?? .start_date | $concat(.year, '-', $concat('0', .month) | $slice(-2), '-', $concat('0', .day) | $slice(-2)) : null, date_end: ?.end_date.year != null and ?.end_date.month != null and ?.end_date.day != null ?? .end_date | $concat(.year, '-', $concat('0', .month) | $slice(-2), '-', $concat('0', .day) | $slice(-2)) : null})",
            "educations": "?.education >> [] | $map({school: ?.school_name, title: $concat(?.degree >> '', ' ', ?.field_of_study >> '')| $strip, date_start: ?.start_date.year != null and ?.start_date.month != null and ?.start_date.day != null ?? .start_date | $concat(.year, '-', $concat('0', .month) | $slice(-2), '-', $concat('0', .day) | $slice(-2)) : null, date_end: ?.end_date.year != null and ?.end_date.month != null and ?.end_date.day != null ?? .end_date | $concat(.year, '-', $concat('0', .month) | $slice(-2), '-', $concat('0', .day) | $slice(-2)) : null})",
            "tags": ".tags"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import BreezyHR\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return BreezyHR.pull_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['email', 'password', 'company_id', 'company_name', 'position_id']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'edit', 'only_edit_fields']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return BreezyHR.pull_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Broadbean",
      "type": "ATS",
      "subtype": "broadbean",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/broadbean/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Bullhorn",
      "type": "ATS",
      "subtype": "bullhorn",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/bullhorn/logo.jpeg",
      "actions": [
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "WriteProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "Bullhorn Profiles",
          "target_parameters": {
            "title": "WriteProfilesParameters",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client Id",
                "description": "Client identifier for Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client secret identifier for Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "Password for Bullhorn login",
                "field_type": "Auth",
                "type": "string"
              },
              "username": {
                "title": "Username",
                "description": "Username for Bullhorn login",
                "field_type": "Auth",
                "type": "string"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "password",
              "username"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "BullhornProfile",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "Description": "Unique identifier for this entity",
                "type": "string"
              },
              "address": {
                "title": "Address",
                "Description": "Candidate address",
                "allOf": [
                  {
                    "$ref": "#/definitions/BullhornAddress"
                  }
                ]
              },
              "certifications": {
                "title": "Certifications",
                "Description": "Candidate\u2019s certifications"
              },
              "name": {
                "title": "Name",
                "Description": "Candidate\u2019s full name. If setting firstname or lastname, you must also set this field; it does not populate automatically",
                "type": "string"
              },
              "firstName": {
                "title": "Firstname",
                "Description": "Candidate\u2019s first name",
                "type": "string"
              },
              "lastName": {
                "title": "Lastname",
                "Description": "Name of the file",
                "type": "string"
              },
              "email": {
                "title": "Email",
                "Description": "Candidate\u2019s email address",
                "type": "string"
              },
              "mobile": {
                "title": "Mobile",
                "Description": "Candidate\u2019s mobile (cell) telephone number",
                "type": "string"
              },
              "dateOfBirth": {
                "title": "Dateofbirth",
                "Description": "Candidate\u2019s date of birth",
                "type": "integer"
              },
              "experience": {
                "title": "Experience",
                "Description": "Number of years of experience that the Candidate has",
                "type": "integer"
              },
              "skillSet": {
                "title": "Skillset",
                "Description": "Text description of Candidate\u2019s skills",
                "type": "string"
              }
            },
            "definitions": {
              "BullhornAddress": {
                "title": "BullhornAddress",
                "type": "object",
                "properties": {
                  "address1": {
                    "title": "Address1",
                    "Description": "Adress of the profile",
                    "type": "string"
                  },
                  "city": {
                    "title": "City",
                    "Description": "City of the profile",
                    "type": "string"
                  },
                  "state": {
                    "title": "State",
                    "Description": "Country code of the profile",
                    "type": "string"
                  },
                  "zip": {
                    "title": "Zip",
                    "Description": "Postal code of the profile",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "create_profile_body": {
              "id": "?.reference",
              "address": {
                "address1": ".info?.location?.text",
                "address2": null,
                "city": ".info?.location?.fields?.city",
                "state": ".info?.location?.fields?.country",
                "zip": ".info?.location?.fields?.postcode"
              },
              "certifications": null,
              "name": ".info?.full_name",
              "firstName": ".info?.first_name",
              "lastName": ".info?.last_name",
              "email": ".info?.email",
              "mobile": ".info?.phone",
              "experience": "?.experiences_duration != null ?? .experiences_duration | $int : 0",
              "skillSet": ".skills != null ?? .skills | $join(',') : null"
            },
            "enrich_profile_education": "?.educations |$map({ id: '0', candidate: { id: null }, school: ?.school, degree: ?.title, comments: ?.description, city: .location?.text, startDate: .date_start != null ?? .date_start | $timestamp : null, endDate: .date_end != null ?? .date_end  | $timestamp : null })",
            "enrich_profile_experience": "?.experiences | $map({ id: '0', candidate: { id: null }, companyName: ?.company, title: ?.title, comments: ?.description, startDate: .date_start != null ?? .date_start | $timestamp : null, endDate: .date_end != null ?? .date_end  | $timestamp : null })",
            "enrich_profile_attachment": {
              "externalID": "'portfolio'",
              "fileContent": ".attachments?.[0].public_url | $webhook(GET, ., {}, {}, {}, .content) | $b64encode",
              "fileType": "'SAMPLE'",
              "name": ".file_name",
              "description": "'Resume file for candidate.'",
              "type": "'cover'",
              "content_type": "'text/plain'"
            }
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Bullhorn\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Bullhorn.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Bullhorn.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Bullhorn.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['client_id', 'client_secret', 'password', 'username']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Bullhorn.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "Bullhorn Jobs",
          "origin_parameters": {
            "title": "ReadParameters",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client Id",
                "description": "Client identifier for Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client secret identifier for Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "Password for Bullhorn login",
                "field_type": "Auth",
                "type": "string"
              },
              "username": {
                "title": "Username",
                "description": "Username for Bullhorn login",
                "field_type": "Auth",
                "type": "string"
              },
              "last_modified_date": {
                "title": "Last Modified Date",
                "description": "Last Modified Date in timestamp",
                "field_type": "Auth",
                "type": "string"
              },
              "fields": {
                "title": "Fields",
                "description": "Fields to be retrieved from Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "query": {
                "title": "Query",
                "description": "the query parameters",
                "field_type": "Auth",
                "type": "string"
              },
              "count": {
                "title": "Count",
                "description": "Number of items to be returned",
                "field_type": "Auth",
                "type": "integer"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "password",
              "username",
              "last_modified_date",
              "fields",
              "query",
              "count"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BullhornJob",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "Description": "Unique identifier for this entity",
                "type": "integer"
              }
            }
          },
          "supports_incremental": true,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": "?.title",
            "reference": "?.id",
            "location": {
              "text": "?.address.address1",
              "fields": {
                "city": "?.address.city",
                "country": "?.address.countryCode",
                "postal_code": "?.address.zip"
              }
            },
            "sections": [
              {
                "name": "Bullhorn_description",
                "title": "Bullhorn_description",
                "description": ".publicDescription"
              }
            ],
            "skills": "?.skillList != null ?? .skillList | $split(',')| $map({name: ., type: 'undefined', value: null}) : []",
            "tags": [
              {
                "name": "durationWeeks",
                "value": "?.durationWeeks"
              },
              {
                "name": "degreeList",
                "value": "?.degreeList != null ?? .degreeList | $join(',') : null"
              },
              {
                "name": "employmentType",
                "value": "?.employmentType"
              },
              {
                "name": "numOpenings",
                "value": "?.numOpenings"
              },
              {
                "name": "onSite",
                "value": "?.onSite"
              },
              {
                "name": "salaryUnit",
                "value": "?.salaryUnit"
              },
              {
                "name": "startDate",
                "value": "?.startDate"
              },
              {
                "name": "status",
                "value": "?.status"
              },
              {
                "name": "type",
                "value": "?.type"
              },
              {
                "name": "willRelocate",
                "value": "?.willRelocate"
              },
              {
                "name": "salary",
                "value": "?.salary"
              },
              {
                "name": "isWorkFromHome",
                "value": "?.isWorkFromHome"
              },
              {
                "name": "hoursPerWeek",
                "value": "?.hoursPerWeek"
              },
              {
                "name": "hoursOfOperation",
                "value": "?.hoursOfOperation"
              },
              {
                "name": "dateAdded",
                "value": "?.dateAdded"
              }
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Bullhorn\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Bullhorn.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['client_id', 'client_secret', 'password', 'username', 'last_modified_date', 'fields', 'query', 'count']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Bullhorn.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_resume_attachment_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "schedule",
          "origin": "Bullhorn Profiles",
          "origin_parameters": {
            "title": "ReadParameters",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client Id",
                "description": "Client identifier for Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client secret identifier for Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "Password for Bullhorn login",
                "field_type": "Auth",
                "type": "string"
              },
              "username": {
                "title": "Username",
                "description": "Username for Bullhorn login",
                "field_type": "Auth",
                "type": "string"
              },
              "last_modified_date": {
                "title": "Last Modified Date",
                "description": "Last Modified Date in timestamp",
                "field_type": "Auth",
                "type": "string"
              },
              "fields": {
                "title": "Fields",
                "description": "Fields to be retrieved from Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "query": {
                "title": "Query",
                "description": "the query parameters",
                "field_type": "Auth",
                "type": "string"
              },
              "count": {
                "title": "Count",
                "description": "Number of items to be returned",
                "field_type": "Auth",
                "type": "integer"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "password",
              "username",
              "last_modified_date",
              "fields",
              "query",
              "count"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BullhornProfile",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "Description": "Unique identifier for this entity",
                "type": "string"
              },
              "address": {
                "title": "Address",
                "Description": "Candidate address",
                "allOf": [
                  {
                    "$ref": "#/definitions/BullhornAddress"
                  }
                ]
              },
              "certifications": {
                "title": "Certifications",
                "Description": "Candidate\u2019s certifications"
              },
              "name": {
                "title": "Name",
                "Description": "Candidate\u2019s full name. If setting firstname or lastname, you must also set this field; it does not populate automatically",
                "type": "string"
              },
              "firstName": {
                "title": "Firstname",
                "Description": "Candidate\u2019s first name",
                "type": "string"
              },
              "lastName": {
                "title": "Lastname",
                "Description": "Name of the file",
                "type": "string"
              },
              "email": {
                "title": "Email",
                "Description": "Candidate\u2019s email address",
                "type": "string"
              },
              "mobile": {
                "title": "Mobile",
                "Description": "Candidate\u2019s mobile (cell) telephone number",
                "type": "string"
              },
              "dateOfBirth": {
                "title": "Dateofbirth",
                "Description": "Candidate\u2019s date of birth",
                "type": "integer"
              },
              "experience": {
                "title": "Experience",
                "Description": "Number of years of experience that the Candidate has",
                "type": "integer"
              },
              "skillSet": {
                "title": "Skillset",
                "Description": "Text description of Candidate\u2019s skills",
                "type": "string"
              }
            },
            "definitions": {
              "BullhornAddress": {
                "title": "BullhornAddress",
                "type": "object",
                "properties": {
                  "address1": {
                    "title": "Address1",
                    "Description": "Adress of the profile",
                    "type": "string"
                  },
                  "city": {
                    "title": "City",
                    "Description": "City of the profile",
                    "type": "string"
                  },
                  "state": {
                    "title": "State",
                    "Description": "Country code of the profile",
                    "type": "string"
                  },
                  "zip": {
                    "title": "Zip",
                    "Description": "Postal code of the profile",
                    "type": "string"
                  }
                }
              }
            }
          },
          "supports_incremental": true,
          "target": "HrFlow.ai Profile Parsing",
          "target_parameters": {
            "title": "WriteProfileParsingParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Other",
                "type": "string"
              },
              "only_insert": {
                "title": "Only Insert",
                "description": "When enabled the profile is written only if it doesn't exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfileParsing",
            "type": "object",
            "properties": {
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "resume": {
                "$ref": "#/definitions/ResumeToParse"
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              }
            },
            "required": [
              "created_at",
              "resume",
              "tags",
              "metadatas"
            ],
            "definitions": {
              "ResumeToParse": {
                "title": "ResumeToParse",
                "type": "object",
                "properties": {
                  "raw": {
                    "title": "Raw",
                    "type": "string",
                    "format": "binary"
                  },
                  "content_type": {
                    "title": "Content Type",
                    "type": "string"
                  }
                },
                "required": [
                  "raw",
                  "content_type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": "?.id | $string",
            "tags": [
              {
                "name": "dateAvailable",
                "value": "?.dateAvailable"
              },
              {
                "name": "status",
                "value": "?.status"
              },
              {
                "name": "employeeType",
                "value": "?.employeeType"
              },
              {
                "name": "activePlacements",
                "value": "?.activePlacements?.total"
              }
            ],
            "metadatas": [],
            "created_at": null,
            "resume": {
              "raw": ".cvFile",
              "content_type": "application/pdf"
            }
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Bullhorn\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Bullhorn.pull_resume_attachment_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['client_id', 'client_secret', 'password', 'username', 'last_modified_date', 'fields', 'query', 'count']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'only_insert']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Bullhorn.pull_resume_attachment_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_profile_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "schedule",
          "origin": "Bullhorn Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client Id",
                "description": "Client identifier for Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client secret identifier for Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "Password for Bullhorn login",
                "field_type": "Auth",
                "type": "string"
              },
              "username": {
                "title": "Username",
                "description": "Username for Bullhorn login",
                "field_type": "Auth",
                "type": "string"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "password",
              "username"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BullhornProfile",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "Description": "Unique identifier for this entity",
                "type": "string"
              },
              "address": {
                "title": "Address",
                "Description": "Candidate address",
                "allOf": [
                  {
                    "$ref": "#/definitions/BullhornAddress"
                  }
                ]
              },
              "certifications": {
                "title": "Certifications",
                "Description": "Candidate\u2019s certifications"
              },
              "name": {
                "title": "Name",
                "Description": "Candidate\u2019s full name. If setting firstname or lastname, you must also set this field; it does not populate automatically",
                "type": "string"
              },
              "firstName": {
                "title": "Firstname",
                "Description": "Candidate\u2019s first name",
                "type": "string"
              },
              "lastName": {
                "title": "Lastname",
                "Description": "Name of the file",
                "type": "string"
              },
              "email": {
                "title": "Email",
                "Description": "Candidate\u2019s email address",
                "type": "string"
              },
              "mobile": {
                "title": "Mobile",
                "Description": "Candidate\u2019s mobile (cell) telephone number",
                "type": "string"
              },
              "dateOfBirth": {
                "title": "Dateofbirth",
                "Description": "Candidate\u2019s date of birth",
                "type": "integer"
              },
              "experience": {
                "title": "Experience",
                "Description": "Number of years of experience that the Candidate has",
                "type": "integer"
              },
              "skillSet": {
                "title": "Skillset",
                "Description": "Text description of Candidate\u2019s skills",
                "type": "string"
              }
            },
            "definitions": {
              "BullhornAddress": {
                "title": "BullhornAddress",
                "type": "object",
                "properties": {
                  "address1": {
                    "title": "Address1",
                    "Description": "Adress of the profile",
                    "type": "string"
                  },
                  "city": {
                    "title": "City",
                    "Description": "City of the profile",
                    "type": "string"
                  },
                  "state": {
                    "title": "State",
                    "Description": "Country code of the profile",
                    "type": "string"
                  },
                  "zip": {
                    "title": "Zip",
                    "Description": "Postal code of the profile",
                    "type": "string"
                  }
                }
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_parameters": {
            "title": "WriteProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "edit": {
                "title": "Edit",
                "description": "When enabled the profile must exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "only_edit_fields": {
                "title": "Only Edit Fields",
                "description": "List of attributes to use for the edit operation e.g. ['tags', 'metadatas']",
                "field_type": "Other",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "only_edit_fields"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "jsonmap": {
            "info": {
              "full_name": ".name",
              "first_name": ".firstName",
              "last_name": ".lastName",
              "email": ".email",
              "phone": ".mobile",
              "date_birth": ".dateOfBirth",
              "location": {
                "text": ".address.address1"
              },
              "gender": ".gender"
            },
            "skills": ".skillSet.[0] ?? .skillSet | $split(',') | . >> [] | $map({ name: ., type: hard, value: null })",
            "experiences": ".workHistories | $map({ title: .title, location: { text: '', lng: null, lat: null }, company: .companyName, date_start: .startDate, date_end: .endDate, title: .title, description: .comments })",
            "tags": [
              {
                "name": "dateAvailable",
                "value": "?.dateAvailable"
              },
              {
                "name": "status",
                "value": "?.status"
              },
              {
                "name": "employeeType",
                "value": "?.employeeType"
              },
              {
                "name": "activePlacements",
                "value": "?.activePlacements?.total"
              }
            ],
            "educations": ".educations | $map({ location: { text: .city, lng: null, lat: null }, school: .school, date_start: .startDate, date_end: .endDate, title: .degree, certifications: [ .certification ], description: .comments })",
            "reference": "?.id | $string"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Bullhorn\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Bullhorn.pull_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['client_id', 'client_secret', 'password', 'username']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'edit', 'only_edit_fields']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Bullhorn.pull_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "push_application",
          "action_type": "outbound",
          "action_parameters": {
            "title": "WriteProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "Bullhorn Applications",
          "target_parameters": {
            "title": "WriteApplicationsParameters",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client Id",
                "description": "Client identifier for Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client secret identifier for Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "Password for Bullhorn login",
                "field_type": "Auth",
                "type": "string"
              },
              "username": {
                "title": "Username",
                "description": "Username for Bullhorn login",
                "field_type": "Auth",
                "type": "string"
              },
              "job_id": {
                "title": "Job Id",
                "description": "id for the job in Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "status_when_created": {
                "title": "Status When Created",
                "description": "The status of the application when created in Bullhorn",
                "field_type": "Auth",
                "type": "string"
              },
              "source": {
                "title": "Source",
                "description": "The source of the application to be created in Bullhorn",
                "field_type": "Auth",
                "type": "string"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "password",
              "username",
              "job_id",
              "status_when_created"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "BullhornProfile",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "Description": "Unique identifier for this entity",
                "type": "string"
              },
              "address": {
                "title": "Address",
                "Description": "Candidate address",
                "allOf": [
                  {
                    "$ref": "#/definitions/BullhornAddress"
                  }
                ]
              },
              "certifications": {
                "title": "Certifications",
                "Description": "Candidate\u2019s certifications"
              },
              "name": {
                "title": "Name",
                "Description": "Candidate\u2019s full name. If setting firstname or lastname, you must also set this field; it does not populate automatically",
                "type": "string"
              },
              "firstName": {
                "title": "Firstname",
                "Description": "Candidate\u2019s first name",
                "type": "string"
              },
              "lastName": {
                "title": "Lastname",
                "Description": "Name of the file",
                "type": "string"
              },
              "email": {
                "title": "Email",
                "Description": "Candidate\u2019s email address",
                "type": "string"
              },
              "mobile": {
                "title": "Mobile",
                "Description": "Candidate\u2019s mobile (cell) telephone number",
                "type": "string"
              },
              "dateOfBirth": {
                "title": "Dateofbirth",
                "Description": "Candidate\u2019s date of birth",
                "type": "integer"
              },
              "experience": {
                "title": "Experience",
                "Description": "Number of years of experience that the Candidate has",
                "type": "integer"
              },
              "skillSet": {
                "title": "Skillset",
                "Description": "Text description of Candidate\u2019s skills",
                "type": "string"
              }
            },
            "definitions": {
              "BullhornAddress": {
                "title": "BullhornAddress",
                "type": "object",
                "properties": {
                  "address1": {
                    "title": "Address1",
                    "Description": "Adress of the profile",
                    "type": "string"
                  },
                  "city": {
                    "title": "City",
                    "Description": "City of the profile",
                    "type": "string"
                  },
                  "state": {
                    "title": "State",
                    "Description": "Country code of the profile",
                    "type": "string"
                  },
                  "zip": {
                    "title": "Zip",
                    "Description": "Postal code of the profile",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "firstName": "?.info?.first_name",
            "lastName": "?.info?.last_name",
            "name": "?.info?.full_name",
            "address": {
              "address1": ".info?.location?.text",
              "address2": null,
              "city": ".info?.location?.fields?.city",
              "state": ".info?.location?.fields?.country",
              "zip": ".info?.location?.fields?.postcode"
            },
            "email": "?.info?.email",
            "mobile": "?.info?.phone",
            "attachment": {
              "externalID": "'portfolio'",
              "fileContent": ".attachments?.[0].public_url | $webhook(GET, ., {}, {}, {}, .content) | $b64encode",
              "fileType": "'SAMPLE'",
              "name": ".file_name",
              "description": "'Resume file for candidate.'",
              "type": "'RESUME'",
              "format": "'PDF'"
            }
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Bullhorn\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Bullhorn.push_application(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Bullhorn.model.action_by_name(\"push_application\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Bullhorn.push_application(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['client_id', 'client_secret', 'password', 'username', 'job_id', 'status_when_created', 'source']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Bullhorn.push_application(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Cadreemploi",
      "type": "JOBBOARD",
      "subtype": "cadreemploi",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/cadreemploi/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Carerix",
      "type": "ATS",
      "subtype": "carerix",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/carerix/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Carrevolutis",
      "type": "JOBBOARD",
      "subtype": "carrevolutis",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/carrevolutis/logo.jpeg",
      "actions": [
        {
          "name": "catch_profile",
          "action_type": "inbound",
          "action_parameters": {
            "title": "TriggerViewActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "Carrevolutis Candidate",
          "origin_parameters": {
            "title": "ReadProfilesParameters",
            "type": "object",
            "properties": {
              "profile": {
                "title": "Profile",
                "description": "Event object recieved from the Webhook",
                "field_type": "Other",
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_parameters": {
            "title": "WriteProfileParsingParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Other",
                "type": "string"
              },
              "only_insert": {
                "title": "Only Insert",
                "description": "When enabled the profile is written only if it doesn't exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfileParsing",
            "type": "object",
            "properties": {
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "resume": {
                "$ref": "#/definitions/ResumeToParse"
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              }
            },
            "required": [
              "created_at",
              "resume",
              "tags",
              "metadatas"
            ],
            "definitions": {
              "ResumeToParse": {
                "title": "ResumeToParse",
                "type": "object",
                "properties": {
                  "raw": {
                    "title": "Raw",
                    "type": "string",
                    "format": "binary"
                  },
                  "content_type": {
                    "title": "Content Type",
                    "type": "string"
                  }
                },
                "required": [
                  "raw",
                  "content_type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": null,
            "resume": {
              "raw": ".cv",
              "content_type": ".content_type"
            },
            "tags": [
              {
                "name": "job-number",
                "value": "?.jobkey != null ?? .jobkey  | $slice(0,10) : null"
              },
              {
                "name": "first_name",
                "value": "?.firstName"
              },
              {
                "name": "last_name",
                "value": "?.lastName"
              },
              {
                "name": "phone",
                "value": "?.phone"
              },
              {
                "name": "email",
                "value": "?.email"
              },
              {
                "name": "coverText",
                "value": "?.coverText"
              },
              {
                "name": "profile-country",
                "value": "?.profilecountry"
              },
              {
                "name": "profile-regions",
                "value": "?.profileregions"
              },
              {
                "name": "profile-domains",
                "value": "?.profiledomains"
              },
              {
                "name": "job-lien_annonce_site_carriere",
                "value": "?.joblien_annonce_site_carriere"
              },
              {
                "name": "statistic-source",
                "value": "?.statisticsource"
              },
              {
                "name": "statistic-jbsource",
                "value": "?.statisticjbsource"
              }
            ],
            "metadatas": [],
            "created_at": null
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Carrevolutis\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Carrevolutis.catch_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Carrevolutis.model.action_by_name(\"catch_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Carrevolutis.catch_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['profile']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'only_insert']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Carrevolutis.catch_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "CATS",
      "type": "ATS",
      "subtype": "cats",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/cats/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Cegid (Meta4)",
      "type": "ATS",
      "subtype": "meta4",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/meta4/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Ceipal",
      "type": "ATS",
      "subtype": "ceipal",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/ceipal/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Ceridian",
      "type": "HCM",
      "subtype": "ceridian",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/ceridian/logo.webp",
      "actions": [
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "Ceridian Jobs",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "subdomain": {
                "title": "Subdomain",
                "description": "Subdomain used to access Ceridian API",
                "field_type": "Other",
                "type": "string"
              },
              "client_name_space": {
                "title": "Client Name Space",
                "description": "Client name space used to access Ceridian API",
                "field_type": "Other",
                "type": "string"
              },
              "companyName": {
                "title": "Companyname",
                "description": "Company name. Example: XYZ Co.",
                "field_type": "Query Param",
                "type": "string"
              },
              "parentCompanyName": {
                "title": "Parentcompanyname",
                "description": "Parent Company name. Example: Ceridian",
                "field_type": "Query Param",
                "type": "string"
              },
              "lastUpdateTimeFrom": {
                "title": "Lastupdatetimefrom",
                "description": "A starting timestamp of job posting date. Example: 2017-01-01T13:24:56",
                "field_type": "Query Param",
                "type": "string"
              },
              "htmlDescription": {
                "title": "Htmldescription",
                "description": "A flag to feed the jobs over with html formatting or plain text description",
                "field_type": "Query Param",
                "type": "boolean"
              }
            },
            "required": [
              "subdomain",
              "client_name_space"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "CeridianDayforceJobModel",
            "type": "object",
            "properties": {
              "Title": {
                "title": "Title",
                "type": "string"
              },
              "Description": {
                "title": "Description",
                "type": "string"
              },
              "ClientSiteName": {
                "title": "Clientsitename",
                "type": "string"
              },
              "ClientSiteXRefCode": {
                "title": "Clientsitexrefcode",
                "type": "string"
              },
              "CompanyName": {
                "title": "Companyname",
                "type": "string"
              },
              "ParentCompanyName": {
                "title": "Parentcompanyname",
                "type": "string"
              },
              "JobDetailsUrl": {
                "title": "Jobdetailsurl",
                "type": "string"
              },
              "ApplyUrl": {
                "title": "Applyurl",
                "type": "string"
              },
              "AddressLine1": {
                "title": "Addressline1",
                "type": "string"
              },
              "City": {
                "title": "City",
                "type": "string"
              },
              "State": {
                "title": "State",
                "type": "string"
              },
              "Country": {
                "title": "Country",
                "type": "string"
              },
              "PostalCode": {
                "title": "Postalcode",
                "type": "string"
              },
              "DatePosted": {
                "title": "Dateposted",
                "type": "string"
              },
              "LastUpdated": {
                "title": "Lastupdated",
                "type": "string"
              },
              "ReferenceNumber": {
                "title": "Referencenumber",
                "type": "integer"
              },
              "ParentRequisitionCode": {
                "title": "Parentrequisitioncode",
                "type": "integer"
              },
              "IsVirtualLocation": {
                "title": "Isvirtuallocation",
                "type": "boolean"
              }
            },
            "required": [
              "Title",
              "JobDetailsUrl",
              "ReferenceNumber"
            ]
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": "?.Title",
            "summary": null,
            "reference": "$concat(?.ReferenceNumber,?.ParentRequisitionCode) | $string",
            "url": "?.JobDetailsUrl",
            "location": {
              "text": "?.City",
              "lat": null,
              "lng": null,
              "geojson": {
                "state": "?.State",
                "country": "?.Country",
                "postal_code": "?.PostalCode"
              }
            },
            "sections": [
              {
                "name": "dayforce_description",
                "title": "dayforce_description",
                "description": "?.Description"
              }
            ],
            "created_at": "?.DatePosted",
            "updated_at": "?.LastUpdated",
            "tags": [
              {
                "name": "dayforce_apply_url",
                "value": "?.ApplyUrl | $string"
              },
              {
                "name": "dayforce_client-site-name",
                "value": "?.ClientSiteName | $string"
              },
              {
                "name": "dayforce_client-site-ref-code",
                "value": "?.ClientSiteXRefCode | $string"
              },
              {
                "name": "dayforce_company_name",
                "value": "?.CompanyName | $string"
              },
              {
                "name": "dayforce_remote",
                "value": "?.IsVirtualLocation | $string"
              }
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Ceridian\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Ceridian.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['subdomain', 'client_name_space', 'companyName', 'parentCompanyName', 'lastUpdateTimeFrom', 'htmlDescription']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Ceridian.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "ClayHR",
      "type": "ATS",
      "subtype": "clayhr",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/clayhr/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "ClockWork",
      "type": "ATS",
      "subtype": "clockwork",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/clockwork/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Comeet",
      "type": "ATS",
      "subtype": "comeet",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/comeet/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "concludis",
      "type": "ATS",
      "subtype": "concludis",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/concludis/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Connexys By Bullhorn",
      "type": "ATS",
      "subtype": "connexys",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/connexys/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Cornerjob",
      "type": "JOBBOARD",
      "subtype": "cornerjob",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/cornerjob/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Cornerstone OnDemand",
      "type": "ATS",
      "subtype": "cornerstoneondemand",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/cornerstoneondemand/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Cornerstone TalentLink",
      "type": "ATS",
      "subtype": "cornerstonetalentlink",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/cornerstonetalentlink/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Crosstalent",
      "type": "ATS",
      "subtype": "crosstalent",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/crosstalent/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "d.vinci",
      "type": "ATS",
      "subtype": "dvinci",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/dvinci/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Digitalrecruiters",
      "type": "ATS",
      "subtype": "digitalrecruiters",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/digitalrecruiters/logo.png",
      "actions": [
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "DigitalRecruiters Jobs",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "token": {
                "title": "Token",
                "description": "Digital Recruiters API token.",
                "field_type": "Auth",
                "type": "string"
              },
              "environment_url": {
                "title": "Environment Url",
                "description": "Digital Recruiters API url environnement.",
                "field_type": "Other",
                "type": "string"
              }
            },
            "required": [
              "token",
              "environment_url"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "DigitalRecruitersJob",
            "type": "object",
            "properties": {
              "locale": {
                "title": "Locale",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "type": "string"
              },
              "published_at": {
                "title": "Published At",
                "type": "string"
              },
              "catch_phrase": {
                "title": "Catch Phrase",
                "type": "string"
              },
              "contract_type": {
                "title": "Contract Type",
                "type": "string"
              },
              "contract_duration": {
                "$ref": "#/definitions/ContractDuration"
              },
              "contract_work_period": {
                "title": "Contract Work Period",
                "type": "string"
              },
              "service": {
                "title": "Service",
                "type": "string"
              },
              "experience_level": {
                "title": "Experience Level",
                "type": "string"
              },
              "education_level": {
                "title": "Education Level",
                "type": "string"
              },
              "title": {
                "title": "Title",
                "type": "string"
              },
              "description": {
                "title": "Description",
                "type": "string"
              },
              "profile": {
                "title": "Profile",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "salary": {
                "$ref": "#/definitions/Salary"
              },
              "pictures": {
                "title": "Pictures",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "videos": {
                "title": "Videos",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "internal_apply_url": {
                "title": "Internal Apply Url",
                "type": "string"
              },
              "apply_url": {
                "title": "Apply Url",
                "type": "string"
              },
              "address": {
                "$ref": "#/definitions/Address"
              },
              "entity": {
                "$ref": "#/definitions/Entity"
              },
              "referent_recruiter": {
                "$ref": "#/definitions/ReferentRecruiter"
              },
              "brand": {
                "$ref": "#/definitions/Brand"
              },
              "custom_fields": {
                "title": "Custom Fields",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CustomField"
                }
              },
              "count_recruited": {
                "title": "Count Recruited",
                "type": "string"
              }
            },
            "required": [
              "locale",
              "reference",
              "published_at",
              "catch_phrase",
              "contract_type",
              "contract_duration",
              "contract_work_period",
              "service",
              "experience_level",
              "education_level",
              "title",
              "description",
              "profile",
              "skills",
              "salary",
              "pictures",
              "videos",
              "address",
              "entity",
              "referent_recruiter",
              "brand",
              "custom_fields"
            ],
            "definitions": {
              "ContractDuration": {
                "title": "ContractDuration",
                "type": "object",
                "properties": {
                  "min": {
                    "title": "Min",
                    "type": "integer"
                  },
                  "max": {
                    "title": "Max",
                    "type": "integer"
                  }
                }
              },
              "Salary": {
                "title": "Salary",
                "type": "object",
                "properties": {
                  "min": {
                    "title": "Min",
                    "type": "integer"
                  },
                  "max": {
                    "title": "Max",
                    "type": "integer"
                  },
                  "kind": {
                    "title": "Kind",
                    "type": "string"
                  },
                  "rate_type": {
                    "title": "Rate Type",
                    "type": "string"
                  },
                  "variable": {
                    "title": "Variable",
                    "type": "string"
                  },
                  "currency": {
                    "title": "Currency",
                    "type": "string"
                  }
                }
              },
              "AddressParts": {
                "title": "AddressParts",
                "type": "object",
                "properties": {
                  "street": {
                    "title": "Street",
                    "type": "string"
                  },
                  "zip": {
                    "title": "Zip",
                    "type": "string"
                  },
                  "city": {
                    "title": "City",
                    "type": "string"
                  },
                  "county": {
                    "title": "County",
                    "type": "string"
                  },
                  "state": {
                    "title": "State",
                    "type": "string"
                  },
                  "country": {
                    "title": "Country",
                    "type": "string"
                  }
                },
                "required": [
                  "street",
                  "zip",
                  "city",
                  "county",
                  "state",
                  "country"
                ]
              },
              "Address": {
                "title": "Address",
                "type": "object",
                "properties": {
                  "parts": {
                    "$ref": "#/definitions/AddressParts"
                  },
                  "formatted": {
                    "title": "Formatted",
                    "type": "string"
                  },
                  "position": {
                    "title": "Position",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "parts",
                  "formatted",
                  "position"
                ]
              },
              "Manager": {
                "title": "Manager",
                "type": "object",
                "properties": {
                  "section_title": {
                    "title": "Section Title",
                    "type": "string"
                  },
                  "section_body": {
                    "title": "Section Body",
                    "type": "string"
                  },
                  "picture_url": {
                    "title": "Picture Url",
                    "type": "string"
                  },
                  "firstname": {
                    "title": "Firstname",
                    "type": "string"
                  },
                  "lastname": {
                    "title": "Lastname",
                    "type": "string"
                  },
                  "position": {
                    "title": "Position",
                    "type": "string"
                  }
                },
                "required": [
                  "section_title",
                  "section_body",
                  "firstname",
                  "lastname",
                  "position"
                ]
              },
              "Hierarchy": {
                "title": "Hierarchy",
                "type": "object",
                "properties": {
                  "depth": {
                    "title": "Depth",
                    "type": "integer"
                  },
                  "column_name": {
                    "title": "Column Name",
                    "type": "string"
                  },
                  "public_name": {
                    "title": "Public Name",
                    "type": "string"
                  }
                },
                "required": [
                  "depth",
                  "column_name",
                  "public_name"
                ]
              },
              "Entity": {
                "title": "Entity",
                "type": "object",
                "properties": {
                  "public_name": {
                    "title": "Public Name",
                    "type": "string"
                  },
                  "internal_ref": {
                    "title": "Internal Ref",
                    "type": "string"
                  },
                  "around": {
                    "title": "Around",
                    "type": "string"
                  },
                  "address": {
                    "$ref": "#/definitions/Address"
                  },
                  "manager": {
                    "$ref": "#/definitions/Manager"
                  },
                  "hierarchy": {
                    "title": "Hierarchy",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Hierarchy"
                    }
                  }
                },
                "required": [
                  "public_name",
                  "internal_ref",
                  "around",
                  "address",
                  "manager",
                  "hierarchy"
                ]
              },
              "ReferentRecruiter": {
                "title": "ReferentRecruiter",
                "type": "object",
                "properties": {
                  "firstname": {
                    "title": "Firstname",
                    "type": "string"
                  },
                  "lastname": {
                    "title": "Lastname",
                    "type": "string"
                  },
                  "picture_url": {
                    "title": "Picture Url",
                    "type": "string"
                  }
                },
                "required": [
                  "firstname",
                  "lastname"
                ]
              },
              "Brand": {
                "title": "Brand",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "type": "string"
                  },
                  "favicon": {
                    "title": "Favicon",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "logo",
                  "favicon"
                ]
              },
              "CustomField": {
                "title": "CustomField",
                "type": "object",
                "properties": {
                  "hash": {
                    "title": "Hash",
                    "type": "string"
                  },
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "type": "string"
                  }
                },
                "required": [
                  "hash",
                  "name",
                  "value"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "#custom_field_mapping": {
              "Possibilit\u00e9 de t\u00e9l\u00e9travail": "digitalrecruiters_possibilite_de_teletravail",
              "Automatisation (HRFlow.ai)": "digitalrecruiters_automatisation_hrflow",
              "Heures hebdomadaires": "digitalrecruiters_heures_hebdomadaires",
              "Date envisag\u00e9e de recrutement": "digitalrecruiters_date_enviseagee_de_recrutement",
              "Date de fin": "digitalrecruiters_date_de_fin",
              "Motif de recrutement": "digitalrecruiters_motif_de_recrutement",
              "Nom de la personne remplac\u00e9e": "digitalrecruiters_nom_de_la_personne_remplacee",
              "Echelon": "digitalrecruiters_echelon",
              "Fili\u00e8re": "digitalrecruiters_filiere",
              "Horaires": "digitalrecruiters_horaires",
              "Un candidat est d\u00e9j\u00e0 identifi\u00e9": "digitalrecruiters_candidat_deja_identifie",
              "Nom de ce candidat": "digitalrecruiters_nom_du_candidat"
            },
            "name": "?.title",
            "picture": "?.pictures != null ?? .pictures[0]?.default >> null",
            "reference": "?.reference",
            "created_at": "?.published_at",
            "location": "?.address != null ?? .address | {text: ?.formatted, lat: ?.position?.lat != null ?? .position.lat | $float : null, lng: ?.position?.lon != null ?? .position.lon | $float : null } : {text: '', lat: null, lng: null}",
            "sections": "?.description != null && ?.profile != null ?? [{name: 'description', title: 'description', description: ?.description | $sub('<.*?>', '') | $sub('&nbsp;', ' ') | $sub('&amp', '&') | $sub('&quot;', '\"') | $sub('&apos;', '\"') | $sub('&lt;', '<') | $sub('&gt;', '>') | $sub('\\s+', ' ') | $strip}, {name: 'profile', title: 'profile', description: ?.profile | $sub('<.*?>', '') | $sub('&nbsp;', ' ') | $sub('&amp', '&') | $sub('&quot;', '\"') | $sub('&apos;', '\"') | $sub('&lt;', '<') | $sub('&gt;', '>') | $sub('\\s+', ' ') | $strip}] : []",
            "requirements": "?.profile | $sub('<.*?>', '') | $sub('&nbsp;', ' ') | $sub('&amp', '&') | $sub('&quot;', '\"') | $sub('&apos;', '\"') | $sub('&lt;', '<') | $sub('&gt;', '>') | $sub('\\s+', ' ') | $strip",
            "skills": "?.skills >> [] | $map({name: ., type: null, value: null})",
            "tags": "$merge(.salary ?? [{name: digitalrecruiters_compensation_min, value: .salary?.min }, {name: digitalrecruiters_compensation_max, value: .salary?.max }, {name: digitalrecruiters_compensation_currency, value: .salary?.currency }], .entity ?? [{name: digitalrecruiters_manager_firstName, value: .entity?.manager?.firstname }, {name: digitalrecruiters_manager_lastName, value: .entity?.manager?.lastname }, {name: digitalrecruiters_manager_position, value: .entity?.manager?.position }, {name: digitalrecruiters_manager_picture, value: .entity?.manager?.picture_url }], .referent_recruiter ?? [{name: digitalrecruiters_recruiter_email, value: .referent_recruiter?.email }, {name: digitalrecruiters_recruiter_phoneNumber, value: .referent_recruiter?.phoneNumber }, {name: digitalrecruiters_recruiter_picture, value: .referent_recruiter?.picture_url }], ?.hierarchy >> [] | $map({name: $concat('hierarchy_', ?.depth >> ''), value: $concat(?.column_name >> '', ':', ?.public_name >> '')}), ?.custom_fields >> [] | $map({name: #custom_field_mapping.[.name], value: ?.value}))"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import DigitalRecruiters\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return DigitalRecruiters.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['token', 'environment_url']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return DigitalRecruiters.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_profile_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadProfilesActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "schedule",
          "origin": "DigitalRecruiters Read Profils",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_key": {
                "title": "Api Key",
                "description": "DigitalRecruiters API key",
                "field_type": "Auth",
                "type": "string"
              },
              "username": {
                "title": "Username",
                "description": "Username for authentication",
                "field_type": "Auth",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "Password for authentication",
                "field_type": "Auth",
                "type": "string"
              },
              "environment_url": {
                "title": "Environment Url",
                "description": "URL environment for the API",
                "field_type": "Other",
                "minLength": 1,
                "maxLength": 2083,
                "format": "uri",
                "type": "string"
              },
              "jobAd": {
                "title": "Jobad",
                "description": "Optional: Id of a job advertisement",
                "field_type": "Other",
                "type": "integer"
              },
              "sort": {
                "title": "Sort",
                "description": "Optional: Field to sort by (id, firstName, lastName, createdAt, updatedAt)",
                "field_type": "Other",
                "type": "string"
              },
              "limit": {
                "title": "Limit",
                "description": "Optional: Limit the number of results returned",
                "default": 50,
                "field_type": "Other",
                "type": "integer"
              },
              "page": {
                "title": "Page",
                "description": "Optional: Page number of results returned",
                "default": 1,
                "field_type": "Other",
                "type": "integer"
              }
            },
            "required": [
              "api_key",
              "username",
              "password",
              "environment_url"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "DigitalRecruitersReadProfile",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "type": "integer"
              },
              "firstName": {
                "title": "Firstname",
                "type": "string"
              },
              "lastName": {
                "title": "Lastname",
                "type": "string"
              },
              "createdAt": {
                "title": "Createdat",
                "type": "string",
                "format": "date-time"
              },
              "jobTitle": {
                "title": "Jobtitle",
                "type": "string"
              },
              "avatar": {
                "$ref": "#/definitions/Avatar"
              },
              "gender": {
                "title": "Gender",
                "type": "string"
              },
              "email": {
                "title": "Email",
                "type": "string"
              },
              "location": {
                "$ref": "#/definitions/Location"
              },
              "contract": {
                "$ref": "#/definitions/ContractItem"
              },
              "status": {
                "title": "Status",
                "type": "string"
              },
              "jobReference": {
                "$ref": "#/definitions/JobReference"
              },
              "privacy": {
                "$ref": "#/definitions/Privacy"
              },
              "cv": {
                "$ref": "#/definitions/CV"
              },
              "resume": {
                "$ref": "#/definitions/Resume"
              }
            },
            "required": [
              "id",
              "firstName",
              "lastName",
              "createdAt",
              "jobTitle",
              "avatar",
              "gender",
              "email",
              "location",
              "contract",
              "status",
              "jobReference",
              "privacy",
              "cv"
            ],
            "definitions": {
              "Avatar": {
                "title": "Avatar",
                "type": "object",
                "properties": {
                  "url": {
                    "title": "Url",
                    "minLength": 1,
                    "maxLength": 2083,
                    "format": "uri",
                    "type": "string"
                  }
                },
                "required": [
                  "url"
                ]
              },
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "zip": {
                    "title": "Zip",
                    "type": "string"
                  },
                  "city": {
                    "title": "City",
                    "type": "string"
                  },
                  "county": {
                    "title": "County",
                    "type": "string"
                  },
                  "state": {
                    "title": "State",
                    "type": "string"
                  },
                  "country": {
                    "title": "Country",
                    "type": "string"
                  },
                  "latitude": {
                    "title": "Latitude",
                    "type": "number"
                  },
                  "longitude": {
                    "title": "Longitude",
                    "type": "number"
                  }
                },
                "required": [
                  "zip",
                  "city",
                  "country"
                ]
              },
              "ContractItem": {
                "title": "ContractItem",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "integer"
                  },
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "countryNodeIds": {
                    "title": "Countrynodeids",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "JobReference": {
                "title": "JobReference",
                "type": "object",
                "properties": {
                  "label": {
                    "title": "Label",
                    "type": "string"
                  },
                  "hashId": {
                    "title": "Hashid",
                    "type": "string"
                  }
                },
                "required": [
                  "label",
                  "hashId"
                ]
              },
              "Privacy": {
                "title": "Privacy",
                "type": "object",
                "properties": {
                  "status": {
                    "title": "Status",
                    "type": "string"
                  },
                  "updatedAt": {
                    "title": "Updatedat",
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "status"
                ]
              },
              "CV": {
                "title": "CV",
                "type": "object",
                "properties": {
                  "url": {
                    "title": "Url",
                    "minLength": 1,
                    "maxLength": 2083,
                    "format": "uri",
                    "type": "string"
                  }
                },
                "required": [
                  "url"
                ]
              },
              "Resume": {
                "title": "Resume",
                "type": "object",
                "properties": {
                  "raw": {
                    "title": "Raw",
                    "type": "string",
                    "format": "binary"
                  },
                  "content_type": {
                    "title": "Content Type",
                    "type": "string"
                  }
                },
                "required": [
                  "raw",
                  "content_type"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_parameters": {
            "title": "WriteProfileParsingParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Other",
                "type": "string"
              },
              "only_insert": {
                "title": "Only Insert",
                "description": "When enabled the profile is written only if it doesn't exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfileParsing",
            "type": "object",
            "properties": {
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "resume": {
                "$ref": "#/definitions/ResumeToParse"
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              }
            },
            "required": [
              "created_at",
              "resume",
              "tags",
              "metadatas"
            ],
            "definitions": {
              "ResumeToParse": {
                "title": "ResumeToParse",
                "type": "object",
                "properties": {
                  "raw": {
                    "title": "Raw",
                    "type": "string",
                    "format": "binary"
                  },
                  "content_type": {
                    "title": "Content Type",
                    "type": "string"
                  }
                },
                "required": [
                  "raw",
                  "content_type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": "?.id",
            "created_at": "?.createdAt",
            "updated_at": "$now(iso)",
            "resume": "?.resume",
            "tags": [
              {
                "name": "digitalrecruiters_profile-email",
                "value": "?.email"
              },
              {
                "name": "digitalrecruiters_profile-phoneNumber",
                "value": "?.phoneNumber"
              },
              {
                "name": "digitalrecruiters_profile-fullName",
                "value": ".full_name"
              },
              {
                "name": "digitalrecruiters_avatar",
                "value": ".avatar"
              },
              {
                "name": "digitalrecruiters_profile-location",
                "value": "?.location != null ?? .location | $concat(?.street >> '', ', ',?.city >> '', ', ', ?.zip >> '', ', ', ?.country >> ''): '' "
              },
              {
                "name": "digitalrecruiters_education-level",
                "value": "?.educationLevel"
              },
              {
                "name": "digitalrecruiters_job-experience-level",
                "value": "?.experienceLevel"
              },
              {
                "name": "digitalrecruiters_job-title",
                "value": "?.jobTitle"
              },
              {
                "name": "digitalrecruiters_job-id",
                "value": "?.jobAd?.id"
              },
              {
                "name": "digitalrecruiters_job-published-at",
                "value": "?.jobAd?.publishedAt"
              },
              {
                "name": "digitalrecruiters_locale",
                "value": "?.locale"
              },
              {
                "name": "digitalrecruiters_origin",
                "value": "?.origin"
              },
              {
                "name": "digitalrecruiters_is-spontaneous",
                "value": "?.isSpontaneous"
              },
              {
                "name": "digitalrecruiters_is-imported",
                "value": "?.isImported"
              },
              {
                "name": "digitalrecruiters_is-from-external-api",
                "value": "?.isFromExternalApi"
              },
              {
                "name": "digitalrecruiters_rejected-reason",
                "value": "?.rejectedReason"
              },
              {
                "name": "digitalrecruiters_application-status",
                "value": "?.applicationStatus"
              }
            ],
            "metadatas": []
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import DigitalRecruiters\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return DigitalRecruiters.pull_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_key', 'username', 'password', 'environment_url', 'jobAd', 'sort', 'limit', 'page']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'only_insert']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return DigitalRecruiters.pull_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "WriteProfilesActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "DigitalRecruiters Write Profile",
          "target_parameters": {
            "title": "WriteProfilesParameters",
            "type": "object",
            "properties": {
              "token": {
                "title": "Token",
                "description": "Digital Recruiters API token.",
                "field_type": "Auth",
                "type": "string"
              },
              "environment_url": {
                "title": "Environment Url",
                "description": "Digital Recruiters API url environnement.",
                "field_type": "Other",
                "type": "string"
              },
              "job_reference": {
                "title": "Job Reference",
                "description": "reference of the job to which the candidate is applying.",
                "field_type": "Other",
                "type": "string"
              },
              "message": {
                "title": "Message",
                "description": "Application message.",
                "default": "message du candidat",
                "field_type": "Other",
                "type": "string"
              }
            },
            "required": [
              "token",
              "environment_url",
              "job_reference"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "DigitalRecruitersWriteProfile",
            "type": "object",
            "properties": {
              "reference": {
                "title": "Reference",
                "type": "string"
              },
              "consent_date": {
                "title": "Consent Date",
                "type": "string"
              },
              "s_o": {
                "title": "S O",
                "type": "string"
              },
              "locale": {
                "title": "Locale",
                "type": "string"
              },
              "ApplicationMessage": {
                "$ref": "#/definitions/DigitalRecruitersImportCandidateMessage"
              },
              "ApplicationProfile": {
                "$ref": "#/definitions/DigitalRecruitersCandidateProfile"
              },
              "file": {
                "$ref": "#/definitions/DigitalRecruitersImportCandidateFile"
              }
            },
            "required": [
              "reference",
              "consent_date",
              "s_o",
              "locale",
              "ApplicationMessage",
              "ApplicationProfile"
            ],
            "definitions": {
              "DigitalRecruitersImportCandidateMessage": {
                "title": "DigitalRecruitersImportCandidateMessage",
                "type": "object",
                "properties": {
                  "message": {
                    "title": "Message",
                    "type": "string"
                  }
                },
                "required": [
                  "message"
                ]
              },
              "DigitalRecruitersCandidateProfile": {
                "title": "DigitalRecruitersCandidateProfile",
                "type": "object",
                "properties": {
                  "gender": {
                    "title": "Gender",
                    "type": "integer"
                  },
                  "firstName": {
                    "title": "Firstname",
                    "type": "string"
                  },
                  "lastName": {
                    "title": "Lastname",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phoneNumber": {
                    "title": "Phonenumber",
                    "type": "string"
                  },
                  "job": {
                    "title": "Job",
                    "type": "string"
                  },
                  "addressStreet": {
                    "title": "Addressstreet",
                    "type": "string"
                  },
                  "addressZip": {
                    "title": "Addresszip",
                    "type": "string"
                  },
                  "addressCity": {
                    "title": "Addresscity",
                    "type": "string"
                  }
                },
                "required": [
                  "gender",
                  "firstName",
                  "lastName",
                  "email"
                ]
              },
              "DigitalRecruitersImportCandidateFile": {
                "title": "DigitalRecruitersImportCandidateFile",
                "type": "object",
                "properties": {
                  "content": {
                    "title": "Content",
                    "type": "string"
                  },
                  "name": {
                    "title": "Name",
                    "type": "string"
                  }
                },
                "required": [
                  "content",
                  "name"
                ]
              }
            }
          },
          "jsonmap": {
            "consent_date": "$now('iso')",
            "s_o": "?.s_o >> ''",
            "locale": "'fr_FR'",
            "ApplicationProfile": {
              "gender": ".info.gender | $lower == 'male' ?? 1 : 2",
              "firstName": ".info.first_name",
              "lastName": ".info.last_name",
              "email": ".info.email",
              "phoneNumber": ".info?.phone",
              "addressStreet": ".info?.location >> {} | ?.text",
              "addressZip": ".info?.location >> {} | ?.fields[0]?.postcode",
              "addressCity": ".info?.location >> {} | ?.fields[0]?.state_district"
            }
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import DigitalRecruiters\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return DigitalRecruiters.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = DigitalRecruiters.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return DigitalRecruiters.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['token', 'environment_url', 'job_reference', 'message']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return DigitalRecruiters.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Distrijob",
      "type": "JOBBOARD",
      "subtype": "distrijob",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/distrijob/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "EngageATS",
      "type": "ATS",
      "subtype": "engageats",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/engageats/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Engagement Jeunes",
      "type": "JOBBOARD",
      "subtype": "engagementjeunes",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/engagementjeunes/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "EOLIA Software",
      "type": "ATS",
      "subtype": "eolia",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/eolia/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Eploy",
      "type": "ATS",
      "subtype": "eploy",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/eploy/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "eRecruiter",
      "type": "ATS",
      "subtype": "erecruiter",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/erecruiter/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Factorial",
      "type": "ATS",
      "subtype": "factorial",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/factorial/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "FashionJobs",
      "type": "JOBBOARD",
      "subtype": "fashionjobs",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/fashionjobs/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Fieldglass SAP",
      "type": "ATS",
      "subtype": "fieldglasssap",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/fieldglasssap/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Figaro Classifieds",
      "type": "JOBBOARD",
      "subtype": "figaroclassifieds",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/figaroclassifieds/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Flatchr",
      "type": "ATS",
      "subtype": "flatchr",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/flatchr/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Fountain",
      "type": "ATS",
      "subtype": "fountain",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/fountain/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "freework",
      "type": "JOBBOARD",
      "subtype": "freework",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/freework/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Freshteam",
      "type": "ATS",
      "subtype": "freshteam",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/freshteam/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Glassdoor",
      "type": "JOBBOARD",
      "subtype": "glassdoor",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/glassdoor/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "GoldenBees",
      "type": "JOBBOARD",
      "subtype": "goldenbees",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/goldenbees/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Greenhouse",
      "type": "ATS",
      "subtype": "greenhouse",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/greenhouse/logo.jpeg",
      "actions": [
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "Greenhouse Jobs",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "board_token": {
                "title": "Board Token",
                "description": "Board_token",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "board_token"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "GreenhouseJobModel",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "type": "integer"
              },
              "internal_job_id": {
                "title": "Internal Job Id",
                "type": "integer"
              },
              "title": {
                "title": "Title",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "type": "string"
              },
              "requisition_id": {
                "title": "Requisition Id",
                "type": "string"
              },
              "location": {
                "$ref": "#/definitions/Location"
              },
              "absolute_url": {
                "title": "Absolute Url",
                "type": "string"
              },
              "metadata": {
                "title": "Metadata"
              },
              "content": {
                "title": "Content",
                "type": "string"
              },
              "departments": {
                "title": "Departments",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Department"
                }
              },
              "offices": {
                "title": "Offices",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Office"
                }
              }
            },
            "required": [
              "id",
              "internal_job_id",
              "title",
              "location",
              "absolute_url",
              "content",
              "departments",
              "offices"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Department": {
                "title": "Department",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "integer"
                  },
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "parent_id": {
                    "title": "Parent Id"
                  },
                  "child_ids": {
                    "title": "Child Ids",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "external_id": {
                    "title": "External Id",
                    "type": "integer"
                  }
                },
                "required": [
                  "id",
                  "name",
                  "external_id"
                ]
              },
              "Office": {
                "title": "Office",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "integer"
                  },
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "type": "string"
                  },
                  "parent_id": {
                    "title": "Parent Id",
                    "type": "integer"
                  },
                  "child_ids": {
                    "title": "Child Ids",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "id",
                  "name",
                  "location"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": "?.title",
            "summary": null,
            "reference": "?.id | $string",
            "url": "?.absolute_url",
            "location": {
              "text": "?.location.name",
              "lat": null,
              "lng": null
            },
            "sections": [
              {
                "name": "greenhouse_description",
                "title": "greenhouse_description",
                "description": "?.content | $sub('<.*?>', '') | $sub('&nbsp;', ' ') | $sub('&amp', '&') | $sub('&quot;', '\"') | $sub('&apos;', '\"') | $sub('&lt;', '<') | $sub('&gt;', '>') | $sub('\\s+', ' ') | $strip"
              }
            ],
            "metadatas": "?.metadata",
            "tags": [
              {
                "name": "greenhouse_department-name",
                "value": "?.departments.[0]?.name != null ?? .departments.[0]?.name : 'Undefined'"
              },
              {
                "name": "greenhouse_department-id",
                "value": "?.departments.[0]?.id != null ?? .departments.[0]?.id | $string : 'Undefined'"
              },
              {
                "name": "greenhouse_office-location",
                "value": "?.offices.[0]?.name != null ?? .offices.[0]?.name : 'Undefined'"
              },
              {
                "name": "greenhouse_office-id",
                "value": "?.offices.[0]?.id != null ?? .offices.[0]?.id | $string : 'Undefined'"
              },
              {
                "name": "greenhouse_education",
                "value": "?.education"
              },
              {
                "name": "greenhouse_employment",
                "value": "?.employment"
              }
            ],
            "updated_at": "?.updated_at"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Greenhouse\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Greenhouse.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['board_token']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Greenhouse.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "WriteProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "Greenhouse Profiles",
          "target_parameters": {
            "title": "WriteProfilesParameters",
            "type": "object",
            "properties": {
              "auth": {
                "title": "Auth",
                "description": "XAPIKeyAuth",
                "field_type": "Auth",
                "type": "string"
              },
              "on_behalf_of": {
                "title": "On Behalf Of",
                "description": "The ID of the user sending the profile, or the person he is sending the profile on behalf of",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "auth",
              "on_behalf_of"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "GreenhouseProfileModel",
            "type": "object",
            "properties": {
              "first_name": {
                "title": "First Name",
                "description": "The candidate's first name",
                "type": "string"
              },
              "last_name": {
                "title": "Last Name",
                "description": "The candidate's last name",
                "type": "string"
              },
              "company": {
                "title": "Company",
                "description": "The candidate's company'",
                "type": "string"
              },
              "title": {
                "title": "Title",
                "description": "The candidate's title'",
                "type": "string"
              },
              "phone_numbers": {
                "title": "Phone Numbers",
                "description": "Array of phone numbers. Passing an empty array will clear all",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PhoneNumber"
                }
              },
              "addresses": {
                "title": "Addresses",
                "description": "Array of addresses, passing an empty array will clear all",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Address"
                }
              },
              "email_addresses": {
                "title": "Email Addresses",
                "description": "Array of email addresses, passing an empty array will",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EmailAddress"
                }
              },
              "website_addresses": {
                "title": "Website Addresses",
                "description": "Array of website addresses, passing an empty array will clear all",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/WebsiteAddress"
                }
              },
              "social_media_addresses": {
                "title": "Social Media Addresses",
                "description": "Array of social media addresses. Passing an empty array will clear all",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SocialMediaAddress"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "Array of education records",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "employments": {
                "title": "Employments",
                "description": "Array of employment records",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Employment"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "Array of tags as strings. Passing an empty array will clear all",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "applications": {
                "title": "Applications",
                "description": "An array of application objects `dict(job_id=int)`. at least one is required",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "recruiter": {
                "title": "Recruiter",
                "description": "An object representing the candidate's recruiter",
                "allOf": [
                  {
                    "$ref": "#/definitions/Recruiter"
                  }
                ]
              },
              "coordinator": {
                "$ref": "#/definitions/coordinator"
              }
            },
            "required": [
              "first_name",
              "last_name",
              "applications"
            ],
            "definitions": {
              "PhoneNumber": {
                "title": "PhoneNumber",
                "type": "object",
                "properties": {
                  "value": {
                    "title": "Value",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "type"
                ]
              },
              "Address": {
                "title": "Address",
                "type": "object",
                "properties": {
                  "value": {
                    "title": "Value",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "type"
                ]
              },
              "EmailAddress": {
                "title": "EmailAddress",
                "type": "object",
                "properties": {
                  "value": {
                    "title": "Value",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "type"
                ]
              },
              "WebsiteAddress": {
                "title": "WebsiteAddress",
                "type": "object",
                "properties": {
                  "value": {
                    "title": "Value",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "type"
                ]
              },
              "SocialMediaAddress": {
                "title": "SocialMediaAddress",
                "type": "object",
                "properties": {
                  "value": {
                    "title": "Value",
                    "type": "string"
                  }
                },
                "required": [
                  "value"
                ]
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "school_id": {
                    "title": "School Id",
                    "type": "integer"
                  },
                  "discipline_id": {
                    "title": "Discipline Id",
                    "type": "integer"
                  },
                  "degree_id": {
                    "title": "Degree Id",
                    "type": "integer"
                  },
                  "start_date": {
                    "title": "Start Date",
                    "type": "string"
                  },
                  "end_date": {
                    "title": "End Date",
                    "type": "string"
                  }
                },
                "required": [
                  "school_id",
                  "discipline_id",
                  "degree_id",
                  "start_date",
                  "end_date"
                ]
              },
              "Employment": {
                "title": "Employment",
                "type": "object",
                "properties": {
                  "company_name": {
                    "title": "Company Name",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "type": "string"
                  },
                  "start_date": {
                    "title": "Start Date",
                    "type": "string"
                  },
                  "end_date": {
                    "title": "End Date",
                    "type": "string"
                  }
                },
                "required": [
                  "company_name",
                  "title",
                  "start_date",
                  "end_date"
                ]
              },
              "Recruiter": {
                "title": "Recruiter",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "integer"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  }
                }
              },
              "coordinator": {
                "title": "coordinator",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "integer"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "email"
                ]
              }
            }
          },
          "jsonmap": {
            "applications": "?.tags | $map(.name == 'application_boardKey_jobReference'?? .) | $map(.value | $split('_') | .[1] | $int)",
            "first_name": "?.info?.first_name",
            "last_name": "?.info?.last_name",
            "external_id": "?.reference",
            "resume": "?.attachments.[0].public_url",
            "phone_numbers": [
              {
                "value": "?.info?.phone",
                "type": "mobile"
              }
            ],
            "email_addresses": [
              {
                "value": "?.info?.email",
                "type": "personal"
              }
            ],
            "addresses": [
              {
                "value": "?.info?.location?.text",
                "type": "home"
              }
            ],
            "notes": "?.text",
            "social_media_addresses": ".info?.urls | $map({value: ?.url})",
            "company": "?.experiences.[0].company",
            "title": "?.experiences.[0].title",
            "employments": "?.experiences | $map({company_name: ?.company, title: ?.title, start_date: ?.date_start, end_date: ?.date_end})"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Greenhouse\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Greenhouse.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Greenhouse.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Greenhouse.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['auth', 'on_behalf_of']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Greenhouse.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_profile_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadProfilesActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "schedule",
          "origin": "Greenhouse Profiles",
          "origin_parameters": {
            "title": "ReadProfilesParameters",
            "type": "object",
            "properties": {
              "auth": {
                "title": "Auth",
                "description": "XAPIKeyAuth",
                "field_type": "Auth",
                "type": "string"
              },
              "created_after": {
                "title": "Created After",
                "description": "Return only candidates that were created at or after this timestamp. Timestamp must be in in ISO-8601 format.",
                "field_type": "Query Param",
                "type": "string"
              },
              "updated_after": {
                "title": "Updated After",
                "description": "Return only candidates that were updated at or after this timestamp. Timestamp must be in in ISO-8601 format.",
                "field_type": "Query Param",
                "type": "string"
              },
              "job_id": {
                "title": "Job Id",
                "description": "If supplied, only return candidates that have applied to this job. Will return both when a candidate has applied to a job and when they\u2019re a prospect for a job.",
                "field_type": "Query Param",
                "type": "string"
              },
              "email": {
                "title": "Email",
                "description": "If supplied, only return candidates who have a matching e-mail address. If supplied with job_id, only return a candidate with a matching e-mail with an application on the job. If email and candidate_ids are included, candidate_ids will be ignored.",
                "field_type": "Query Param",
                "type": "string"
              },
              "candidate_ids": {
                "title": "Candidate Ids",
                "description": "If supplied, only return candidates with matching ids. If supplied with job_id, only return a candidate with a matching id with an application on the job. If email and candidate_ids are included, candidate_ids will be ignored.",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "auth"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "GreenhouseProfileModel",
            "type": "object",
            "properties": {
              "first_name": {
                "title": "First Name",
                "description": "The candidate's first name",
                "type": "string"
              },
              "last_name": {
                "title": "Last Name",
                "description": "The candidate's last name",
                "type": "string"
              },
              "company": {
                "title": "Company",
                "description": "The candidate's company'",
                "type": "string"
              },
              "title": {
                "title": "Title",
                "description": "The candidate's title'",
                "type": "string"
              },
              "phone_numbers": {
                "title": "Phone Numbers",
                "description": "Array of phone numbers. Passing an empty array will clear all",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PhoneNumber"
                }
              },
              "addresses": {
                "title": "Addresses",
                "description": "Array of addresses, passing an empty array will clear all",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Address"
                }
              },
              "email_addresses": {
                "title": "Email Addresses",
                "description": "Array of email addresses, passing an empty array will",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EmailAddress"
                }
              },
              "website_addresses": {
                "title": "Website Addresses",
                "description": "Array of website addresses, passing an empty array will clear all",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/WebsiteAddress"
                }
              },
              "social_media_addresses": {
                "title": "Social Media Addresses",
                "description": "Array of social media addresses. Passing an empty array will clear all",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SocialMediaAddress"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "Array of education records",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "employments": {
                "title": "Employments",
                "description": "Array of employment records",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Employment"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "Array of tags as strings. Passing an empty array will clear all",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "applications": {
                "title": "Applications",
                "description": "An array of application objects `dict(job_id=int)`. at least one is required",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "recruiter": {
                "title": "Recruiter",
                "description": "An object representing the candidate's recruiter",
                "allOf": [
                  {
                    "$ref": "#/definitions/Recruiter"
                  }
                ]
              },
              "coordinator": {
                "$ref": "#/definitions/coordinator"
              }
            },
            "required": [
              "first_name",
              "last_name",
              "applications"
            ],
            "definitions": {
              "PhoneNumber": {
                "title": "PhoneNumber",
                "type": "object",
                "properties": {
                  "value": {
                    "title": "Value",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "type"
                ]
              },
              "Address": {
                "title": "Address",
                "type": "object",
                "properties": {
                  "value": {
                    "title": "Value",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "type"
                ]
              },
              "EmailAddress": {
                "title": "EmailAddress",
                "type": "object",
                "properties": {
                  "value": {
                    "title": "Value",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "type"
                ]
              },
              "WebsiteAddress": {
                "title": "WebsiteAddress",
                "type": "object",
                "properties": {
                  "value": {
                    "title": "Value",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "type"
                ]
              },
              "SocialMediaAddress": {
                "title": "SocialMediaAddress",
                "type": "object",
                "properties": {
                  "value": {
                    "title": "Value",
                    "type": "string"
                  }
                },
                "required": [
                  "value"
                ]
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "school_id": {
                    "title": "School Id",
                    "type": "integer"
                  },
                  "discipline_id": {
                    "title": "Discipline Id",
                    "type": "integer"
                  },
                  "degree_id": {
                    "title": "Degree Id",
                    "type": "integer"
                  },
                  "start_date": {
                    "title": "Start Date",
                    "type": "string"
                  },
                  "end_date": {
                    "title": "End Date",
                    "type": "string"
                  }
                },
                "required": [
                  "school_id",
                  "discipline_id",
                  "degree_id",
                  "start_date",
                  "end_date"
                ]
              },
              "Employment": {
                "title": "Employment",
                "type": "object",
                "properties": {
                  "company_name": {
                    "title": "Company Name",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "type": "string"
                  },
                  "start_date": {
                    "title": "Start Date",
                    "type": "string"
                  },
                  "end_date": {
                    "title": "End Date",
                    "type": "string"
                  }
                },
                "required": [
                  "company_name",
                  "title",
                  "start_date",
                  "end_date"
                ]
              },
              "Recruiter": {
                "title": "Recruiter",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "integer"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  }
                }
              },
              "coordinator": {
                "title": "coordinator",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "integer"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "email"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_parameters": {
            "title": "WriteProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "edit": {
                "title": "Edit",
                "description": "When enabled the profile must exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "only_edit_fields": {
                "title": "Only Edit Fields",
                "description": "List of attributes to use for the edit operation e.g. ['tags', 'metadatas']",
                "field_type": "Other",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "only_edit_fields"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": "?.id",
            "info": {
              "first_name": "?.first_name",
              "last_name": "?.last_name",
              "email": "?.email_addresses.[0] ?? .email_addresses.[0].value : null",
              "phone": "?.phone_numbers.[0] ?? .phone_numbers.[0].value : null",
              "location": {
                "text": "?.addresses | $map(.type == 'home' ?? .) | .[0].value",
                "lat": null,
                "lng": null
              }
            },
            "text": "?.notes",
            "attachments": "?.attachments | $map({public_url: .url, type: .type})",
            "experiences": "?.employments | $map({title: .title, company: .company_name, date_start: .start_date, date_end: .end_date})",
            "educations": "?.educations | $map({school: .school_name, title: $concat(.degree, ' ', .discipline), date_start: .start_date, date_end: .end_date})"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Greenhouse\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Greenhouse.pull_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['auth', 'created_after', 'updated_after', 'job_id', 'email', 'candidate_ids']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'edit', 'only_edit_fields']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Greenhouse.pull_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "GuideCom",
      "type": "ATS",
      "subtype": "guidecom",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/guidecom/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Handicap-Job",
      "type": "JOBBOARD",
      "subtype": "handicapjob",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/handicapjob/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Harbour ATS",
      "type": "ATS",
      "subtype": "harbourats",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/harbourats/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Haufe Umantis",
      "type": "ATS",
      "subtype": "umantis",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/umantis/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "HelloWork",
      "type": "JOBBOARD",
      "subtype": "hellowork",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/hellowork/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Heyrecruit",
      "type": "ATS",
      "subtype": "heyrecruit",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/heyrecruit/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Homerun",
      "type": "ATS",
      "subtype": "homerun",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/homerun/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "HR Cloud",
      "type": "ATS",
      "subtype": "hrcloud",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/hrcloud/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "HR Office",
      "type": "ATS",
      "subtype": "hroffice",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/hroffice/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "HRworks",
      "type": "ATS",
      "subtype": "hrworks",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/hrworks/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Hubspot",
      "type": "CRM",
      "subtype": "hubspot",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/hubspot/logo.jpeg",
      "actions": [
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "WriteProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "Hubspot Contacts",
          "target_parameters": {
            "title": "WriteProfilesParameters",
            "type": "object",
            "properties": {
              "access_token": {
                "title": "Access Token",
                "description": "The token used to authenticate any API calls made for to your HubSpot account.",
                "field_type": "Auth",
                "type": "string"
              },
              "dealID": {
                "title": "Dealid",
                "field_type": "Query Param",
                "type": "integer"
              },
              "ticketID": {
                "title": "Ticketid",
                "field_type": "Query Param",
                "type": "integer"
              },
              "pipeline": {
                "title": "Pipeline",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/Pipeline"
                  }
                ]
              }
            },
            "required": [
              "access_token"
            ],
            "additionalProperties": false,
            "definitions": {
              "Stage": {
                "title": "Stage",
                "type": "object",
                "properties": {
                  "label": {
                    "title": "Label",
                    "type": "string"
                  },
                  "displayOrder": {
                    "title": "Displayorder",
                    "type": "integer"
                  },
                  "metadata": {
                    "title": "Metadata",
                    "type": "string"
                  }
                },
                "required": [
                  "label",
                  "displayOrder",
                  "metadata"
                ]
              },
              "Pipeline": {
                "title": "Pipeline",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "integer"
                  },
                  "label": {
                    "title": "Label",
                    "type": "string"
                  },
                  "displayOrder": {
                    "title": "Displayorder",
                    "type": "integer"
                  },
                  "stages": {
                    "title": "Stages",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Stage"
                    }
                  }
                },
                "required": [
                  "id",
                  "label",
                  "displayOrder",
                  "stages"
                ]
              }
            }
          },
          "target_data_schema": {
            "title": "ContactObject",
            "type": "object",
            "properties": {
              "properties": {
                "title": "Properties",
                "description": "Contact details are stored in contact properties. In addition to default properties, you can store custom data by creating custom contact properties. These can be managed through the CRM object properties endpoints.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Properties"
                  }
                ]
              }
            },
            "required": [
              "properties"
            ],
            "definitions": {
              "Properties": {
                "title": "Properties",
                "type": "object",
                "properties": {
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "firstname": {
                    "title": "Firstname",
                    "type": "string"
                  },
                  "lastname": {
                    "title": "Lastname",
                    "type": "string"
                  },
                  "date_of_birth": {
                    "title": "Date Of Birth",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "address": {
                    "title": "Address",
                    "type": "string"
                  },
                  "zip": {
                    "title": "Zip",
                    "type": "string"
                  },
                  "city": {
                    "title": "City",
                    "type": "string"
                  },
                  "state": {
                    "title": "State",
                    "type": "string"
                  },
                  "country": {
                    "title": "Country",
                    "type": "string"
                  },
                  "jobtitle": {
                    "title": "Jobtitle",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "type": "string"
                  },
                  "annualrevenue": {
                    "title": "Annualrevenue",
                    "type": "string"
                  },
                  "website": {
                    "title": "Website",
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "firstname",
                  "lastname"
                ]
              }
            }
          },
          "jsonmap": {
            "properties": {
              "email": ".info.email",
              "firstname": ".info.first_name",
              "lastname": ".info.last_name",
              "date_of_birth": ".info.date_birth",
              "phone": ".info.phone",
              "address": ".location.text",
              "zip": ".fields >> {} | ?.postcode >> Undefined",
              "city": ".fields >> {} | ?.city >> Undefined",
              "state": ".fields >> {} | ?.state >> Undefined",
              "country": ".fields >> {} | ?.country >> Undefined",
              "company": "''"
            }
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Hubspot\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Hubspot.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Hubspot.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Hubspot.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['access_token', 'dealID', 'ticketID', 'pipeline']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Hubspot.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_profile_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadProfilessActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "schedule",
          "origin": "Hubspot Contacts",
          "origin_parameters": {
            "title": "ReadProfilesParameters",
            "type": "object",
            "properties": {
              "access_token": {
                "title": "Access Token",
                "description": "The token used to authenticate any API calls made for to your HubSpot account.",
                "field_type": "Auth",
                "type": "string"
              },
              "limit": {
                "title": "Limit",
                "description": "The maximum number of results to display per page.",
                "field_type": "Query Param",
                "type": "integer"
              },
              "after": {
                "title": "After",
                "description": "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
                "field_type": "Query Param",
                "type": "string"
              },
              "properties": {
                "title": "Properties",
                "description": "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
                "default": "firstname,lastname,date_of_birth,email,phone,company,address,zip,city,state,country",
                "field_type": "Query Param",
                "type": "string"
              },
              "propertiesWithHistory": {
                "title": "Propertieswithhistory",
                "description": "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.",
                "field_type": "Query Param",
                "type": "string"
              },
              "associations": {
                "title": "Associations",
                "description": "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
                "field_type": "Query Param",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "archived": {
                "title": "Archived",
                "description": "Whether to return only results that have been archived.",
                "default": false,
                "field_type": "Query Param",
                "type": "boolean"
              }
            },
            "required": [
              "access_token"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "ContactObject",
            "type": "object",
            "properties": {
              "properties": {
                "title": "Properties",
                "description": "Contact details are stored in contact properties. In addition to default properties, you can store custom data by creating custom contact properties. These can be managed through the CRM object properties endpoints.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Properties"
                  }
                ]
              }
            },
            "required": [
              "properties"
            ],
            "definitions": {
              "Properties": {
                "title": "Properties",
                "type": "object",
                "properties": {
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "firstname": {
                    "title": "Firstname",
                    "type": "string"
                  },
                  "lastname": {
                    "title": "Lastname",
                    "type": "string"
                  },
                  "date_of_birth": {
                    "title": "Date Of Birth",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "address": {
                    "title": "Address",
                    "type": "string"
                  },
                  "zip": {
                    "title": "Zip",
                    "type": "string"
                  },
                  "city": {
                    "title": "City",
                    "type": "string"
                  },
                  "state": {
                    "title": "State",
                    "type": "string"
                  },
                  "country": {
                    "title": "Country",
                    "type": "string"
                  },
                  "jobtitle": {
                    "title": "Jobtitle",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "type": "string"
                  },
                  "annualrevenue": {
                    "title": "Annualrevenue",
                    "type": "string"
                  },
                  "website": {
                    "title": "Website",
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "firstname",
                  "lastname"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_parameters": {
            "title": "WriteProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "edit": {
                "title": "Edit",
                "description": "When enabled the profile must exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "only_edit_fields": {
                "title": "Only Edit Fields",
                "description": "List of attributes to use for the edit operation e.g. ['tags', 'metadatas']",
                "field_type": "Other",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "only_edit_fields"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": ".id",
            "info": {
              "email": ".properties.email",
              "first_name": ".properties.firstname",
              "last_name": ".properties.lastname",
              "full_name": "$concat(.properties.firstname, ' ', .properties.lastname)",
              "date_birth": ".properties.date_of_birth",
              "phone": ".properties.phone",
              "location": {
                "text": ".properties.address",
                "fields": {
                  "postcode": ".properties.zip",
                  "city": ".properties.city",
                  "state": ".properties.state",
                  "country": ".properties.country"
                }
              }
            },
            "experiences": [],
            "educations": []
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Hubspot\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Hubspot.pull_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['access_token', 'limit', 'after', 'properties', 'propertiesWithHistory', 'associations', 'archived']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'edit', 'only_edit_fields']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Hubspot.pull_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "iCIMS",
      "type": "ATS",
      "subtype": "icims",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/icims/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Indeed",
      "type": "JOBBOARD",
      "subtype": "indeed",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/indeed/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Infinite BrassRing",
      "type": "ATS",
      "subtype": "infinitebrassring",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/infinitebrassring/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "InRecruiting",
      "type": "ATS",
      "subtype": "inrecruiting",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/inrecruiting/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Inzojob",
      "type": "JOBBOARD",
      "subtype": "inzojob",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/inzojob/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "JazzHR",
      "type": "ATS",
      "subtype": "jazzhr",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jazzhr/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "JobAdder",
      "type": "ATS",
      "subtype": "jobadder",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobadder/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Jobaffinity",
      "type": "ATS",
      "subtype": "jobaffinity",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobaffinity/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "JobDiva",
      "type": "ATS",
      "subtype": "jobdiva",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobdiva/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Jobijoba",
      "type": "JOBBOARD",
      "subtype": "jobijoba",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobijoba/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Jobology",
      "type": "JOBBOARD",
      "subtype": "jobology",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobology/logo.jpeg",
      "actions": [
        {
          "name": "catch_profile",
          "action_type": "inbound",
          "action_parameters": {
            "title": "TriggerViewActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "Jobology Candidate",
          "origin_parameters": {
            "title": "ReadProfilesParameters",
            "type": "object",
            "properties": {
              "profile": {
                "title": "Profile",
                "description": "Event object recieved from the Webhook",
                "field_type": "Other",
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_parameters": {
            "title": "WriteProfileParsingParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Other",
                "type": "string"
              },
              "only_insert": {
                "title": "Only Insert",
                "description": "When enabled the profile is written only if it doesn't exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfileParsing",
            "type": "object",
            "properties": {
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "resume": {
                "$ref": "#/definitions/ResumeToParse"
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              }
            },
            "required": [
              "created_at",
              "resume",
              "tags",
              "metadatas"
            ],
            "definitions": {
              "ResumeToParse": {
                "title": "ResumeToParse",
                "type": "object",
                "properties": {
                  "raw": {
                    "title": "Raw",
                    "type": "string",
                    "format": "binary"
                  },
                  "content_type": {
                    "title": "Content Type",
                    "type": "string"
                  }
                },
                "required": [
                  "raw",
                  "content_type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": null,
            "resume": {
              "raw": ".cv",
              "content_type": ".content_type"
            },
            "tags": [
              {
                "name": "job-number",
                "value": "?.jobkey != null ?? .jobkey  | $slice(0,10) : null"
              },
              {
                "name": "first_name",
                "value": "?.firstName"
              },
              {
                "name": "last_name",
                "value": "?.lastName"
              },
              {
                "name": "phone",
                "value": "?.phone"
              },
              {
                "name": "email",
                "value": "?.email"
              },
              {
                "name": "coverText",
                "value": "?.coverText"
              },
              {
                "name": "profile-country",
                "value": "?.profilecountry"
              },
              {
                "name": "profile-regions",
                "value": "?.profileregions"
              },
              {
                "name": "profile-domains",
                "value": "?.profiledomains"
              },
              {
                "name": "job-lien_annonce_site_carriere",
                "value": "?.joblien_annonce_site_carriere"
              },
              {
                "name": "statistic-source",
                "value": "?.statisticsource"
              },
              {
                "name": "statistic-jbsource",
                "value": "?.statisticjbsource"
              }
            ],
            "metadatas": [],
            "created_at": null
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Jobology\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Jobology.catch_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Jobology.model.action_by_name(\"catch_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Jobology.catch_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['profile']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'only_insert']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Jobology.catch_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Jobrapido",
      "type": "JOBBOARD",
      "subtype": "jobrapido",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobrapido/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "JobScore",
      "type": "ATS",
      "subtype": "jobscore",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobscore/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Jobsoid",
      "type": "ATS",
      "subtype": "jobsoid",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobsoid/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "JobTeaser",
      "type": "JOBBOARD",
      "subtype": "jobteaser",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobteaser/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Jobtransport",
      "type": "JOBBOARD",
      "subtype": "jobtransport",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobtransport/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Jobvitae",
      "type": "JOBBOARD",
      "subtype": "jobvitae",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobvitae/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Jobvite",
      "type": "ATS",
      "subtype": "jobvite",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobvite/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Jobylon",
      "type": "ATS",
      "subtype": "jobylon",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jobylon/logo.webp",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "JOIN",
      "type": "ATS",
      "subtype": "join",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/join/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Jooble",
      "type": "JOBBOARD",
      "subtype": "jooble",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/jooble/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Keljob",
      "type": "JOBBOARD",
      "subtype": "keljob",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/keljob/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Lano",
      "type": "ATS",
      "subtype": "lano",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/lano/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Laponi",
      "type": "JOBBOARD",
      "subtype": "laponi",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/laponi/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Leboncoin",
      "type": "JOBBOARD",
      "subtype": "leboncoin",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/leboncoin/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "LesJeudis",
      "type": "JOBBOARD",
      "subtype": "lesjeudis",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/lesjeudis/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Lever",
      "type": "ATS",
      "subtype": "lever",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/lever/logo.jpeg",
      "actions": [
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "Lever Jobs",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "auth_domain": {
                "title": "Auth Domain",
                "description": "Auth domain for authenticating with Lever API, exemple: sandbox-lever",
                "field_type": "Auth",
                "type": "string"
              },
              "client_domain": {
                "title": "Client Domain",
                "description": "Client domain for authenticating with Lever API, exemple: api.sandbox",
                "field_type": "Auth",
                "type": "string"
              },
              "client_id": {
                "title": "Client Id",
                "description": "Client ID for authenticating with Lever API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client secret for authenticating with Lever API",
                "field_type": "Auth",
                "type": "string"
              },
              "authorization_code": {
                "title": "Authorization Code",
                "description": "Authorization code for obtaining access token",
                "field_type": "Auth",
                "type": "string"
              },
              "limit": {
                "title": "Limit",
                "description": "Number of jobs to fetch per request (max: 100)",
                "default": 100,
                "field_type": "Query Param",
                "type": "integer"
              }
            },
            "required": [
              "auth_domain",
              "client_domain",
              "client_id",
              "client_secret",
              "authorization_code"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "LeverJob",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "type": "string"
              },
              "state": {
                "title": "State",
                "type": "string"
              },
              "distributionChannels": {
                "title": "Distributionchannels",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user": {
                "title": "User",
                "type": "string"
              },
              "owner": {
                "title": "Owner",
                "type": "string"
              },
              "hiringManager": {
                "title": "Hiringmanager",
                "type": "string"
              },
              "categories": {
                "$ref": "#/definitions/LeverJobCategories"
              },
              "tags": {
                "title": "Tags",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "content": {
                "$ref": "#/definitions/LeverJobContent"
              },
              "country": {
                "title": "Country",
                "type": "string"
              },
              "followers": {
                "title": "Followers",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "reqCode": {
                "title": "Reqcode",
                "type": "string"
              },
              "requisitionCodes": {
                "title": "Requisitioncodes",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "urls": {
                "$ref": "#/definitions/LeverJobUrls"
              },
              "confidentiality": {
                "title": "Confidentiality",
                "type": "string"
              },
              "createdAt": {
                "title": "Createdat",
                "type": "integer"
              },
              "updatedAt": {
                "title": "Updatedat",
                "type": "integer"
              },
              "workplaceType": {
                "title": "Workplacetype",
                "type": "string"
              },
              "salaryRange": {
                "$ref": "#/definitions/LeverJobSalaryRange"
              }
            },
            "required": [
              "id",
              "text",
              "state",
              "distributionChannels",
              "user",
              "owner",
              "hiringManager",
              "categories",
              "tags",
              "content",
              "country",
              "followers",
              "reqCode",
              "requisitionCodes",
              "urls",
              "confidentiality",
              "createdAt",
              "updatedAt",
              "workplaceType",
              "salaryRange"
            ],
            "definitions": {
              "LeverJobCategories": {
                "title": "LeverJobCategories",
                "type": "object",
                "properties": {
                  "commitment": {
                    "title": "Commitment",
                    "type": "string"
                  },
                  "department": {
                    "title": "Department",
                    "type": "string"
                  },
                  "level": {
                    "title": "Level",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "type": "string"
                  },
                  "team": {
                    "title": "Team",
                    "type": "string"
                  }
                },
                "required": [
                  "commitment",
                  "department",
                  "level",
                  "location",
                  "team"
                ]
              },
              "LeverJobContent": {
                "title": "LeverJobContent",
                "type": "object",
                "properties": {
                  "description": {
                    "title": "Description",
                    "type": "string"
                  },
                  "descriptionHtml": {
                    "title": "Descriptionhtml",
                    "type": "string"
                  },
                  "lists": {
                    "title": "Lists",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "closing": {
                    "title": "Closing",
                    "type": "string"
                  },
                  "closingHtml": {
                    "title": "Closinghtml",
                    "type": "string"
                  }
                },
                "required": [
                  "description",
                  "descriptionHtml",
                  "lists",
                  "closing",
                  "closingHtml"
                ]
              },
              "LeverJobUrls": {
                "title": "LeverJobUrls",
                "type": "object",
                "properties": {
                  "list": {
                    "title": "List",
                    "type": "string"
                  },
                  "show": {
                    "title": "Show",
                    "type": "string"
                  },
                  "apply": {
                    "title": "Apply",
                    "type": "string"
                  }
                },
                "required": [
                  "list",
                  "show",
                  "apply"
                ]
              },
              "LeverJobSalaryRange": {
                "title": "LeverJobSalaryRange",
                "type": "object",
                "properties": {
                  "min": {
                    "title": "Min",
                    "type": "integer"
                  },
                  "max": {
                    "title": "Max",
                    "type": "integer"
                  },
                  "currency": {
                    "title": "Currency",
                    "type": "string"
                  },
                  "interval": {
                    "title": "Interval",
                    "type": "string"
                  }
                },
                "required": [
                  "min",
                  "max",
                  "currency",
                  "interval"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "reference": ".id",
            "name": ".text",
            "location": {
              "text": "?.categories?.location",
              "lat": null,
              "lng": null
            },
            "url": ".urls.show",
            "summary": ".content.description",
            "sections": ".content?.lists >> [] | $map({name: ?.text, title: ?.text, description: .content | $sub('<[^<]+?>', '') | $sub('&nbsp;', ' ')})",
            "tags": "$merge([{name: lever_confidential, value: .confidentiality == 'non-confidential' ?? False : True}, .country != null ?? {name: lever_country, value: .country}, .state != null ?? {name: lever_state, value: .state}, .workplaceType != null ?? {name: lever_workplaceType, value: .workplaceType}], .categories | $items | $map({name: $concat('lever_', .[0]), value: .[1]}) ,.tags | $map({name: $concat('lever_additional_tag_', #i), value: .}), .distributionChannels | $map({name: $concat('lever_distributionChannel_', #i), value: .}), .urls | $items | $map({name: $concat('lever_url_', .[0]), value: .[1]}))",
            "ranges_float": "?.salaryRange >> [] | $map({name: 'salary', value_min: ?.min, value_max: ?.max, unit: ?.currency})",
            "created_at": ".createdAt | $fromtimestamp(true)",
            "updated_at": ".uploadedAt | $fromtimestamp(true)"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Lever\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Lever.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['auth_domain', 'client_domain', 'client_id', 'client_secret', 'authorization_code', 'limit']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Lever.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "WriteProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "Lever Profiles",
          "target_parameters": {
            "title": "WriteProfileParameters",
            "type": "object",
            "properties": {
              "auth_domain": {
                "title": "Auth Domain",
                "description": "Auth domain for authenticating with Lever API, exemple: sandbox-lever",
                "field_type": "Auth",
                "type": "string"
              },
              "client_domain": {
                "title": "Client Domain",
                "description": "Client domain for authenticating with Lever API, exemple: api.sandbox",
                "field_type": "Auth",
                "type": "string"
              },
              "client_id": {
                "title": "Client Id",
                "description": "Client ID for authenticating with Lever API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client secret for authenticating with Lever API",
                "field_type": "Auth",
                "type": "string"
              },
              "authorization_code": {
                "title": "Authorization Code",
                "description": "Authorization code for obtaining access token",
                "field_type": "Auth",
                "type": "string"
              },
              "perform_as": {
                "title": "Perform As",
                "description": "User ID on behalf of whom the create action should be performed",
                "field_type": "Query Param",
                "type": "string"
              },
              "parse": {
                "title": "Parse",
                "description": "If true, parse resume for autofilling",
                "default": false,
                "field_type": "Query Param",
                "type": "boolean"
              },
              "perform_as_posting_owner": {
                "title": "Perform As Posting Owner",
                "description": "If true, set Opportunity owner to posting owner",
                "default": false,
                "field_type": "Query Param",
                "type": "boolean"
              }
            },
            "required": [
              "auth_domain",
              "client_domain",
              "client_id",
              "client_secret",
              "authorization_code",
              "perform_as"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "LeverProfile",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "email": {
                "title": "Email",
                "type": "string"
              },
              "phone": {
                "title": "Phone",
                "type": "string"
              },
              "createdAt": {
                "title": "Createdat",
                "type": "string"
              },
              "updatedAt": {
                "title": "Updatedat",
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "createdAt",
              "updatedAt"
            ]
          },
          "jsonmap": {
            "name": ".info.full_name",
            "headline": "$merge(.experiences || [] | $map(.company), .educations || [] | $map(.school)) | $join(',')",
            "location": ".info.location.text",
            "phones": [
              {
                "type": "mobile",
                "value": ".info.phone"
              }
            ],
            "emails": [
              ".info.email"
            ],
            "links": ".info?.urls != null ?? .info.urls | $map(?.url) : []",
            "tags": "?.skills != null ?? .skills | $map(?.name) : []",
            "createdAt": ".createdAt != null ?? $timestamp(true) : null",
            "file": "?.attachments.[0]"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Lever\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Lever.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Lever.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Lever.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['auth_domain', 'client_domain', 'client_id', 'client_secret', 'authorization_code', 'perform_as', 'parse', 'perform_as_posting_owner']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Lever.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_profile_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadProfilesParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "schedule",
          "origin": "Lever Profiles",
          "origin_parameters": {
            "title": "ReadProfilesParameters",
            "type": "object",
            "properties": {
              "auth_domain": {
                "title": "Auth Domain",
                "description": "Auth domain for authenticating with Lever API, exemple: sandbox-lever",
                "field_type": "Auth",
                "type": "string"
              },
              "client_domain": {
                "title": "Client Domain",
                "description": "Client domain for authenticating with Lever API, exemple: api.sandbox",
                "field_type": "Auth",
                "type": "string"
              },
              "client_id": {
                "title": "Client Id",
                "description": "Client ID for authenticating with Lever API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client secret for authenticating with Lever API",
                "field_type": "Auth",
                "type": "string"
              },
              "authorization_code": {
                "title": "Authorization Code",
                "description": "Authorization code for obtaining access token",
                "field_type": "Auth",
                "type": "string"
              },
              "limit": {
                "title": "Limit",
                "description": "Number of jobs to fetch per request (max: 100)",
                "default": 100,
                "field_type": "Query Param",
                "type": "integer"
              }
            },
            "required": [
              "auth_domain",
              "client_domain",
              "client_id",
              "client_secret",
              "authorization_code"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "LeverProfile",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "email": {
                "title": "Email",
                "type": "string"
              },
              "phone": {
                "title": "Phone",
                "type": "string"
              },
              "createdAt": {
                "title": "Createdat",
                "type": "string"
              },
              "updatedAt": {
                "title": "Updatedat",
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "createdAt",
              "updatedAt"
            ]
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_parameters": {
            "title": "WriteProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "edit": {
                "title": "Edit",
                "description": "When enabled the profile must exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "only_edit_fields": {
                "title": "Only Edit Fields",
                "description": "List of attributes to use for the edit operation e.g. ['tags', 'metadatas']",
                "field_type": "Other",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "only_edit_fields"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": ".id",
            "updated_at": ".updatedAt | $fromtimestamp(true)",
            "created_at": ".createdAt | $fromtimestamp(true)",
            "info": {
              "full_name": "?.name",
              "first_name": "?.name | $split('') | .[0]",
              "last_name": "?.name | $split('') | $length  != 1 ?? ?.name | $split('') | $slice(1) | $join(' ') : null",
              "email": "?.emails[0] >> null",
              "phone": "?.phones[0]?.value",
              "location": {
                "text": "?.location",
                "lat": null,
                "lng": null
              },
              "urls": "?.links >> [] | $map({url: ., type: 'from lever'})"
            },
            "text_language": null,
            "text": "?.headline",
            "experiences": "?.profile?.parsedData?.positions >> [] | $map({company: ?.org, title: ?.title, description: ?.summary, location: { text: ?.location, lat: null, lng: null }, date_start: .start.year and .start.month ?? $concat(.start.year, '-', .start.month | $string | $sub('^\\d$', '0\\g<0>'), '-01') : null, date_end: .end.year and .end.month ?? $concat(.end.year, '-', .end.month | $string | $sub('^\\d$', '0\\g<0>'), '-01') : null, skills: []})",
            "educations": "?.profile?.parsedData?.schools >> [] | $map({school: ?.org, title: ?.degree, description: ?.summary, location: { text: ?.location, lat: null, lng: null }, date_start: .start.year and .start.month ?? $concat(.start.year, '-', .start.month | $string | $sub('^\\d$', '0\\g<0>'), '-01') : null, date_end: .end.year and .end.month ?? $concat(.end.year, '-', .end.month | $string | $sub('^\\d$', '0\\g<0>'), '-01') : null, skills: []})",
            "attachments": "?.profile?.file != null ?? .profile.file | [{type: original, file_name: .name, original_file_name: .name, extension: .ext, public_url: .downloadUrl, file_size: .size, created_at: .uploadedAt | $fromtimestamp(true) }]: []",
            "skills": [],
            "tags": []
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Lever\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Lever.pull_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['auth_domain', 'client_domain', 'client_id', 'client_secret', 'authorization_code', 'limit']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'edit', 'only_edit_fields']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Lever.pull_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "LinkedIn",
      "type": "JOBBOARD",
      "subtype": "linkedin",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/linkedin/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Lucca",
      "type": "HCM",
      "subtype": "lucca",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/lucca/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Mailchimp",
      "type": "AUTOMATION",
      "subtype": "mailchimp",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/mailchimp/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Meteojob",
      "type": "JOBBOARD",
      "subtype": "meteojob",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/meteojob/logo.jpeg",
      "actions": [
        {
          "name": "catch_profile",
          "action_type": "inbound",
          "action_parameters": {
            "title": "TriggerViewActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "Meteojob Candidate",
          "origin_parameters": {
            "title": "ReadProfilesParameters",
            "type": "object",
            "properties": {
              "profile": {
                "title": "Profile",
                "description": "Event object recieved from the Webhook",
                "field_type": "Other",
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_parameters": {
            "title": "WriteProfileParsingParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Other",
                "type": "string"
              },
              "only_insert": {
                "title": "Only Insert",
                "description": "When enabled the profile is written only if it doesn't exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfileParsing",
            "type": "object",
            "properties": {
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "resume": {
                "$ref": "#/definitions/ResumeToParse"
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              }
            },
            "required": [
              "created_at",
              "resume",
              "tags",
              "metadatas"
            ],
            "definitions": {
              "ResumeToParse": {
                "title": "ResumeToParse",
                "type": "object",
                "properties": {
                  "raw": {
                    "title": "Raw",
                    "type": "string",
                    "format": "binary"
                  },
                  "content_type": {
                    "title": "Content Type",
                    "type": "string"
                  }
                },
                "required": [
                  "raw",
                  "content_type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": null,
            "resume": {
              "raw": ".cv",
              "content_type": ".content_type"
            },
            "tags": [
              {
                "name": "job-number",
                "value": "?.jobkey != null ?? .jobkey  | $slice(0,10) : null"
              },
              {
                "name": "first_name",
                "value": "?.firstName"
              },
              {
                "name": "last_name",
                "value": "?.lastName"
              },
              {
                "name": "phone",
                "value": "?.phone"
              },
              {
                "name": "email",
                "value": "?.email"
              },
              {
                "name": "coverText",
                "value": "?.coverText"
              },
              {
                "name": "profile-country",
                "value": "?.profilecountry"
              },
              {
                "name": "profile-regions",
                "value": "?.profileregions"
              },
              {
                "name": "profile-domains",
                "value": "?.profiledomains"
              },
              {
                "name": "job-lien_annonce_site_carriere",
                "value": "?.joblien_annonce_site_carriere"
              },
              {
                "name": "statistic-source",
                "value": "?.statisticsource"
              },
              {
                "name": "statistic-jbsource",
                "value": "?.statisticjbsource"
              }
            ],
            "metadatas": [],
            "created_at": null
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Meteojob\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Meteojob.catch_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Meteojob.model.action_by_name(\"catch_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Meteojob.catch_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['profile']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'only_insert']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Meteojob.catch_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Microsoft Dynamics",
      "type": "HCM",
      "subtype": "microsoftdynamics",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/microsoftdynamics/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Monster",
      "type": "JOBBOARD",
      "subtype": "monster",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/monster/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Mysolution",
      "type": "ATS",
      "subtype": "mysolution",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/mysolution/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Neuvoo",
      "type": "JOBBOARD",
      "subtype": "neuvoo",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/neuvoo/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Occupop",
      "type": "ATS",
      "subtype": "occupop",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/occupop/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Onlyfy",
      "type": "ATS",
      "subtype": "onlyfy",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/onlyfy/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Optioncarriere",
      "type": "JOBBOARD",
      "subtype": "optioncarriere",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/optioncarriere/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Oracle",
      "type": "HCM",
      "subtype": "oracle",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/oracle/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Oracle Fusion - Recruiting Cloud",
      "type": "ATS",
      "subtype": "oraclefusion",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/oraclefusion/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Oracle Recruiting Cloud",
      "type": "ATS",
      "subtype": "oraclerecruiting",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/oraclerecruiting/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Oracle Taleo",
      "type": "ATS",
      "subtype": "oracletaleo",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/oracletaleo/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "OTYS",
      "type": "ATS",
      "subtype": "otys",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/otys/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "P&I Loga",
      "type": "ATS",
      "subtype": "piloga",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/piloga/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Personio",
      "type": "HCM",
      "subtype": "personio",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/personio/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Personio Recruiting",
      "type": "ATS",
      "subtype": "personiorecruiting",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/personiorecruiting/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Pinpoint",
      "type": "ATS",
      "subtype": "pinpoint",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/pinpoint/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Pole Emploi",
      "type": "JOBBOARD",
      "subtype": "poleemploi",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/poleemploi/logo.jpg",
      "actions": [
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "Pole Emploi Jobs",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client Id",
                "description": "Client ID used to access Pole Emploi API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client Secret used to access Pole Emploi API",
                "field_type": "Auth",
                "type": "string"
              },
              "range": {
                "title": "Range",
                "description": "Pagination of data. The range of results is limited to 150.",
                "field_type": "Query Param",
                "type": "string"
              },
              "sort": {
                "title": "Sort",
                "description": "Sorting of data",
                "field_type": "Query Param",
                "type": "integer"
              },
              "domaine": {
                "title": "Domaine",
                "description": "Professional field codeA GET request for the list of accepted choices from the Offres d'emploi API to this endpoint :https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//domaines",
                "field_type": "Query Param",
                "type": "string"
              },
              "codeROME": {
                "title": "Coderome",
                "description": "ROME code of the professionA GET request for the list of accepted choices from the Offres d'emploi API to this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//metiers",
                "field_type": "Query Param",
                "type": "string"
              },
              "theme": {
                "title": "Theme",
                "description": "Theme of the professionA GET request for the list of accepted choices from the Offres d'emploi API to this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//themes",
                "field_type": "Query Param",
                "type": "string"
              },
              "appellation": {
                "title": "Appellation",
                "description": "Code of the appellationA GET request for the list of accepted choices from the Offres d'emploi API to this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//appellations",
                "field_type": "Query Param",
                "type": "string"
              },
              "secteurActivite": {
                "title": "Secteuractivite",
                "description": "NAF codes for sectors of activity. It is possible to specify two NAF codes by separating them with a comma in the character string.Example : 01,02A GET request for the list of accepted choices from the Offres d'emploi API to this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//secteursActivites",
                "field_type": "Query Param",
                "type": "string"
              },
              "experience": {
                "description": "Level of experience required\nPossible values:\n1 -> Less than 1 year of experience\n2 -> From 1 to 3 years of experience\n3 -> More than 3 years of experience",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/Experience"
                  }
                ]
              },
              "typeContrat": {
                "title": "Typecontrat",
                "description": "Contract type codeExample : CDI,CDDA GET request for the list of accepted choices from the Offres d'emploi API to this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//typesContrats",
                "field_type": "Query Param",
                "type": "string"
              },
              "natureContrat": {
                "title": "Naturecontrat",
                "description": "Code of the nature of contractA GET request for the list of accepted choices from the Offres d'emploi API to this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//naturesContrats",
                "field_type": "Query Param",
                "type": "string"
              },
              "origineOffre": {
                "description": "Origin of the offer\nPossible values:\n1 -> Job center\n2 -> Partner",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/OfferOriginTag"
                  }
                ]
              },
              "qualification": {
                "description": "Qualification Code\nPossible values:\n0 -> Non-executive\n9 -> Executive",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/Qualification"
                  }
                ]
              },
              "tempsPlein": {
                "title": "Tempsplein",
                "description": "Promote the use of the WeeklyDuration filter\nPossible values:\nfalse -> Part-time\ntrue -> Full time\nIf the parameter is not filled, then all the offers are returned",
                "field_type": "Query Param",
                "type": "boolean"
              },
              "commune": {
                "title": "Commune",
                "description": "INSEE code of the communeA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//communes",
                "field_type": "Query Param",
                "type": "string"
              },
              "distance": {
                "title": "Distance",
                "description": "Kilometric distance of the search radius\nDefault value: 10Note: to obtain only the offers of a specific commune, then you must fill in the parameter 'distance=0'.",
                "field_type": "Query Param",
                "type": "integer"
              },
              "departement": {
                "title": "Departement",
                "description": "INSEE code of the departmentA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//departements",
                "field_type": "Query Param",
                "type": "string"
              },
              "inclureLimitrophes": {
                "title": "Inclurelimitrophes",
                "description": "Include bordering departments in the search",
                "field_type": "Query Param",
                "type": "boolean"
              },
              "region": {
                "title": "Region",
                "description": "Code of the region of the offerA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//regions",
                "field_type": "Query Param",
                "type": "string"
              },
              "paysContinent": {
                "title": "Payscontinent",
                "description": "Code of the country or continent of the offerA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//paysAND https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//continents",
                "field_type": "Query Param",
                "type": "string"
              },
              "niveauFormation": {
                "title": "Niveauformation",
                "description": "Level of education requiredA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//niveauxFormations",
                "field_type": "Query Param",
                "type": "string"
              },
              "permis": {
                "title": "Permis",
                "description": "Code of the requested licenseA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel//permis",
                "field_type": "Query Param",
                "type": "string"
              },
              "motsCles": {
                "title": "Motscles",
                "description": "Search by keyword\n\nEach keyword (or expression) is at least 2 characters long and must\nbe separated by a comma.\nThe search on several keywords is processed via the logical operator \"AND\".\nThe keyword search can be used to search on :\n\n- The title of the offer (title field in the search return)\n- The ROME code (romeCode field in the search return)\n- The ROME label (field romeLibelle in return for the search)\n- The competences label (field competences.libelle in return of the search)\n- The wording of the training fields (field formations.domaineLibelle in\nreturn of the research)\n- The wording of the permits (field permits.label in return of the search)\n- The language label (field languages.label in return of the search)\n- The offer description if found in the offer title and/or the ROME label\n(description field in the search return)\n\nAllowed characters: [aA-zZ]+[0-9]+[space]+[@#$%^&+./-\"\"]",
                "field_type": "Query Param",
                "type": "string"
              },
              "salaireMin": {
                "title": "Salairemin",
                "description": "Minimum wage, expressed in Euro.If this data is filled in, the code of the type of minimum wage is mandatory.",
                "field_type": "Query Param",
                "type": "number"
              },
              "periodeSalaire": {
                "description": "Period for the calculation of the minimum wage.\nIf this data is filled in, the minimum wage is mandatory.\nPossible values:\nM -> Monthly\nA -> Annual\nH -> Hourly\nC -> Fee",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/SalaryPeriod"
                  }
                ]
              },
              "accesTravailleurHandicape": {
                "title": "Accestravailleurhandicape",
                "description": "Allows you to search for offers for which the employer is handi friendly",
                "field_type": "Query Param",
                "type": "boolean"
              },
              "offresMRS": {
                "title": "Offresmrs",
                "description": " Allows you to search for jobs that offer the simulation recruitment method",
                "field_type": "Query Param",
                "type": "boolean"
              },
              "grandDomaine": {
                "description": "Code of the major area of the offer",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/IndustryDomain"
                  }
                ]
              },
              "experienceExige": {
                "description": "Filter offers by experience level.",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExperienceRequirement"
                  }
                ]
              },
              "publieeDepuis": {
                "description": "Maximum number of days since the publication of the offer\nPossible values: 1, 3, 7, 14, 31",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/PublishedSince"
                  }
                ]
              },
              "minCreationDate": {
                "title": "Mincreationdate",
                "description": "Minimum offer creation date.\nIf this data is filled in, the maximum offer creation date is mandatory.\nISO-8601 standard (YYYY-MM-DDTHH:MM:SSZ)",
                "field_type": "Query Param",
                "type": "string"
              },
              "maxCreationDate": {
                "title": "Maxcreationdate",
                "description": "Maximum offer creation date.\nIf this data is filled in, the minimum offer creation date is mandatory.\nISO-8601 standard (YYYY-MM-DDTHH:MM:SSZ)",
                "field_type": "Query Param",
                "type": "string"
              },
              "partenaires": {
                "title": "Partenaires",
                "description": " This filter allows you to enter your partner code in order to include or exclude your offers from the results according to the selectionmade in the PartnerSelection mode filter\nIt is possible to enter several codes (separator ','). ",
                "field_type": "Query Param",
                "type": "string"
              },
              "modeSelectionPartenaires": {
                "description": "Selection mode of the partner offers.\n\nThis filter works with the partner criterion and is dependent on the originOffer\ncriterion. Possible values with the results obtained according to the two other filters:\n\n- INCLUS(INCLUDED)\noriginOffer empty : Returns the PE offers and the Partners listed in the Partners\ncriterion\noriginOffer at 2 : Only the offers of the Partners listed in the Partners\ncriterion\n- EXCLU(EXCLUDED)\noriginOffer empty : Return the offers of PE and Partners not listed in the Partners\ncriterion\noriginOffer at 2 : Only the offers of the Partners not listed in the Partners\ncriterion\nNote: In all cases, if originOffer = 1, then only the Pole Emploi offers\nwill be returned",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/PartnerSelectionMode"
                  }
                ]
              },
              "dureeHebdo": {
                "description": "Filtre les offres selon la dur\u00e9e hebdomadaire.\nValeurs possibles :\n0 -> Non pr\u00e9cis\u00e9\n1 -> Temps plein\n2 -> Temps partiel",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/WeeklyDuration"
                  }
                ]
              },
              "dureeHebdoMin": {
                "title": "Dureehebdomin",
                "description": "Minimum weekly duration of the offer\nThe value must be in HHMM format, for example : 8h => 800 ; 24h30 => 2430",
                "field_type": "Query Param",
                "type": "integer"
              },
              "dureeHebdoMax": {
                "title": "Dureehebdomax",
                "description": "Maximum weekly duration of the offer\nThe value must be in HHMM format, for example: 8h => 800; 24h30 => 2430",
                "field_type": "Query Param",
                "type": "integer"
              },
              "dureeContratMin": {
                "title": "Dureecontratmin",
                "description": "Minimum duration of the sought contract.\nThe search is done in months (ex: 0.5 for 15 days, 1.0 for 1 month,2.0 for 2 months).\nPositive decimal (Decimal separator: '.')",
                "field_type": "Query Param",
                "type": "number"
              },
              "dureeContratMax": {
                "title": "Dureecontratmax",
                "description": "Maximum duration of the sought contract.\nThe search is made in months (ex: 0.5 for 15 days, 1.0 for 1 month,2.0 for 2 months).\nPositive decimal (Decimal separator: '.')",
                "field_type": "Query Param",
                "type": "number"
              },
              "offresManqueCandidats": {
                "title": "Offresmanquecandidats",
                "description": "Filters offers older than 15 days, with less than 4 applications (of which P\u00f4le emploi is informed)\nfalse -> Offers not concerned\ntrue -> Offers with few candidates",
                "field_type": "Query Param",
                "type": "boolean"
              },
              "entreprisesAdaptees": {
                "title": "Entreprisesadaptees",
                "description": "Filter the offers where the adapted company allows a disabled worker to exercise a professional activity in  conditions adapted to his capacities\nfalse -> Offers not concerned\ntrue -> Offers from adapted companies",
                "field_type": "Query Param",
                "type": "boolean"
              }
            },
            "required": [
              "client_id",
              "client_secret"
            ],
            "additionalProperties": false,
            "definitions": {
              "Experience": {
                "title": "Experience",
                "description": "An enumeration.",
                "enum": [
                  "1",
                  "2",
                  "3"
                ],
                "type": "string"
              },
              "OfferOriginTag": {
                "title": "OfferOriginTag",
                "description": "An enumeration.",
                "enum": [
                  1,
                  2
                ],
                "type": "integer"
              },
              "Qualification": {
                "title": "Qualification",
                "description": "An enumeration.",
                "enum": [
                  0,
                  9
                ],
                "type": "integer"
              },
              "SalaryPeriod": {
                "title": "SalaryPeriod",
                "description": "An enumeration.",
                "enum": [
                  "M",
                  "A",
                  "H",
                  "C"
                ],
                "type": "string"
              },
              "IndustryDomain": {
                "title": "IndustryDomain",
                "description": "An enumeration.",
                "enum": [
                  "A",
                  "B",
                  "C",
                  "C15",
                  "D",
                  "E",
                  "F",
                  "G",
                  "H",
                  "I",
                  "J",
                  "K",
                  "L",
                  "L14",
                  "M",
                  "M13",
                  "M14",
                  "M15",
                  "M16",
                  "M17",
                  "M18",
                  "N"
                ],
                "type": "string"
              },
              "ExperienceRequirement": {
                "title": "ExperienceRequirement",
                "description": "An enumeration.",
                "enum": [
                  "D",
                  "S",
                  "E"
                ],
                "type": "string"
              },
              "PublishedSince": {
                "title": "PublishedSince",
                "description": "An enumeration.",
                "enum": [
                  1,
                  3,
                  7,
                  14,
                  31
                ],
                "type": "integer"
              },
              "PartnerSelectionMode": {
                "title": "PartnerSelectionMode",
                "description": "An enumeration.",
                "enum": [
                  "INCLUS",
                  "EXCLU"
                ],
                "type": "string"
              },
              "WeeklyDuration": {
                "title": "WeeklyDuration",
                "description": "An enumeration.",
                "enum": [
                  "0",
                  "1",
                  "2"
                ],
                "type": "string"
              }
            }
          },
          "origin_data_schema": {
            "title": "PoleEmploiJobOffer",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "type": "integer"
              },
              "intitule": {
                "title": "Intitule",
                "type": "string"
              },
              "description": {
                "title": "Description",
                "type": "string"
              },
              "dateCreation": {
                "title": "Datecreation",
                "type": "string"
              },
              "dateActualisation": {
                "title": "Dateactualisation",
                "type": "string"
              },
              "lieuTravail": {
                "$ref": "#/definitions/JobLocation"
              },
              "romeCode": {
                "title": "Romecode",
                "description": "ROME code of the professionA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel/metiers",
                "type": "string"
              },
              "romeLibelle": {
                "title": "Romelibelle",
                "type": "string"
              },
              "appellationLibelle": {
                "title": "Appellationlibelle",
                "description": "Code of the appellationA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel/appellations",
                "type": "string"
              },
              "entreprise": {
                "$ref": "#/definitions/Entreprise"
              },
              "typeContrat": {
                "title": "Typecontrat",
                "description": "Contract type codeA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel/typesContrats",
                "type": "string"
              },
              "typeContratLibelle": {
                "title": "Typecontratlibelle",
                "description": "Contract type labelExample : CDI,CDDA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel/typesContrats",
                "type": "string"
              },
              "natureContrat": {
                "title": "Naturecontrat",
                "description": "Code of the nature of contractA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel/naturesContrats",
                "type": "string"
              },
              "origineOffre": {
                "$ref": "#/definitions/OfferOrigin"
              },
              "offresManqueCandidats": {
                "title": "Offresmanquecandidats",
                "type": "boolean"
              },
              "experienceExige": {
                "$ref": "#/definitions/ExperienceRequirement"
              },
              "experienceLibelle": {
                "title": "Experiencelibelle",
                "type": "string"
              },
              "experienceCommentaire": {
                "title": "Experiencecommentaire",
                "type": "string"
              },
              "formations": {
                "title": "Formations",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Formation"
                }
              },
              "langues": {
                "title": "Langues",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Langue"
                }
              },
              "permis": {
                "title": "Permis",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Permis"
                }
              },
              "outilsBureautiques": {
                "title": "Outilsbureautiques",
                "type": "string"
              },
              "competences": {
                "title": "Competences",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Competence"
                }
              },
              "salaire": {
                "$ref": "#/definitions/Salaire"
              },
              "dureeTravailLibelle": {
                "title": "Dureetravaillibelle",
                "type": "string"
              },
              "dureeTravailLibelleConverti": {
                "title": "Dureetravaillibelleconverti",
                "type": "string"
              },
              "complementExercice": {
                "title": "Complementexercice",
                "type": "string"
              },
              "conditionExercice": {
                "title": "Conditionexercice",
                "type": "string"
              },
              "alternance": {
                "title": "Alternance",
                "type": "boolean"
              },
              "contact": {
                "$ref": "#/definitions/Contact"
              },
              "agence": {
                "$ref": "#/definitions/Agence"
              },
              "nombrePostes": {
                "title": "Nombrepostes",
                "type": "integer"
              },
              "accessibleTH": {
                "title": "Accessibleth",
                "type": "boolean"
              },
              "deplacementCode": {
                "title": "Deplacementcode",
                "type": "string"
              },
              "deplacementLibelle": {
                "title": "Deplacementlibelle",
                "type": "string"
              },
              "qualificationCode": {
                "$ref": "#/definitions/QualificationCode"
              },
              "qualificationLibelle": {
                "$ref": "#/definitions/QualificationLibelle"
              },
              "secteurActivite": {
                "title": "Secteuractivite",
                "description": "NAF codes for sectors of activity. It is possible to specify two NAF codes by separating them with a comma in the character string.Example : 01,02A GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel/secteursActivites",
                "type": "string"
              },
              "secteurActiviteLibelle": {
                "title": "Secteuractivitelibelle",
                "description": "Sector of activitylabelA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel/secteursActivites",
                "type": "string"
              },
              "qualitesProfessionnelles": {
                "title": "Qualitesprofessionnelles",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/QualitePro"
                }
              }
            },
            "required": [
              "id",
              "intitule",
              "description"
            ],
            "definitions": {
              "JobLocation": {
                "title": "JobLocation",
                "type": "object",
                "properties": {
                  "libelle": {
                    "title": "Libelle",
                    "type": "string"
                  },
                  "latitude": {
                    "title": "Latitude",
                    "type": "number"
                  },
                  "longitude": {
                    "title": "Longitude",
                    "type": "number"
                  },
                  "codepostal": {
                    "title": "Codepostal",
                    "type": "string"
                  },
                  "commune": {
                    "title": "Commune",
                    "description": "INSEE code of the communeA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel/communes",
                    "type": "string"
                  }
                },
                "required": [
                  "libelle",
                  "latitude",
                  "longitude",
                  "codepostal",
                  "commune"
                ]
              },
              "Entreprise": {
                "title": "Entreprise",
                "type": "object",
                "properties": {
                  "nom": {
                    "title": "Nom",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  },
                  "entrepriseAdaptee": {
                    "title": "Entrepriseadaptee",
                    "type": "boolean"
                  }
                },
                "required": [
                  "entrepriseAdaptee"
                ]
              },
              "OfferOriginTag": {
                "title": "OfferOriginTag",
                "description": "An enumeration.",
                "enum": [
                  1,
                  2
                ],
                "type": "integer"
              },
              "Partner": {
                "title": "Partner",
                "type": "object",
                "properties": {
                  "nom": {
                    "title": "Nom",
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "type": "string"
                  }
                },
                "required": [
                  "nom",
                  "url",
                  "logo"
                ]
              },
              "OfferOrigin": {
                "title": "OfferOrigin",
                "type": "object",
                "properties": {
                  "origine": {
                    "$ref": "#/definitions/OfferOriginTag"
                  },
                  "urlOrigine": {
                    "title": "Urlorigine",
                    "type": "string"
                  },
                  "partenaires": {
                    "title": "Partenaires",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Partner"
                    }
                  }
                },
                "required": [
                  "origine",
                  "partenaires"
                ]
              },
              "ExperienceRequirement": {
                "title": "ExperienceRequirement",
                "description": "An enumeration.",
                "enum": [
                  "D",
                  "S",
                  "E"
                ],
                "type": "string"
              },
              "Exigence": {
                "title": "Exigence",
                "description": "An enumeration.",
                "enum": [
                  "E",
                  "S"
                ]
              },
              "Formation": {
                "title": "Formation",
                "type": "object",
                "properties": {
                  "domaineLibelle": {
                    "title": "Domainelibelle",
                    "type": "string"
                  },
                  "niveauLibelle": {
                    "title": "Niveaulibelle",
                    "description": "Label of the level of the education requiredA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel/referentiel/niveauxFormations",
                    "type": "string"
                  },
                  "commentaire": {
                    "title": "Commentaire",
                    "type": "string"
                  },
                  "exigence": {
                    "$ref": "#/definitions/Exigence"
                  }
                },
                "required": [
                  "domaineLibelle",
                  "niveauLibelle",
                  "commentaire",
                  "exigence"
                ]
              },
              "Langue": {
                "title": "Langue",
                "type": "object",
                "properties": {
                  "libelle": {
                    "title": "Libelle",
                    "description": "Language labelA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel/referentiel/langues",
                    "type": "string"
                  },
                  "exigence": {
                    "$ref": "#/definitions/Exigence"
                  }
                },
                "required": [
                  "libelle"
                ]
              },
              "Permis": {
                "title": "Permis",
                "type": "object",
                "properties": {
                  "libelle": {
                    "title": "Libelle",
                    "description": "requested licenseA GET request for the list of accepted choices from the Offres d'emploi APIto this endpoint : https://api.emploi-store.fr/partenaire/offresdemploi/v2/referentiel/referentiel/permis",
                    "type": "string"
                  },
                  "exigence": {
                    "$ref": "#/definitions/Exigence"
                  }
                },
                "required": [
                  "libelle"
                ]
              },
              "Competence": {
                "title": "Competence",
                "type": "object",
                "properties": {
                  "code": {
                    "title": "Code",
                    "type": "string"
                  },
                  "libelle": {
                    "title": "Libelle",
                    "type": "string"
                  },
                  "exigence": {
                    "$ref": "#/definitions/Exigence"
                  }
                },
                "required": [
                  "code",
                  "libelle"
                ]
              },
              "Salaire": {
                "title": "Salaire",
                "type": "object",
                "properties": {
                  "libelle": {
                    "title": "Libelle",
                    "type": "string"
                  },
                  "commentaire": {
                    "title": "Commentaire",
                    "type": "string"
                  },
                  "complement1": {
                    "title": "Complement1",
                    "type": "string"
                  },
                  "complement2": {
                    "title": "Complement2",
                    "type": "string"
                  }
                }
              },
              "Contact": {
                "title": "Contact",
                "type": "object",
                "properties": {
                  "nom": {
                    "title": "Nom",
                    "type": "string"
                  },
                  "coordonnees1": {
                    "title": "Coordonnees1",
                    "type": "string"
                  },
                  "coordonnees2": {
                    "title": "Coordonnees2",
                    "type": "string"
                  },
                  "coordonnees3": {
                    "title": "Coordonnees3",
                    "type": "string"
                  },
                  "telephone": {
                    "title": "Telephone",
                    "type": "string"
                  },
                  "courriel": {
                    "title": "Courriel",
                    "type": "string"
                  },
                  "commentaire": {
                    "title": "Commentaire",
                    "type": "string"
                  },
                  "urlRecruteur": {
                    "title": "Urlrecruteur",
                    "type": "string"
                  },
                  "urlPostulation": {
                    "title": "Urlpostulation",
                    "type": "string"
                  }
                }
              },
              "Agence": {
                "title": "Agence",
                "type": "object",
                "properties": {
                  "telephone": {
                    "title": "Telephone",
                    "type": "string"
                  },
                  "courriel": {
                    "title": "Courriel",
                    "type": "string"
                  }
                }
              },
              "QualificationCode": {
                "title": "QualificationCode",
                "description": "An enumeration.",
                "enum": [
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "9"
                ],
                "type": "string"
              },
              "QualificationLibelle": {
                "title": "QualificationLibelle",
                "description": "An enumeration.",
                "enum": [
                  "Man\u0153uvre",
                  "Ouvrier sp\u00e9cialis\u00e9",
                  "Ouvrier qualifi\u00e9 (P1, P2)",
                  "Ouvrier qualifi\u00e9 (P3, P4, OHQ)",
                  "Employ\u00e9 non qualifi\u00e9",
                  "Employ\u00e9 qualifi\u00e9",
                  "Technicien",
                  "Agent de ma\u00eetrise",
                  "Cadre"
                ],
                "type": "string"
              },
              "QualitePro": {
                "title": "QualitePro",
                "type": "object",
                "properties": {
                  "libelle": {
                    "title": "Libelle",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "type": "string"
                  }
                }
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": "?.intitule",
            "reference": "?.id",
            "created_at": "?.dateCreation",
            "updated_at": "?.dateActualisation",
            "location": {
              "lat": "?.lieuTravail?.latitude!= null ?? .lieuTravail.latitude | $float : null",
              "lng": ".lieuTravail.longitude != null ?? .lieuTravail.longitude | $float : null",
              "text": ".lieuTravail ?? '' : $concat(.lieuTravail?.libelle >> '', ' ', .location?.codePostal >> '') | $strip"
            },
            "url": null,
            "summary": "?.description",
            "sections": [
              {
                "name": "pole_emploi_company_description",
                "title": "'Company Description'",
                "description": "?.entreprise?.description"
              }
            ],
            "tags": [
              {
                "name": "pole_emploi_romeCode",
                "value": "?.romeCode"
              },
              {
                "name": "pole_emploi_romeLibelle",
                "value": "?.romeLibelle"
              },
              {
                "name": "pole_emploi_appellationLibelle",
                "value": "?.appellationLibelle"
              },
              {
                "name": "pole_emploi_contractNature",
                "value": "?.natureContrat"
              },
              {
                "name": "pole_emploi_contractType",
                "value": "?.typeContratLibelle"
              },
              {
                "name": "pole_emploi_experience",
                "value": "?.experienceLibelle"
              },
              {
                "name": "pole_emploi_salary",
                "value": "?.salaire?.libelle"
              },
              {
                "name": "pole_emploi_working_hours",
                "value": "?.dureeTravailLibelle"
              },
              {
                "name": "pole_emploi_qualification",
                "value": "?.qualificationLibelle"
              },
              {
                "name": "pole_emploi_secteurActivite",
                "value": "?.secteurActiviteLibelle"
              },
              {
                "name": "pole_emploi_contact-name",
                "value": "?.contact?.nom"
              },
              {
                "name": "pole_emploi_contact-email",
                "value": "?.contact?.courriel"
              },
              {
                "name": "pole_emploi_contact-phone",
                "value": "?.contact?.telephone"
              }
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import PoleEmploi\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return PoleEmploi.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['client_id', 'client_secret', 'range', 'sort', 'domaine', 'codeROME', 'theme', 'appellation', 'secteurActivite', 'experience', 'typeContrat', 'natureContrat', 'origineOffre', 'qualification', 'tempsPlein', 'commune', 'distance', 'departement', 'inclureLimitrophes', 'region', 'paysContinent', 'niveauFormation', 'permis', 'motsCles', 'salaireMin', 'periodeSalaire', 'accesTravailleurHandicape', 'offresMRS', 'grandDomaine', 'experienceExige', 'publieeDepuis', 'minCreationDate', 'maxCreationDate', 'partenaires', 'modeSelectionPartenaires', 'dureeHebdo', 'dureeHebdoMin', 'dureeHebdoMax', 'dureeContratMin', 'dureeContratMax', 'offresManqueCandidats', 'entreprisesAdaptees']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return PoleEmploi.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Polymer",
      "type": "ATS",
      "subtype": "polymer",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/polymer/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Radancy",
      "type": "HCM",
      "subtype": "radancy",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/radancy/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "ReachMee",
      "type": "ATS",
      "subtype": "reachmee",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/reachmee/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "RECRU",
      "type": "ATS",
      "subtype": "recruhr",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/recruhr/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Recruitee",
      "type": "ATS",
      "subtype": "recruitee",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/recruitee/logo.png",
      "actions": [
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "WriteProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "Recruitee Profiles",
          "target_parameters": {
            "title": "WriteProfilesParameters",
            "type": "object",
            "properties": {
              "company_id": {
                "title": "Company Id",
                "description": "Company ID. A company subdomain can also be used.",
                "field_type": "Auth",
                "type": "string"
              },
              "api_token": {
                "title": "Api Token",
                "description": "Personal API Token allowing access to the Recruitee API from external services.",
                "field_type": "Auth",
                "type": "string"
              },
              "recruitee_endpoint": {
                "description": "Specifies which endpoint to be used, satging or production.",
                "field_type": "Other",
                "allOf": [
                  {
                    "$ref": "#/definitions/Endpoint"
                  }
                ]
              },
              "offer_ids": {
                "title": "Offer Ids",
                "description": "Offers to which the candidate will be assigned with default stage. You can also pass one ID as offer_id",
                "field_type": "Query Param",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "required": [
              "company_id",
              "api_token",
              "recruitee_endpoint"
            ],
            "additionalProperties": false,
            "definitions": {
              "Endpoint": {
                "title": "Endpoint",
                "description": "An enumeration.",
                "enum": [
                  "STAGING ENDPOINT",
                  "PRODUCTION ENDPOINT"
                ],
                "type": "string"
              }
            }
          },
          "target_data_schema": {
            "title": "RecruiteeProfile",
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              },
              "remote_cv_url": {
                "title": "Remote Cv Url",
                "type": "string"
              },
              "emails": {
                "title": "Emails",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "phones": {
                "title": "Phones",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "social_links": {
                "title": "Social Links",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "links": {
                "title": "Links",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "cover_letter": {
                "title": "Cover Letter",
                "type": "string"
              },
              "sources": {
                "title": "Sources",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "name"
            ]
          },
          "jsonmap": {
            "name": ".info.full_name",
            "remote_cv_url": ".attachments | $map(?.type == 'resume' ?? .) | .[0].public_url",
            "emails": [
              ".info.email"
            ],
            "phones": [
              ".info.phone"
            ],
            "social_links": ".info.urls | $map(?.type != 'from_resume' ?? .url)",
            "links": ".info.urls | $map(?.type == 'from_resume' ?? .url)",
            "cover_letter": "''",
            "sources": [
              ".source.name"
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Recruitee\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Recruitee.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Recruitee.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Recruitee.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['company_id', 'api_token', 'recruitee_endpoint', 'offer_ids']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Recruitee.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "Recruitee Jobs",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "company_id": {
                "title": "Company Id",
                "description": "Company ID. A company subdomain can also be used.",
                "field_type": "Auth",
                "type": "string"
              },
              "api_token": {
                "title": "Api Token",
                "description": "Personal API Token allowing access to the Recruitee API from external services.",
                "field_type": "Auth",
                "type": "string"
              },
              "recruitee_endpoint": {
                "description": "Specifies which endpoint to be used, satging or production.",
                "field_type": "Other",
                "allOf": [
                  {
                    "$ref": "#/definitions/Endpoint"
                  }
                ]
              },
              "kind": {
                "title": "Kind",
                "description": "If no kind is given, returns all job offers, if kind is job then lists only jobs, if scope is talent_pool, lists only talent pools",
                "field_type": "Query Param",
                "type": "string"
              },
              "scope": {
                "title": "Scope",
                "description": "If no scope is given list all job offers. archived returns only archived job offers, active returns published, internal and closed job offers, not_archived returns all but archived jobs",
                "field_type": "Query Param",
                "type": "string"
              },
              "view_mode": {
                "description": "default (default mode, includes most of offer details); brief (only offer\u2019s id, title, status and kind)",
                "default": "brief",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/View_mode"
                  }
                ]
              }
            },
            "required": [
              "company_id",
              "api_token",
              "recruitee_endpoint"
            ],
            "additionalProperties": false,
            "definitions": {
              "Endpoint": {
                "title": "Endpoint",
                "description": "An enumeration.",
                "enum": [
                  "STAGING ENDPOINT",
                  "PRODUCTION ENDPOINT"
                ],
                "type": "string"
              },
              "View_mode": {
                "title": "View_mode",
                "description": "An enumeration.",
                "enum": [
                  "default",
                  "brief"
                ],
                "type": "string"
              }
            }
          },
          "origin_data_schema": {
            "title": "RecruiteeJob",
            "type": "object",
            "properties": {
              "title": {
                "title": "Title",
                "type": "string"
              },
              "department": {
                "title": "Department",
                "type": "string"
              },
              "kind": {
                "$ref": "#/definitions/Kind"
              },
              "description": {
                "title": "Description",
                "type": "string"
              },
              "requirements": {
                "title": "Requirements",
                "type": "string"
              },
              "postal_code": {
                "title": "Postal Code",
                "type": "string"
              },
              "city": {
                "title": "City",
                "type": "string"
              },
              "state_code": {
                "title": "State Code",
                "type": "string"
              },
              "country_code": {
                "title": "Country Code",
                "type": "string"
              },
              "remote": {
                "title": "Remote",
                "default": false,
                "type": "boolean"
              }
            },
            "required": [
              "title",
              "description",
              "requirements",
              "postal_code",
              "city",
              "state_code",
              "country_code"
            ],
            "definitions": {
              "Kind": {
                "title": "Kind",
                "description": "An enumeration.",
                "enum": [
                  "job",
                  "talent_pool"
                ],
                "type": "string"
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": "?.title",
            "reference": "?.id | $string",
            "created_at": "?.created_at",
            "updated_at": "?.updated_at",
            "location": {
              "text": "?.location",
              "lat": null,
              "lng": null
            },
            "url": "?.url",
            "summary": "?.description",
            "sections": [
              {
                "name": "recruitee_job_requirements",
                "title": "'Job Requirements'",
                "description": "?.requirements"
              }
            ],
            "tags": [
              {
                "name": "recruitee_category",
                "value": "?.category"
              },
              {
                "name": "recruitee_department",
                "value": "?.department"
              },
              {
                "name": "recruitee_options_cv",
                "value": "?.options_cv"
              },
              {
                "name": "recruitee_options_cover_letter",
                "value": "?.options_cover_letter"
              },
              {
                "name": "recruitee_experience",
                "value": "?.experience"
              },
              {
                "name": "recruitee_education",
                "value": "?.education"
              },
              {
                "name": "recruitee_employment_type",
                "value": "?.employment_type"
              },
              {
                "name": "recruitee_remote_option",
                "value": "?.remote"
              },
              {
                "name": "recruitee_candidates_count",
                "value": "?.candidates_count"
              },
              {
                "name": "recruitee_disqualified_candidates_count",
                "value": "?.disqualified_candidates_count"
              },
              {
                "name": "recruitee_qualified_candidates_count",
                "value": "?.qualified_candidates_count"
              },
              {
                "name": "recruitee_hired_candidates_count",
                "value": "?.hired_candidates_count"
              }
            ],
            "ranges_float": [
              {
                "name": "'working hours'",
                "value_min": "?.min_hours",
                "value_max": "?.max_hours",
                "unit": "'Hours per week'"
              },
              {
                "name": "$concat('salary per ',?.salary.period)",
                "value_min": "?.salary.min",
                "value_max": "?.salary.max",
                "unit": "?.salary.currency"
              }
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Recruitee\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Recruitee.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['company_id', 'api_token', 'recruitee_endpoint', 'kind', 'scope', 'view_mode']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Recruitee.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_profile_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadProfilesActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "schedule",
          "origin": "Recruitee Profiles",
          "origin_parameters": {
            "title": "ReadProfilesParameters",
            "type": "object",
            "properties": {
              "company_id": {
                "title": "Company Id",
                "description": "Company ID. A company subdomain can also be used.",
                "field_type": "Auth",
                "type": "string"
              },
              "api_token": {
                "title": "Api Token",
                "description": "Personal API Token allowing access to the Recruitee API from external services.",
                "field_type": "Auth",
                "type": "string"
              },
              "recruitee_endpoint": {
                "description": "Specifies which endpoint to be used, satging or production.",
                "field_type": "Other",
                "allOf": [
                  {
                    "$ref": "#/definitions/Endpoint"
                  }
                ]
              },
              "limit": {
                "title": "Limit",
                "description": "Specifies the number of candidates to retrieve",
                "field_type": "Query Param",
                "type": "integer"
              },
              "offset": {
                "title": "Offset",
                "description": "Skip number of candidates from the begining, used for \u2018load more\u2019, offset for next page should be current offset + limit",
                "field_type": "Query Param",
                "type": "integer"
              },
              "created_after": {
                "title": "Created After",
                "description": "Show only candidates created after given date",
                "field_type": "Query Param",
                "type": "string"
              },
              "disqualified": {
                "title": "Disqualified",
                "description": "Show only disqualified candidates who are disqualified in at least one job (should be string \u2018true\u2019 or \u20181\u2019).",
                "field_type": "Query Param",
                "type": "boolean"
              },
              "qualified": {
                "title": "Qualified",
                "description": "Show only disqualified candidates who are qualified in at least one job (should be string \u2018true\u2019 or \u20181\u2019).",
                "field_type": "Query Param",
                "type": "boolean"
              },
              "ids": {
                "title": "Ids",
                "description": "List of IDs separated by comma, example: 234221,4211412,535432",
                "field_type": "Query Param",
                "type": "string"
              },
              "offer_id": {
                "title": "Offer Id",
                "description": "Filter by offer",
                "field_type": "Query Param",
                "type": "string"
              },
              "query": {
                "title": "Query",
                "description": "Search query for candidate\u2019s name or offer",
                "field_type": "Query Param",
                "type": "string"
              },
              "sort": {
                "description": "Sorting options: by_date, by_last_message",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/Sort"
                  }
                ]
              },
              "with_messages": {
                "title": "With Messages",
                "description": "Show only candidates with messages (should be string \u2018true\u2019 or \u20181\u2019)",
                "field_type": "Query Param",
                "type": "boolean"
              },
              "with_my_messages": {
                "title": "With My Messages",
                "description": "Show only candidates with messages that current admin sent (should be string \u2018true\u2019 or \u20181\u2019",
                "field_type": "Query Param",
                "type": "boolean"
              }
            },
            "required": [
              "company_id",
              "api_token",
              "recruitee_endpoint"
            ],
            "additionalProperties": false,
            "definitions": {
              "Endpoint": {
                "title": "Endpoint",
                "description": "An enumeration.",
                "enum": [
                  "STAGING ENDPOINT",
                  "PRODUCTION ENDPOINT"
                ],
                "type": "string"
              },
              "Sort": {
                "title": "Sort",
                "description": "An enumeration.",
                "enum": [
                  "by_date",
                  "by_last_message"
                ],
                "type": "string"
              }
            }
          },
          "origin_data_schema": {
            "title": "RecruiteeProfile",
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              },
              "remote_cv_url": {
                "title": "Remote Cv Url",
                "type": "string"
              },
              "emails": {
                "title": "Emails",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "phones": {
                "title": "Phones",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "social_links": {
                "title": "Social Links",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "links": {
                "title": "Links",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "cover_letter": {
                "title": "Cover Letter",
                "type": "string"
              },
              "sources": {
                "title": "Sources",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "name"
            ]
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_parameters": {
            "title": "WriteProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "edit": {
                "title": "Edit",
                "description": "When enabled the profile must exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "only_edit_fields": {
                "title": "Only Edit Fields",
                "description": "List of attributes to use for the edit operation e.g. ['tags', 'metadatas']",
                "field_type": "Other",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "only_edit_fields"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": "?.id | $string",
            "text": "?.description",
            "info": {
              "full_name": "?.name",
              "email": "?.emails[0]",
              "phone": "?.phones[0]",
              "urls": "$merge(.social_links || [], .links || []) | $map({url: ., type: 'from_resume'})"
            },
            "educations": ".fields | $map(.kind == 'education' ?? .values) | $map({school: .school, date_start: .start_date, date_end: .end_date, description: .description, title: .major})",
            "experiences": ".fields | $map(.kind == 'experience' ?? .values) | $map({company: .company, date_start: .start_date, date_end: .end_date, description: .description, title: .title, location: {text: .location, lat: null, lng: null}})",
            "attachments": "[{type: 'resume', public_url: ?.cv_original_url, filename: 'original_cv'}]",
            "source": "{name: ?.source}"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Recruitee\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Recruitee.pull_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['company_id', 'api_token', 'recruitee_endpoint', 'limit', 'offset', 'created_after', 'disqualified', 'qualified', 'ids', 'offer_id', 'query', 'sort', 'with_messages', 'with_my_messages']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'edit', 'only_edit_fields']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Recruitee.pull_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Recruiterflow",
      "type": "ATS",
      "subtype": "recruiterflow",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/recruiterflow/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Recruitive",
      "type": "ATS",
      "subtype": "recruitive",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/recruitive/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "rexx systems",
      "type": "ATS",
      "subtype": "rexx",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/rexx/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Sage HR",
      "type": "ATS",
      "subtype": "sagehr",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/sagehr/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Salesforce",
      "type": "CRM",
      "subtype": "salesforce",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/salesforce/logo.jpeg",
      "actions": [
        {
          "name": "pull_profile_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "schedule",
          "origin": "Salesforce Profiles",
          "origin_parameters": {
            "title": "ReadProfilesParameters",
            "type": "object",
            "properties": {
              "sf_username": {
                "title": "Sf Username",
                "description": "username used to access Salesforce API",
                "field_type": "Auth",
                "type": "string"
              },
              "sf_password": {
                "title": "Sf Password",
                "description": "password used to access Salesforce API",
                "field_type": "Auth",
                "type": "string"
              },
              "sf_security_token": {
                "title": "Sf Security Token",
                "description": "Security Token to access Salesforce API.See below for instructions: How Can I Find My Security Token and Use It in Data Loader | Salesforce Platform  https://www.youtube.com/watch?v=nYbfxeSGKFM&ab_channel=SalesforceSupport",
                "field_type": "Auth",
                "type": "string"
              },
              "sf_organization_id": {
                "title": "Sf Organization Id",
                "description": "See below for instructions: How to find your organization id  https://help.salesforce.com/s/articleView?id=000385215&type=1",
                "field_type": "Auth",
                "type": "string"
              },
              "last_modified_date": {
                "title": "Last Modified Date",
                "description": "Last modified date",
                "field_type": "Query Param",
                "type": "string"
              },
              "limit": {
                "title": "Limit",
                "description": "Total number of items to pull from Salesforce.By default limiting to 100",
                "default": 100,
                "field_type": "Query Param",
                "type": "integer"
              }
            },
            "required": [
              "sf_username",
              "sf_password",
              "sf_security_token",
              "sf_organization_id"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "SalesforceHrFlowProfile",
            "type": "object",
            "properties": {
              "attributes": {
                "$ref": "#/definitions/Attributes"
              },
              "HrFlow_Profile_Experiences__r": {
                "$ref": "#/definitions/SalesforceRelationship_SalesforceExperience_"
              },
              "HrFlow_Profile_Educations__r": {
                "$ref": "#/definitions/SalesforceRelationship_SalesforceEducation_"
              },
              "HrFlow_Profile_Attachments__r": {
                "$ref": "#/definitions/SalesforceRelationship_SalesforceAttachment_"
              },
              "Archive__c": {
                "title": "Archive  C",
                "type": "string"
              },
              "Certifications__c": {
                "title": "Certifications  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Courses__c": {
                "title": "Courses  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Dataset_Id__c": {
                "title": "Dataset Id  C",
                "type": "integer"
              },
              "Date_Birth__c": {
                "title": "Date Birth  C",
                "type": "string"
              },
              "Date_Edition__c": {
                "title": "Date Edition  C",
                "type": "string"
              },
              "Date_Reception__c": {
                "title": "Date Reception  C",
                "type": "string"
              },
              "Educations_Duration__c": {
                "title": "Educations Duration  C",
                "type": "number"
              },
              "Email__c": {
                "title": "Email  C",
                "type": "string"
              },
              "Experiences_Duration__c": {
                "title": "Experiences Duration  C",
                "type": "number"
              },
              "First_Name__c": {
                "title": "First Name  C",
                "type": "string"
              },
              "Gender__c": {
                "title": "Gender  C",
                "enum": [
                  "male",
                  "M",
                  "female",
                  "F",
                  "U",
                  ""
                ],
                "type": "string"
              },
              "Hash_Id__c": {
                "title": "Hash Id  C",
                "type": "string"
              },
              "Id__c": {
                "title": "Id  C",
                "type": "integer"
              },
              "Interests__c": {
                "title": "Interests  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Labels__c": {
                "title": "Labels  C",
                "type": "string",
                "format": "json-string"
              },
              "Languages__c": {
                "title": "Languages  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "LastModifiedDate": {
                "title": "Lastmodifieddate",
                "type": "string"
              },
              "Last_Name__c": {
                "title": "Last Name  C",
                "type": "string"
              },
              "Location_Fields__c": {
                "title": "Location Fields  C",
                "type": "string",
                "format": "json-string"
              },
              "Location_Gmaps__c": {
                "title": "Location Gmaps  C",
                "type": "string"
              },
              "Location_Lat__c": {
                "title": "Location Lat  C",
                "type": "number"
              },
              "Location_Lng__c": {
                "title": "Location Lng  C",
                "type": "number"
              },
              "Location_Text__c": {
                "title": "Location Text  C",
                "type": "string"
              },
              "Metadatas__c": {
                "title": "Metadatas  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Name__c": {
                "title": "Name  C",
                "type": "string"
              },
              "Phone__c": {
                "title": "Phone  C",
                "type": "string"
              },
              "Picture__c": {
                "title": "Picture  C",
                "type": "string"
              },
              "Reference__c": {
                "title": "Reference  C",
                "type": "string"
              },
              "Seniority__c": {
                "title": "Seniority  C",
                "enum": [
                  "senior",
                  "junior",
                  "dev"
                ],
                "type": "string"
              },
              "Skills__c": {
                "title": "Skills  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "Summary__c": {
                "title": "Summary  C",
                "type": "string"
              },
              "Tags__c": {
                "title": "Tags  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Tasks__c": {
                "title": "Tasks  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Text_Language__c": {
                "title": "Text Language  C",
                "type": "string"
              },
              "Text__c": {
                "title": "Text  C",
                "type": "string"
              },
              "URLs__c": {
                "$ref": "#/definitions/URLs"
              }
            },
            "required": [
              "attributes",
              "Certifications__c",
              "Dataset_Id__c",
              "Hash_Id__c",
              "Id__c",
              "LastModifiedDate",
              "Location_Text__c"
            ],
            "definitions": {
              "Attributes": {
                "title": "Attributes",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "url"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "SalesforceExperience": {
                "title": "SalesforceExperience",
                "type": "object",
                "properties": {
                  "attributes": {
                    "$ref": "#/definitions/Attributes"
                  },
                  "Certifications__c": {
                    "title": "Certifications  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "Company__c": {
                    "title": "Company  C",
                    "type": "string"
                  },
                  "Courses__c": {
                    "title": "Courses  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "Date_Begin__c": {
                    "title": "Date Begin  C",
                    "type": "string"
                  },
                  "Date_End__c": {
                    "title": "Date End  C",
                    "type": "string"
                  },
                  "Description__c": {
                    "title": "Description  C",
                    "type": "string"
                  },
                  "Hash_Id__c": {
                    "title": "Hash Id  C",
                    "type": "string"
                  },
                  "Id__c": {
                    "title": "Id  C",
                    "type": "integer"
                  },
                  "Location_Fields__c": {
                    "title": "Location Fields  C",
                    "type": "string",
                    "format": "json-string"
                  },
                  "Location_Gmaps__c": {
                    "title": "Location Gmaps  C",
                    "type": "string"
                  },
                  "Location_Lat__c": {
                    "title": "Location Lat  C",
                    "type": "number"
                  },
                  "Location_Lng__c": {
                    "title": "Location Lng  C",
                    "type": "number"
                  },
                  "Location_Text__c": {
                    "title": "Location Text  C",
                    "type": "string"
                  },
                  "Profile__c": {
                    "title": "Profile  C",
                    "type": "string"
                  },
                  "Skills__c": {
                    "title": "Skills  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "Tasks__c": {
                    "title": "Tasks  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "Title__c": {
                    "title": "Title  C",
                    "type": "string"
                  }
                },
                "required": [
                  "attributes",
                  "Hash_Id__c",
                  "Id__c",
                  "Location_Text__c",
                  "Profile__c"
                ]
              },
              "SalesforceRelationship_SalesforceExperience_": {
                "title": "SalesforceRelationship[SalesforceExperience]",
                "type": "object",
                "properties": {
                  "totalSize": {
                    "title": "Totalsize",
                    "type": "integer"
                  },
                  "done": {
                    "title": "Done",
                    "type": "boolean"
                  },
                  "records": {
                    "title": "Records",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SalesforceExperience"
                    }
                  }
                },
                "required": [
                  "totalSize",
                  "done",
                  "records"
                ]
              },
              "SalesforceEducation": {
                "title": "SalesforceEducation",
                "type": "object",
                "properties": {
                  "attributes": {
                    "$ref": "#/definitions/Attributes"
                  },
                  "Certifications__c": {
                    "title": "Certifications  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "Courses__c": {
                    "title": "Courses  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "Date_Begin__c": {
                    "title": "Date Begin  C",
                    "type": "string"
                  },
                  "Date_End__c": {
                    "title": "Date End  C",
                    "type": "string"
                  },
                  "Description__c": {
                    "title": "Description  C",
                    "type": "string"
                  },
                  "Hash_Id__c": {
                    "title": "Hash Id  C",
                    "type": "string"
                  },
                  "Id__c": {
                    "title": "Id  C",
                    "type": "integer"
                  },
                  "Location_Fields__c": {
                    "title": "Location Fields  C",
                    "type": "string",
                    "format": "json-string"
                  },
                  "Location_Gmaps__c": {
                    "title": "Location Gmaps  C",
                    "type": "string"
                  },
                  "Location_Lat__c": {
                    "title": "Location Lat  C",
                    "type": "number"
                  },
                  "Location_Lng__c": {
                    "title": "Location Lng  C",
                    "type": "number"
                  },
                  "Location_Text__c": {
                    "title": "Location Text  C",
                    "type": "string"
                  },
                  "Profile__c": {
                    "title": "Profile  C",
                    "type": "string"
                  },
                  "School__c": {
                    "title": "School  C",
                    "type": "string"
                  },
                  "Skills__c": {
                    "title": "Skills  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "Tasks__c": {
                    "title": "Tasks  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "Title__c": {
                    "title": "Title  C",
                    "type": "string"
                  }
                },
                "required": [
                  "attributes",
                  "Certifications__c",
                  "Hash_Id__c",
                  "Id__c",
                  "Location_Text__c",
                  "Profile__c"
                ]
              },
              "SalesforceRelationship_SalesforceEducation_": {
                "title": "SalesforceRelationship[SalesforceEducation]",
                "type": "object",
                "properties": {
                  "totalSize": {
                    "title": "Totalsize",
                    "type": "integer"
                  },
                  "done": {
                    "title": "Done",
                    "type": "boolean"
                  },
                  "records": {
                    "title": "Records",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SalesforceEducation"
                    }
                  }
                },
                "required": [
                  "totalSize",
                  "done",
                  "records"
                ]
              },
              "SalesforceAttachment": {
                "title": "SalesforceAttachment",
                "type": "object",
                "properties": {
                  "attributes": {
                    "$ref": "#/definitions/Attributes"
                  },
                  "Alt__c": {
                    "title": "Alt  C",
                    "type": "string"
                  },
                  "Date_Edition__c": {
                    "title": "Date Edition  C",
                    "type": "string"
                  },
                  "Extension__c": {
                    "title": "Extension  C",
                    "type": "string"
                  },
                  "File_Name__c": {
                    "title": "File Name  C",
                    "type": "string"
                  },
                  "File_Size__c": {
                    "title": "File Size  C",
                    "type": "integer"
                  },
                  "Id__c": {
                    "title": "Id  C",
                    "type": "integer"
                  },
                  "Original_File_Name__c": {
                    "title": "Original File Name  C",
                    "type": "string"
                  },
                  "Profile__c": {
                    "title": "Profile  C",
                    "type": "string"
                  },
                  "Text__c": {
                    "title": "Text  C",
                    "type": "string"
                  },
                  "Timestamp__c": {
                    "title": "Timestamp  C",
                    "type": "string"
                  },
                  "Type__c": {
                    "title": "Type  C",
                    "type": "string"
                  },
                  "URL__c": {
                    "title": "Url  C",
                    "type": "string"
                  }
                },
                "required": [
                  "attributes",
                  "Alt__c",
                  "Extension__c",
                  "File_Name__c",
                  "File_Size__c",
                  "Id__c",
                  "Original_File_Name__c",
                  "Profile__c",
                  "Timestamp__c",
                  "Type__c",
                  "URL__c"
                ]
              },
              "SalesforceRelationship_SalesforceAttachment_": {
                "title": "SalesforceRelationship[SalesforceAttachment]",
                "type": "object",
                "properties": {
                  "totalSize": {
                    "title": "Totalsize",
                    "type": "integer"
                  },
                  "done": {
                    "title": "Done",
                    "type": "boolean"
                  },
                  "records": {
                    "title": "Records",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SalesforceAttachment"
                    }
                  }
                },
                "required": [
                  "totalSize",
                  "done",
                  "records"
                ]
              },
              "URLs": {
                "title": "URLs",
                "type": "object",
                "properties": {
                  "from_resume": {
                    "title": "From Resume",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "linkedin": {
                    "title": "Linkedin",
                    "type": "string"
                  },
                  "twitter": {
                    "title": "Twitter",
                    "type": "string"
                  },
                  "facebook": {
                    "title": "Facebook",
                    "type": "string"
                  },
                  "github": {
                    "title": "Github",
                    "type": "string"
                  }
                }
              }
            }
          },
          "supports_incremental": true,
          "target": "HrFlow.ai Profiles",
          "target_parameters": {
            "title": "WriteProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "edit": {
                "title": "Edit",
                "description": "When enabled the profile must exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "only_edit_fields": {
                "title": "Only Edit Fields",
                "description": "List of attributes to use for the edit operation e.g. ['tags', 'metadatas']",
                "field_type": "Other",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "only_edit_fields"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "jsonmap": {
            "key": ".Hash_Id__c",
            "reference": ".Reference__c",
            "archived_at": ".Archive__c",
            "updated_at": ".Date_Edition__c",
            "created_at": ".Date_Reception__c",
            "info": {
              "full_name": "$concat(.Last_Name__c, ' ', .First_Name__c)",
              "first_name": ".First_Name__c",
              "last_name": ".Last_Name__c",
              "email": ".Email__c",
              "phone": ".Phone__c",
              "date_birth": ".Date_Birth__c",
              "location": {
                "text": ".Location_Text__c",
                "lat": ".Location_Lat__c",
                "lng": ".Location_Lng__c"
              },
              "gender": ".Gender__c"
            },
            "text_language": ".Text_Language__c",
            "text": ".Text__c",
            "educations_duration": ".Experiences_Duration__c",
            "experiences": ".HrFlow_Profile_Experiences__r != null ?? .HrFlow_Profile_Experiences__r.records | $map({title: .Title__c, location: {text: .Location_Text__c, lat: .Location_Lat__c, lng: .Location_Lng__c}, company: .Company__c, date_start: .Date_Begin__c, date_end: .Date_End__c, description: .Description__c, skills: .Skills__c | $jsonload,  tasks: .Tasks__c | $jsonload, certifications: .Certifications__c | $jsonload })",
            "educations": ".HrFlow_Profile_Educations__r != null ?? .HrFlow_Profile_Educations__r.records | $map({title: .Title__c, location: {text: .Location_Text__c, lat: .Location_Lat__c, lng: .Location_Lng__c}, school: .School__c, date_start: .Date_Begin__c, date_end: .Date_End__c, description: .Description__c, skills: .Skills__c | $jsonload,  tasks: .Tasks__c | $jsonload, certifications: .Certifications__c | $jsonload, courses: .Courses__c | $jsonload })",
            "attachments": ".HrFlow_Profile_Attachments__r != null ?? .HrFlow_Profile_Attachments__r.records | $map({text: .Text__c, type: .Type__c, alt: .Alt__c, file_size: .File_Size__c, file_name: .File_Name__c, original_file_name: .Original_File_Name__c, extension: .Extension__c, url: .URL__c})",
            "skills": ".Skills__c | $jsonload",
            "languages": ".Languages__c | $jsonload",
            "certifications": ".Certifications__c | $jsonload",
            "courses": ".Courses__c | $jsonload",
            "tasks": ".Tasks__c | $jsonload",
            "interests": ".Interests__c | $jsonload",
            "labels": ".Labels__c | $jsonload",
            "tags": ".Tags__c | $jsonload",
            "metadatas": ".Metadatas__c | $jsonload"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Salesforce\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Salesforce.pull_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['sf_username', 'sf_password', 'sf_security_token', 'sf_organization_id', 'last_modified_date', 'limit']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'edit', 'only_edit_fields']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Salesforce.pull_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "PushProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "Salesforce Profiles",
          "target_parameters": {
            "title": "SalesforceBaseParameters",
            "type": "object",
            "properties": {
              "sf_username": {
                "title": "Sf Username",
                "description": "username used to access Salesforce API",
                "field_type": "Auth",
                "type": "string"
              },
              "sf_password": {
                "title": "Sf Password",
                "description": "password used to access Salesforce API",
                "field_type": "Auth",
                "type": "string"
              },
              "sf_security_token": {
                "title": "Sf Security Token",
                "description": "Security Token to access Salesforce API.See below for instructions: How Can I Find My Security Token and Use It in Data Loader | Salesforce Platform  https://www.youtube.com/watch?v=nYbfxeSGKFM&ab_channel=SalesforceSupport",
                "field_type": "Auth",
                "type": "string"
              },
              "sf_organization_id": {
                "title": "Sf Organization Id",
                "description": "See below for instructions: How to find your organization id  https://help.salesforce.com/s/articleView?id=000385215&type=1",
                "field_type": "Auth",
                "type": "string"
              }
            },
            "required": [
              "sf_username",
              "sf_password",
              "sf_security_token",
              "sf_organization_id"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "SalesforceHrFlowProfile",
            "type": "object",
            "properties": {
              "attributes": {
                "$ref": "#/definitions/Attributes"
              },
              "HrFlow_Profile_Experiences__r": {
                "$ref": "#/definitions/SalesforceRelationship_SalesforceExperience_"
              },
              "HrFlow_Profile_Educations__r": {
                "$ref": "#/definitions/SalesforceRelationship_SalesforceEducation_"
              },
              "HrFlow_Profile_Attachments__r": {
                "$ref": "#/definitions/SalesforceRelationship_SalesforceAttachment_"
              },
              "Archive__c": {
                "title": "Archive  C",
                "type": "string"
              },
              "Certifications__c": {
                "title": "Certifications  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Courses__c": {
                "title": "Courses  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Dataset_Id__c": {
                "title": "Dataset Id  C",
                "type": "integer"
              },
              "Date_Birth__c": {
                "title": "Date Birth  C",
                "type": "string"
              },
              "Date_Edition__c": {
                "title": "Date Edition  C",
                "type": "string"
              },
              "Date_Reception__c": {
                "title": "Date Reception  C",
                "type": "string"
              },
              "Educations_Duration__c": {
                "title": "Educations Duration  C",
                "type": "number"
              },
              "Email__c": {
                "title": "Email  C",
                "type": "string"
              },
              "Experiences_Duration__c": {
                "title": "Experiences Duration  C",
                "type": "number"
              },
              "First_Name__c": {
                "title": "First Name  C",
                "type": "string"
              },
              "Gender__c": {
                "title": "Gender  C",
                "enum": [
                  "male",
                  "M",
                  "female",
                  "F",
                  "U",
                  ""
                ],
                "type": "string"
              },
              "Hash_Id__c": {
                "title": "Hash Id  C",
                "type": "string"
              },
              "Id__c": {
                "title": "Id  C",
                "type": "integer"
              },
              "Interests__c": {
                "title": "Interests  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Labels__c": {
                "title": "Labels  C",
                "type": "string",
                "format": "json-string"
              },
              "Languages__c": {
                "title": "Languages  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "LastModifiedDate": {
                "title": "Lastmodifieddate",
                "type": "string"
              },
              "Last_Name__c": {
                "title": "Last Name  C",
                "type": "string"
              },
              "Location_Fields__c": {
                "title": "Location Fields  C",
                "type": "string",
                "format": "json-string"
              },
              "Location_Gmaps__c": {
                "title": "Location Gmaps  C",
                "type": "string"
              },
              "Location_Lat__c": {
                "title": "Location Lat  C",
                "type": "number"
              },
              "Location_Lng__c": {
                "title": "Location Lng  C",
                "type": "number"
              },
              "Location_Text__c": {
                "title": "Location Text  C",
                "type": "string"
              },
              "Metadatas__c": {
                "title": "Metadatas  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Name__c": {
                "title": "Name  C",
                "type": "string"
              },
              "Phone__c": {
                "title": "Phone  C",
                "type": "string"
              },
              "Picture__c": {
                "title": "Picture  C",
                "type": "string"
              },
              "Reference__c": {
                "title": "Reference  C",
                "type": "string"
              },
              "Seniority__c": {
                "title": "Seniority  C",
                "enum": [
                  "senior",
                  "junior",
                  "dev"
                ],
                "type": "string"
              },
              "Skills__c": {
                "title": "Skills  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "Summary__c": {
                "title": "Summary  C",
                "type": "string"
              },
              "Tags__c": {
                "title": "Tags  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Tasks__c": {
                "title": "Tasks  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Text_Language__c": {
                "title": "Text Language  C",
                "type": "string"
              },
              "Text__c": {
                "title": "Text  C",
                "type": "string"
              },
              "URLs__c": {
                "$ref": "#/definitions/URLs"
              }
            },
            "required": [
              "attributes",
              "Certifications__c",
              "Dataset_Id__c",
              "Hash_Id__c",
              "Id__c",
              "LastModifiedDate",
              "Location_Text__c"
            ],
            "definitions": {
              "Attributes": {
                "title": "Attributes",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "url"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "SalesforceExperience": {
                "title": "SalesforceExperience",
                "type": "object",
                "properties": {
                  "attributes": {
                    "$ref": "#/definitions/Attributes"
                  },
                  "Certifications__c": {
                    "title": "Certifications  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "Company__c": {
                    "title": "Company  C",
                    "type": "string"
                  },
                  "Courses__c": {
                    "title": "Courses  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "Date_Begin__c": {
                    "title": "Date Begin  C",
                    "type": "string"
                  },
                  "Date_End__c": {
                    "title": "Date End  C",
                    "type": "string"
                  },
                  "Description__c": {
                    "title": "Description  C",
                    "type": "string"
                  },
                  "Hash_Id__c": {
                    "title": "Hash Id  C",
                    "type": "string"
                  },
                  "Id__c": {
                    "title": "Id  C",
                    "type": "integer"
                  },
                  "Location_Fields__c": {
                    "title": "Location Fields  C",
                    "type": "string",
                    "format": "json-string"
                  },
                  "Location_Gmaps__c": {
                    "title": "Location Gmaps  C",
                    "type": "string"
                  },
                  "Location_Lat__c": {
                    "title": "Location Lat  C",
                    "type": "number"
                  },
                  "Location_Lng__c": {
                    "title": "Location Lng  C",
                    "type": "number"
                  },
                  "Location_Text__c": {
                    "title": "Location Text  C",
                    "type": "string"
                  },
                  "Profile__c": {
                    "title": "Profile  C",
                    "type": "string"
                  },
                  "Skills__c": {
                    "title": "Skills  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "Tasks__c": {
                    "title": "Tasks  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "Title__c": {
                    "title": "Title  C",
                    "type": "string"
                  }
                },
                "required": [
                  "attributes",
                  "Hash_Id__c",
                  "Id__c",
                  "Location_Text__c",
                  "Profile__c"
                ]
              },
              "SalesforceRelationship_SalesforceExperience_": {
                "title": "SalesforceRelationship[SalesforceExperience]",
                "type": "object",
                "properties": {
                  "totalSize": {
                    "title": "Totalsize",
                    "type": "integer"
                  },
                  "done": {
                    "title": "Done",
                    "type": "boolean"
                  },
                  "records": {
                    "title": "Records",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SalesforceExperience"
                    }
                  }
                },
                "required": [
                  "totalSize",
                  "done",
                  "records"
                ]
              },
              "SalesforceEducation": {
                "title": "SalesforceEducation",
                "type": "object",
                "properties": {
                  "attributes": {
                    "$ref": "#/definitions/Attributes"
                  },
                  "Certifications__c": {
                    "title": "Certifications  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "Courses__c": {
                    "title": "Courses  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "Date_Begin__c": {
                    "title": "Date Begin  C",
                    "type": "string"
                  },
                  "Date_End__c": {
                    "title": "Date End  C",
                    "type": "string"
                  },
                  "Description__c": {
                    "title": "Description  C",
                    "type": "string"
                  },
                  "Hash_Id__c": {
                    "title": "Hash Id  C",
                    "type": "string"
                  },
                  "Id__c": {
                    "title": "Id  C",
                    "type": "integer"
                  },
                  "Location_Fields__c": {
                    "title": "Location Fields  C",
                    "type": "string",
                    "format": "json-string"
                  },
                  "Location_Gmaps__c": {
                    "title": "Location Gmaps  C",
                    "type": "string"
                  },
                  "Location_Lat__c": {
                    "title": "Location Lat  C",
                    "type": "number"
                  },
                  "Location_Lng__c": {
                    "title": "Location Lng  C",
                    "type": "number"
                  },
                  "Location_Text__c": {
                    "title": "Location Text  C",
                    "type": "string"
                  },
                  "Profile__c": {
                    "title": "Profile  C",
                    "type": "string"
                  },
                  "School__c": {
                    "title": "School  C",
                    "type": "string"
                  },
                  "Skills__c": {
                    "title": "Skills  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "Tasks__c": {
                    "title": "Tasks  C",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "Title__c": {
                    "title": "Title  C",
                    "type": "string"
                  }
                },
                "required": [
                  "attributes",
                  "Certifications__c",
                  "Hash_Id__c",
                  "Id__c",
                  "Location_Text__c",
                  "Profile__c"
                ]
              },
              "SalesforceRelationship_SalesforceEducation_": {
                "title": "SalesforceRelationship[SalesforceEducation]",
                "type": "object",
                "properties": {
                  "totalSize": {
                    "title": "Totalsize",
                    "type": "integer"
                  },
                  "done": {
                    "title": "Done",
                    "type": "boolean"
                  },
                  "records": {
                    "title": "Records",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SalesforceEducation"
                    }
                  }
                },
                "required": [
                  "totalSize",
                  "done",
                  "records"
                ]
              },
              "SalesforceAttachment": {
                "title": "SalesforceAttachment",
                "type": "object",
                "properties": {
                  "attributes": {
                    "$ref": "#/definitions/Attributes"
                  },
                  "Alt__c": {
                    "title": "Alt  C",
                    "type": "string"
                  },
                  "Date_Edition__c": {
                    "title": "Date Edition  C",
                    "type": "string"
                  },
                  "Extension__c": {
                    "title": "Extension  C",
                    "type": "string"
                  },
                  "File_Name__c": {
                    "title": "File Name  C",
                    "type": "string"
                  },
                  "File_Size__c": {
                    "title": "File Size  C",
                    "type": "integer"
                  },
                  "Id__c": {
                    "title": "Id  C",
                    "type": "integer"
                  },
                  "Original_File_Name__c": {
                    "title": "Original File Name  C",
                    "type": "string"
                  },
                  "Profile__c": {
                    "title": "Profile  C",
                    "type": "string"
                  },
                  "Text__c": {
                    "title": "Text  C",
                    "type": "string"
                  },
                  "Timestamp__c": {
                    "title": "Timestamp  C",
                    "type": "string"
                  },
                  "Type__c": {
                    "title": "Type  C",
                    "type": "string"
                  },
                  "URL__c": {
                    "title": "Url  C",
                    "type": "string"
                  }
                },
                "required": [
                  "attributes",
                  "Alt__c",
                  "Extension__c",
                  "File_Name__c",
                  "File_Size__c",
                  "Id__c",
                  "Original_File_Name__c",
                  "Profile__c",
                  "Timestamp__c",
                  "Type__c",
                  "URL__c"
                ]
              },
              "SalesforceRelationship_SalesforceAttachment_": {
                "title": "SalesforceRelationship[SalesforceAttachment]",
                "type": "object",
                "properties": {
                  "totalSize": {
                    "title": "Totalsize",
                    "type": "integer"
                  },
                  "done": {
                    "title": "Done",
                    "type": "boolean"
                  },
                  "records": {
                    "title": "Records",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SalesforceAttachment"
                    }
                  }
                },
                "required": [
                  "totalSize",
                  "done",
                  "records"
                ]
              },
              "URLs": {
                "title": "URLs",
                "type": "object",
                "properties": {
                  "from_resume": {
                    "title": "From Resume",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "linkedin": {
                    "title": "Linkedin",
                    "type": "string"
                  },
                  "twitter": {
                    "title": "Twitter",
                    "type": "string"
                  },
                  "facebook": {
                    "title": "Facebook",
                    "type": "string"
                  },
                  "github": {
                    "title": "Github",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "Id__c": ".id",
            "Hash_Id__c": ".key",
            "Reference__c": ".reference",
            "Archive__c": ".archived_at",
            "Date_Edition__c": ".updated_at",
            "Date_Reception__c": ".created_at",
            "First_Name__c": ".info.first_name",
            "Last_Name__c": ".info.last_name",
            "Email__c": ".info.email",
            "Phone__c": ".info.phone",
            "Date_Birth__c": ".info.date_birth",
            "Location_Fields__c": ".info.location.fields | $jsondump",
            "Location_Lat__c": ".info.location.lat",
            "Location_Lng__c": ".info.location.lng",
            "Location_Text__c": ".info.location.text",
            "Location_Gmaps__c": ".info.location.gmaps",
            "URLs__c": ".info.urls | $jsondump",
            "Picture__c": ".info.picture",
            "Gender__c": ".info.gender",
            "Summary__c": ".info.summary",
            "Text_Language__c": ".text_language",
            "Text__c": ".text",
            "Experiences_Duration__c": ".experiences_duration",
            "Educations_Duration__c": ".educations_duration",
            "HrFlow_Profile_Experiences__r": ".experiences != null ?? .experiences | {done:true, totalSize: $len, records: $map({Certifications__c: .certifications | $jsondump, Company__c: .company, Courses__c: .courses | $jsondump, Date_Begin__c: .date_start, Date_End__c: .date_end, Description__c: .description, Hash_Id__c: .key, Location_Fields__c: .location.fields | $jsondump, Location_Lat__c: .location.lat, Location_Lng__c: .location.lng, Location_Text__c: .location.text, Location_Gmaps__c: .location.gmaps, Skills__c: .skills | $jsondump, Tasks__c: .tasks | $jsondump, Title__c: .title})} : null",
            "HrFlow_Profile_Educations__r": ".educations != null ?? .educations | {done:true, totalSize: $len, records: $map({Certifications__c: .certifications | $jsondump, School__c: .school, Courses__c: .courses | $jsondump, Date_Begin__c: .date_start, Date_End__c: .date_end, Description__c: .description, Hash_Id__c: .key, Location_Fields__c: .location.fields | $jsondump, Location_Lat__c: .location.lat, Location_Lng__c: .location.lng, Location_Text__c: .location.text, Location_Gmaps__c: .location.gmaps, Skills__c: .skills | $jsondump, Tasks__c: .tasks | $jsondump, Title__c: .title})} : null",
            "HrFlow_Profile_Attachments__r": ".attachments != null ?? .attachments | {done:true, totalSize: $len, records: $map({Alt__c: .alt, Date_Edition__c: .updated_at, Extension__c: .extension, File_Name__c: .file_name, File_Size__c: .file_size, Original_File_Name__c: .original_file_name, Timestamp__c: .created_at, Type__c: .type, URL__c: .public_url})} : null",
            "Skills__c": ".skills | $jsondump",
            "Languages__c": ".languages | $jsondump",
            "Certifications__c": ".certifications | $jsondump",
            "Courses__c": ".courses | $jsondump",
            "Tasks__c": ".tasks | $jsondump",
            "Interests__c": ".interests | $jsondump",
            "Labels__c": ".labels | $jsondump",
            "Tags__c": ".tags | $jsondump",
            "Metadatas__c": ".metadatas | $jsondump"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Salesforce\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Salesforce.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Salesforce.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Salesforce.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['sf_username', 'sf_password', 'sf_security_token', 'sf_organization_id']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Salesforce.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "Salesforce Jobs",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "sf_username": {
                "title": "Sf Username",
                "description": "username used to access Salesforce API",
                "field_type": "Auth",
                "type": "string"
              },
              "sf_password": {
                "title": "Sf Password",
                "description": "password used to access Salesforce API",
                "field_type": "Auth",
                "type": "string"
              },
              "sf_security_token": {
                "title": "Sf Security Token",
                "description": "Security Token to access Salesforce API.See below for instructions: How Can I Find My Security Token and Use It in Data Loader | Salesforce Platform  https://www.youtube.com/watch?v=nYbfxeSGKFM&ab_channel=SalesforceSupport",
                "field_type": "Auth",
                "type": "string"
              },
              "sf_organization_id": {
                "title": "Sf Organization Id",
                "description": "See below for instructions: How to find your organization id  https://help.salesforce.com/s/articleView?id=000385215&type=1",
                "field_type": "Auth",
                "type": "string"
              },
              "last_modified_date": {
                "title": "Last Modified Date",
                "description": "Last modified date",
                "field_type": "Query Param",
                "type": "string"
              },
              "limit": {
                "title": "Limit",
                "description": "Total number of items to pull from Salesforce.By default limiting to 1000",
                "default": 1000,
                "field_type": "Query Param",
                "type": "integer"
              }
            },
            "required": [
              "sf_username",
              "sf_password",
              "sf_security_token",
              "sf_organization_id"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "SalesforceHrFlowJob",
            "type": "object",
            "properties": {
              "attributes": {
                "$ref": "#/definitions/Attributes"
              },
              "Archive__c": {
                "title": "Archive  C",
                "type": "string"
              },
              "Benefits__c": {
                "title": "Benefits  C",
                "type": "string"
              },
              "Board_Id__c": {
                "title": "Board Id  C",
                "type": "integer"
              },
              "Certifications__c": {
                "title": "Certifications  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Courses__c": {
                "title": "Courses  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Culture__c": {
                "title": "Culture  C",
                "type": "string"
              },
              "Date_Edition__c": {
                "title": "Date Edition  C",
                "type": "string"
              },
              "Hash_Id__c": {
                "title": "Hash Id  C",
                "type": "string"
              },
              "Id__c": {
                "title": "Id  C",
                "type": "integer"
              },
              "Interviews__c": {
                "title": "Interviews  C",
                "type": "string"
              },
              "Languages__c": {
                "title": "Languages  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "LastModifiedDate": {
                "title": "Lastmodifieddate",
                "type": "string"
              },
              "Location_Fields__c": {
                "title": "Location Fields  C",
                "type": "string",
                "format": "json-string"
              },
              "Location_Gmaps__c": {
                "title": "Location Gmaps  C",
                "type": "string"
              },
              "Location_Lat__c": {
                "title": "Location Lat  C",
                "type": "number"
              },
              "Location_Lng__c": {
                "title": "Location Lng  C",
                "type": "number"
              },
              "Location_Text__c": {
                "title": "Location Text  C",
                "type": "string"
              },
              "Metadatas__c": {
                "title": "Metadatas  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Name__c": {
                "title": "Name  C",
                "type": "string"
              },
              "Picture__c": {
                "title": "Picture  C",
                "type": "string"
              },
              "Ranges_Date__c": {
                "title": "Ranges Date  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangeDate"
                }
              },
              "Ranges_Float__c": {
                "title": "Ranges Float  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangeFloat"
                }
              },
              "Reference__c": {
                "title": "Reference  C",
                "type": "string"
              },
              "Requirements__c": {
                "title": "Requirements  C",
                "type": "string"
              },
              "Responsibilities__c": {
                "title": "Responsibilities  C",
                "type": "string"
              },
              "Sections__c": {
                "title": "Sections  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "Skills__c": {
                "title": "Skills  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "Slug__c": {
                "title": "Slug  C",
                "type": "string"
              },
              "Status__c": {
                "title": "Status  C",
                "enum": [
                  0,
                  1
                ],
                "type": "integer"
              },
              "Summary__c": {
                "title": "Summary  C",
                "type": "string"
              },
              "Tags__c": {
                "title": "Tags  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "Tasks__c": {
                "title": "Tasks  C",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "URL__c": {
                "title": "Url  C",
                "type": "string"
              }
            },
            "required": [
              "attributes",
              "Board_Id__c",
              "Certifications__c",
              "Hash_Id__c",
              "Id__c",
              "LastModifiedDate",
              "Location_Text__c",
              "Name__c",
              "Ranges_Date__c",
              "Ranges_Float__c",
              "Sections__c",
              "Slug__c",
              "Status__c"
            ],
            "definitions": {
              "Attributes": {
                "title": "Attributes",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "url"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangeDate": {
                "title": "RangeDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value_min",
                  "value_max"
                ]
              },
              "RangeFloat": {
                "title": "RangeFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value_min",
                  "value_max",
                  "unit"
                ]
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "title",
                  "description"
                ]
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "supports_incremental": true,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "archived_at": ".Archive__c",
            "archive": ".Archive__c",
            "name": ".Name__c",
            "reference": ".Reference__c",
            "url": ".URL__c",
            "picture": ".Picture__c",
            "summary": ".Summary__c",
            "location": {
              "text": ".Location_Text__c",
              "lat": ".Location_Lat__c",
              "lng": ".Location_Lng__c"
            },
            "culture": ".Culture__c",
            "responsibilities": ".Responsibilities__c",
            "requirements": ".Requirements__c",
            "benefits": ".Benefits__c",
            "interviews": ".Interviews__c",
            "sections": ".Sections__c | $jsonload",
            "skills": ".Skills__c | $jsonload",
            "languages": ".Languages__c | $jsonload",
            "tags": ".Tags__c | $jsonload",
            "ranges_date": ".Ranges_Date__c | $jsonload",
            "ranges_float": ".Ranges_Float__c | $jsonload",
            "metadatas": ".Metadatas__c | $jsonload"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Salesforce\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Salesforce.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['sf_username', 'sf_password', 'sf_security_token', 'sf_organization_id', 'last_modified_date', 'limit']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Salesforce.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "SAP SuccessFactors",
      "type": "ATS",
      "subtype": "sapsuccessfactors",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/sapsuccessfactors/logo.jpeg",
      "actions": [
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "SAP Job",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "api_server": {
                "title": "Api Server",
                "description": "Server to be accessed",
                "field_type": "Other",
                "type": "string"
              },
              "api_key": {
                "title": "Api Key",
                "description": "API Key used to authenticate on the SAP API",
                "field_type": "Auth",
                "type": "string"
              },
              "top": {
                "title": "Top",
                "description": "Show only the first N items value is capped at 100",
                "default": 100,
                "field_type": "Query Param",
                "type": "integer"
              },
              "skip": {
                "title": "Skip",
                "description": "Search items by search phrases",
                "field_type": "Query Param",
                "type": "integer"
              },
              "filter": {
                "title": "Filter",
                "description": "Filter items by property values",
                "field_type": "Query Param",
                "type": "string"
              },
              "search": {
                "title": "Search",
                "description": "Search items by search phrases",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_server",
              "api_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "SAPSuccessFactorsJob",
            "type": "object",
            "properties": {
              "jobDescription": {
                "title": "Jobdescription",
                "type": "string"
              },
              "jobTitle": {
                "title": "Jobtitle",
                "type": "string"
              },
              "jobReqId": {
                "title": "Jobreqid",
                "type": "string"
              },
              "jobRequisition": {
                "$ref": "#/definitions/SAPSuccessFactorsJobRequistion"
              }
            },
            "required": [
              "jobRequisition"
            ],
            "definitions": {
              "SAPSuccessFactorsJobRequistion": {
                "title": "SAPSuccessFactorsJobRequistion",
                "type": "object",
                "properties": {
                  "annual_SA": {
                    "title": "Annual Sa",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "type": "string"
                  },
                  "city": {
                    "title": "City",
                    "type": "string"
                  },
                  "country": {
                    "title": "Country",
                    "type": "string"
                  },
                  "department": {
                    "title": "Department",
                    "type": "string"
                  },
                  "division": {
                    "title": "Division",
                    "type": "string"
                  },
                  "facility": {
                    "title": "Facility",
                    "type": "string"
                  },
                  "function": {
                    "title": "Function",
                    "type": "string"
                  },
                  "industry": {
                    "title": "Industry",
                    "type": "string"
                  },
                  "monthly_salary": {
                    "title": "Monthly Salary",
                    "type": "string"
                  },
                  "salaryBase": {
                    "title": "Salarybase",
                    "type": "string"
                  },
                  "otherBonus": {
                    "title": "Otherbonus",
                    "type": "string"
                  },
                  "salaryMax": {
                    "title": "Salarymax",
                    "type": "string"
                  },
                  "salaryMin": {
                    "title": "Salarymin",
                    "type": "string"
                  },
                  "stateProvince": {
                    "title": "Stateprovince",
                    "type": "string"
                  },
                  "jobStartDate": {
                    "title": "Jobstartdate",
                    "type": "string"
                  },
                  "recruiterTeam": {
                    "title": "Recruiterteam",
                    "type": "object"
                  },
                  "hiringManagerTeam": {
                    "title": "Hiringmanagerteam",
                    "type": "object"
                  },
                  "sourcerTeam": {
                    "title": "Sourcerteam",
                    "type": "object"
                  }
                }
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": "?.job?.jobTitle >> 'Undefined'",
            "reference": "?.job?.jobReqId",
            "location": {
              "text": "?.requisition?.location",
              "city": "?.requisition?.city",
              "geojson": {
                "city": "?.requisition?.city",
                "country": "?.requisition?.country",
                "facility": "?.requisition?.facility",
                "province": "?.requisition?.stateProvince"
              },
              "lat": null,
              "lng": null
            },
            "sections": "?.job?.jobDescription | $map({name: 'sap_description', title: 'sap_description', description: . | $sub('<[^<]+?>', '') | $sub('#13;', ' ') | $sub('&', '') | $sub('&nbsp;', '') | $sub('quo;s', '')})",
            "tags": [
              {
                "name": "sapsuccessfactors_annual_SA",
                "value": "?.requisition?.annual_SA"
              },
              {
                "name": "sapsuccessfactors_department",
                "value": "?.requisition?.department"
              },
              {
                "name": "sapsuccessfactors_function",
                "value": "?.requisition?.function"
              },
              {
                "name": "sapsuccessfactors_division",
                "value": "?.requisition?.division"
              },
              {
                "name": "sapsuccessfactors_industry",
                "value": "?.requisition?.industry"
              },
              {
                "name": "sapsuccessfactors_monthly_salary",
                "value": "?.requisition?.monthly_salary"
              },
              {
                "name": "sapsuccessfactors_otherBonus",
                "value": "?.requisition?.otherBonus"
              },
              {
                "name": "sapsuccessfactors_salaryBase",
                "value": "?.requisition?.salaryBase"
              },
              {
                "name": "sapsuccessfactors_salaryMax",
                "value": "?.requisition?.salaryMax"
              },
              {
                "name": "sapsuccessfactors_salaryMin",
                "value": "?.requisition?.salaryMin"
              },
              {
                "name": "sapsuccessfactors_jobStartDate",
                "value": "?.requisition?.jobStartDate"
              }
            ],
            "metadatas": [
              {
                "name": "sapsuccessfactors_recruiterTeam",
                "value": "?.requisition?.recruiterTeam"
              },
              {
                "name": "sapsuccessfactors_sourcerTeam",
                "value": "?.requisition?.sourcerTeam"
              },
              {
                "name": "sapsuccessfactors_hiringManagerTeam",
                "value": "?.requisition?.hiringManagerTeam"
              }
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import SAPSuccessFactors\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return SAPSuccessFactors.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_server', 'api_key', 'top', 'skip', 'filter', 'search']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return SAPSuccessFactors.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "WriteProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "SAP Profiles",
          "target_parameters": {
            "title": "WriteProfilesParameters",
            "type": "object",
            "properties": {
              "api_server": {
                "title": "Api Server",
                "description": "Server to be accessed",
                "field_type": "Other",
                "type": "string"
              },
              "api_key": {
                "title": "Api Key",
                "description": "API Key used to authenticate on the SAP API",
                "field_type": "Auth",
                "type": "string"
              }
            },
            "required": [
              "api_server",
              "api_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "SapCandidateModel",
            "type": "object",
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "cellPhone": {
                "title": "Cellphone",
                "type": "string"
              },
              "city": {
                "title": "City",
                "type": "string"
              },
              "contactEmail": {
                "title": "Contactemail",
                "type": "string"
              },
              "country": {
                "title": "Country",
                "type": "string"
              },
              "currentTitle": {
                "title": "Currenttitle",
                "type": "string"
              },
              "firstName": {
                "title": "Firstname",
                "type": "string"
              },
              "homePhone": {
                "title": "Homephone",
                "type": "string"
              },
              "lastName": {
                "title": "Lastname",
                "type": "string"
              },
              "middleName": {
                "title": "Middlename",
                "type": "string"
              },
              "primaryEmail": {
                "title": "Primaryemail",
                "type": "string"
              },
              "zip": {
                "title": "Zip",
                "type": "string"
              },
              "education": {
                "$ref": "#/definitions/Education"
              },
              "outsideWorkExperience": {
                "$ref": "#/definitions/OutsideWorkExperience"
              }
            },
            "required": [
              "primaryEmail"
            ],
            "definitions": {
              "Result": {
                "title": "Result",
                "type": "object",
                "properties": {
                  "endDate": {
                    "title": "Enddate",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "type": "string"
                  },
                  "schoolAddress": {
                    "title": "Schooladdress",
                    "type": "string"
                  },
                  "startDate": {
                    "title": "Startdate",
                    "type": "string"
                  }
                },
                "required": [
                  "school",
                  "schoolAddress"
                ]
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "results": {
                    "title": "Results",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Result"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              },
              "ResultOutsideWorkExperience": {
                "title": "ResultOutsideWorkExperience",
                "type": "object",
                "properties": {
                  "employer": {
                    "title": "Employer",
                    "type": "string"
                  },
                  "employerAddress": {
                    "title": "Employeraddress",
                    "type": "string"
                  },
                  "endDate": {
                    "title": "Enddate",
                    "type": "string"
                  },
                  "startDate": {
                    "title": "Startdate",
                    "type": "string"
                  }
                },
                "required": [
                  "employerAddress"
                ]
              },
              "OutsideWorkExperience": {
                "title": "OutsideWorkExperience",
                "type": "object",
                "properties": {
                  "results": {
                    "title": "Results",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ResultOutsideWorkExperience"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          },
          "jsonmap": {
            "address": "?.info?.location?.text",
            "cellPhone": "?.info?.phone",
            "country": "?.info?.location?.fields?.country != null ?? .info.location.fields.country | $slice(0,-1) : 'France'",
            "city": "?.info?.location?.fields?.city",
            "zip": "?.info?.location?.fields?.postcode",
            "primaryEmail": "?.info?.email",
            "firstName": "?.info?.first_name",
            "lastName": "?.info?.last_name",
            "currentTitle": "?.info?.summary",
            "education": {
              "results": "?.educations | $map({school: ?.school, schoolAddress: ?.location?.text >> 'Undefined', startDate: .date_start | $timestamp | $concat('/Date(', ., ')/'), endDate: .date_end | $timestamp | $concat('/Date(', ., ')/')})"
            },
            "outsideWorkExperience": {
              "results": "?.educations | $map({employer: ?.company, employerAddress: ?.location?.text >> 'Undefined', startDate: .date_start | $timestamp | $concat('/Date(', ., ')/'), endDate: .date_end | $timestamp | $concat('/Date(', ., ')/')})"
            }
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import SAPSuccessFactors\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return SAPSuccessFactors.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = SAPSuccessFactors.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return SAPSuccessFactors.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_server', 'api_key']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return SAPSuccessFactors.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_profile_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadProfilesActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "schedule",
          "origin": "SAP Profiles",
          "origin_parameters": {
            "title": "ReadProfilesParameters",
            "type": "object",
            "properties": {
              "api_server": {
                "title": "Api Server",
                "description": "Server to be accessed",
                "field_type": "Other",
                "type": "string"
              },
              "api_key": {
                "title": "Api Key",
                "description": "API Key used to authenticate on the SAP API",
                "field_type": "Auth",
                "type": "string"
              },
              "top": {
                "title": "Top",
                "description": "Show only the first N items value is capped at 100",
                "default": 100,
                "field_type": "Query Param",
                "type": "integer"
              },
              "skip": {
                "title": "Skip",
                "description": "Search items by search phrases",
                "field_type": "Query Param",
                "type": "integer"
              },
              "filter": {
                "title": "Filter",
                "description": "Filter items by property values",
                "field_type": "Query Param",
                "type": "string"
              },
              "search": {
                "title": "Search",
                "description": "Search items by search phrases",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_server",
              "api_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "SapCandidateModel",
            "type": "object",
            "properties": {
              "address": {
                "title": "Address",
                "type": "string"
              },
              "cellPhone": {
                "title": "Cellphone",
                "type": "string"
              },
              "city": {
                "title": "City",
                "type": "string"
              },
              "contactEmail": {
                "title": "Contactemail",
                "type": "string"
              },
              "country": {
                "title": "Country",
                "type": "string"
              },
              "currentTitle": {
                "title": "Currenttitle",
                "type": "string"
              },
              "firstName": {
                "title": "Firstname",
                "type": "string"
              },
              "homePhone": {
                "title": "Homephone",
                "type": "string"
              },
              "lastName": {
                "title": "Lastname",
                "type": "string"
              },
              "middleName": {
                "title": "Middlename",
                "type": "string"
              },
              "primaryEmail": {
                "title": "Primaryemail",
                "type": "string"
              },
              "zip": {
                "title": "Zip",
                "type": "string"
              },
              "education": {
                "$ref": "#/definitions/Education"
              },
              "outsideWorkExperience": {
                "$ref": "#/definitions/OutsideWorkExperience"
              }
            },
            "required": [
              "primaryEmail"
            ],
            "definitions": {
              "Result": {
                "title": "Result",
                "type": "object",
                "properties": {
                  "endDate": {
                    "title": "Enddate",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "type": "string"
                  },
                  "schoolAddress": {
                    "title": "Schooladdress",
                    "type": "string"
                  },
                  "startDate": {
                    "title": "Startdate",
                    "type": "string"
                  }
                },
                "required": [
                  "school",
                  "schoolAddress"
                ]
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "results": {
                    "title": "Results",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Result"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              },
              "ResultOutsideWorkExperience": {
                "title": "ResultOutsideWorkExperience",
                "type": "object",
                "properties": {
                  "employer": {
                    "title": "Employer",
                    "type": "string"
                  },
                  "employerAddress": {
                    "title": "Employeraddress",
                    "type": "string"
                  },
                  "endDate": {
                    "title": "Enddate",
                    "type": "string"
                  },
                  "startDate": {
                    "title": "Startdate",
                    "type": "string"
                  }
                },
                "required": [
                  "employerAddress"
                ]
              },
              "OutsideWorkExperience": {
                "title": "OutsideWorkExperience",
                "type": "object",
                "properties": {
                  "results": {
                    "title": "Results",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ResultOutsideWorkExperience"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_parameters": {
            "title": "WriteProfileParsingParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Other",
                "type": "string"
              },
              "only_insert": {
                "title": "Only Insert",
                "description": "When enabled the profile is written only if it doesn't exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfileParsing",
            "type": "object",
            "properties": {
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "resume": {
                "$ref": "#/definitions/ResumeToParse"
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              }
            },
            "required": [
              "created_at",
              "resume",
              "tags",
              "metadatas"
            ],
            "definitions": {
              "ResumeToParse": {
                "title": "ResumeToParse",
                "type": "object",
                "properties": {
                  "raw": {
                    "title": "Raw",
                    "type": "string",
                    "format": "binary"
                  },
                  "content_type": {
                    "title": "Content Type",
                    "type": "string"
                  }
                },
                "required": [
                  "raw",
                  "content_type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": ".candidateId",
            "created_at": ".creationDateTime | $sub('[^d]*', '') | $fromtimestamp(true)",
            "updated_at": ".lastModifiedDateTime | $sub('[^d]*', '') | $fromtimestamp(true)",
            "resume": ".resume",
            "tags": ".tags",
            "metadatas": [
              {
                "name": "'profile url'",
                "value": ".metadata.uri"
              }
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import SAPSuccessFactors\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return SAPSuccessFactors.pull_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_server', 'api_key', 'top', 'skip', 'filter', 'search']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'only_insert']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return SAPSuccessFactors.pull_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "SmartRecruiters",
      "type": "ATS",
      "subtype": "smartrecruiters",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/smartrecruiters/logo.png",
      "actions": [
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "SmartRecruiters Jobs",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "x_smart_token": {
                "title": "X Smart Token",
                "description": "X-SmartToken used to access SmartRecruiters API",
                "field_type": "Auth",
                "type": "string"
              },
              "query": {
                "title": "Query",
                "description": "Case insensitive full-text query against job title e.g. java developer",
                "field_type": "Query Param",
                "type": "string"
              },
              "updated_after": {
                "title": "Updated After",
                "description": "ISO8601-formatted time boundaries for the job update time",
                "field_type": "Query Param",
                "type": "string"
              },
              "posting_status": {
                "description": "Posting status of a job. One of ['PUBLIC', 'INTERNAL', 'NOT_PUBLISHED', 'PRIVATE']",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/JobPostingStatus"
                  }
                ]
              },
              "job_status": {
                "description": "Status of a job. One of ['CREATED', 'SOURCING', 'FILLED', 'INTERVIEW', 'OFFER', 'CANCELLED', 'ON_HOLD']",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/JobStatus"
                  }
                ]
              },
              "limit": {
                "title": "Limit",
                "description": "Number of items to pull from SmartRecruiters at a time. Not matter what value is supplied it is capped at 100",
                "default": 100,
                "field_type": "Query Param",
                "type": "integer"
              }
            },
            "required": [
              "x_smart_token"
            ],
            "additionalProperties": false,
            "definitions": {
              "JobPostingStatus": {
                "title": "JobPostingStatus",
                "description": "An enumeration.",
                "enum": [
                  "PUBLIC",
                  "INTERNAL",
                  "NOT_PUBLISHED",
                  "PRIVATE"
                ],
                "type": "string"
              },
              "JobStatus": {
                "title": "JobStatus",
                "description": "An enumeration.",
                "enum": [
                  "CREATED",
                  "SOURCING",
                  "FILLED",
                  "INTERVIEW",
                  "OFFER",
                  "CANCELLED",
                  "ON_HOLD"
                ],
                "type": "string"
              }
            }
          },
          "origin_data_schema": {
            "title": "SmartRecruitersJob",
            "type": "object",
            "properties": {
              "title": {
                "title": "Title",
                "type": "string"
              },
              "refNumber": {
                "title": "Refnumber",
                "type": "string"
              },
              "createdOn": {
                "title": "Createdon",
                "type": "string"
              },
              "updatedOn": {
                "title": "Updatedon",
                "type": "string"
              },
              "department": {
                "$ref": "#/definitions/Department"
              },
              "location": {
                "$ref": "#/definitions/JobLocation"
              },
              "status": {
                "title": "Status",
                "type": "string"
              },
              "postingStatus": {
                "title": "Postingstatus",
                "type": "string"
              },
              "targetHiringDate": {
                "title": "Targethiringdate",
                "type": "string"
              },
              "industry": {
                "$ref": "#/definitions/Industry"
              },
              "function": {
                "$ref": "#/definitions/Function"
              },
              "typeOfEmployment": {
                "$ref": "#/definitions/TypeOfEmployment"
              },
              "experienceLevel": {
                "$ref": "#/definitions/ExperienceLevel"
              },
              "eeoCategory": {
                "$ref": "#/definitions/EeoCategory"
              },
              "creator": {
                "$ref": "#/definitions/Creator"
              },
              "compensation": {
                "$ref": "#/definitions/Compensation"
              },
              "jobAd": {
                "$ref": "#/definitions/JobAd"
              }
            },
            "required": [
              "title",
              "refNumber",
              "createdOn",
              "updatedOn",
              "location",
              "jobAd"
            ],
            "definitions": {
              "Department": {
                "title": "Department",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ]
              },
              "JobLocation": {
                "title": "JobLocation",
                "type": "object",
                "properties": {
                  "country": {
                    "title": "Country",
                    "type": "string"
                  },
                  "countryCode": {
                    "title": "Countrycode",
                    "type": "string"
                  },
                  "regionCode": {
                    "title": "Regioncode",
                    "type": "string"
                  },
                  "region": {
                    "title": "Region",
                    "type": "string"
                  },
                  "city": {
                    "title": "City",
                    "type": "string"
                  },
                  "address": {
                    "title": "Address",
                    "type": "string"
                  },
                  "longitude": {
                    "title": "Longitude",
                    "type": "string"
                  },
                  "latitude": {
                    "title": "Latitude",
                    "type": "string"
                  },
                  "remote": {
                    "title": "Remote",
                    "type": "boolean"
                  },
                  "manual": {
                    "title": "Manual",
                    "type": "boolean"
                  }
                },
                "required": [
                  "city"
                ]
              },
              "Industry": {
                "title": "Industry",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ]
              },
              "Function": {
                "title": "Function",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ]
              },
              "TypeOfEmployment": {
                "title": "TypeOfEmployment",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ]
              },
              "ExperienceLevel": {
                "title": "ExperienceLevel",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "string"
                  }
                }
              },
              "EeoCategory": {
                "title": "EeoCategory",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ]
              },
              "Creator": {
                "title": "Creator",
                "type": "object",
                "properties": {
                  "firstName": {
                    "title": "Firstname",
                    "type": "string"
                  },
                  "lastName": {
                    "title": "Lastname",
                    "type": "string"
                  }
                },
                "required": [
                  "firstName",
                  "lastName"
                ]
              },
              "Compensation": {
                "title": "Compensation",
                "type": "object",
                "properties": {
                  "min": {
                    "title": "Min",
                    "type": "integer"
                  },
                  "max": {
                    "title": "Max",
                    "type": "integer"
                  },
                  "currency": {
                    "title": "Currency",
                    "type": "string"
                  }
                },
                "required": [
                  "min",
                  "max",
                  "currency"
                ]
              },
              "CompanyDescription": {
                "title": "CompanyDescription",
                "type": "object",
                "properties": {
                  "title": {
                    "title": "Title",
                    "type": "string"
                  },
                  "text": {
                    "title": "Text",
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "text"
                ]
              },
              "JobDescription": {
                "title": "JobDescription",
                "type": "object",
                "properties": {
                  "title": {
                    "title": "Title",
                    "type": "string"
                  },
                  "text": {
                    "title": "Text",
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "text"
                ]
              },
              "Qualifications": {
                "title": "Qualifications",
                "type": "object",
                "properties": {
                  "title": {
                    "title": "Title",
                    "type": "string"
                  },
                  "text": {
                    "title": "Text",
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "text"
                ]
              },
              "AdditionalInformation": {
                "title": "AdditionalInformation",
                "type": "object",
                "properties": {
                  "title": {
                    "title": "Title",
                    "type": "string"
                  },
                  "text": {
                    "title": "Text",
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "text"
                ]
              },
              "Sections": {
                "title": "Sections",
                "type": "object",
                "properties": {
                  "companyDescription": {
                    "$ref": "#/definitions/CompanyDescription"
                  },
                  "jobDescription": {
                    "$ref": "#/definitions/JobDescription"
                  },
                  "qualifications": {
                    "$ref": "#/definitions/Qualifications"
                  },
                  "additionalInformation": {
                    "$ref": "#/definitions/AdditionalInformation"
                  }
                },
                "required": [
                  "companyDescription",
                  "jobDescription",
                  "qualifications",
                  "additionalInformation"
                ]
              },
              "JobAd": {
                "title": "JobAd",
                "type": "object",
                "properties": {
                  "sections": {
                    "$ref": "#/definitions/Sections"
                  }
                },
                "required": [
                  "sections"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": ".title || 'Undefined'",
            "reference": "?.refNumber",
            "created_at": "?.createdon",
            "updated_at": "?.updatedon",
            "url": null,
            "summary": null,
            "location": {
              "lat": ".location.latitude != null ?? .location.latitude | $float : null",
              "lng": ".location.longitude != null ?? .location.longitude | $float : null",
              "text": ".location ?? '' : $concat(.location?.country >> '', ' ', .location?.region >> '', ' ', .location?.city >> '', ' ', .location?.address >> '') | $strip"
            },
            "sections": [
              ".jobAd.sections.companyDescription != null ?? .jobAd.sections.companyDescription | {name: 'smartrecruiters_jobAd-sections-companyDescription', title: ?.title, description: ?.text}",
              ".jobAd.sections.jobDescription != null ?? .jobAd.sections.jobDescription | {name: 'smartrecruiters_jobAd-sections-jobDescription', title: ?.title, description: ?.text}",
              ".jobAd.sections.qualifications != null ?? .jobAd.sections.qualifications | {name: 'smartrecruiters_jobAd-sections-qualifications', title: ?.title, description: ?.text}",
              ".jobAd.sections.additionalInformation != null ?? .jobAd.sections.additionalInformation | {name: 'smartrecruiters_jobAd-sections-additionalInformation', title: ?.title, description: ?.text}"
            ],
            "tags": [
              {
                "name": "smartrecruiters_status",
                "value": "?.status"
              },
              {
                "name": "smartrecruiters_postingStatus",
                "value": "?.postingStatus"
              },
              {
                "name": "smartrecruiters_id",
                "value": "?.id"
              },
              {
                "name": "smartrecruiters_experienceLevel-id",
                "value": "?.experienceLevel?.id"
              },
              {
                "name": "smartrecruiters_typeOfEmployment-id",
                "value": "?.typeOfEmployment?.id"
              },
              {
                "name": "smartrecruiters_compensation-min",
                "value": "?.compensation?.min"
              },
              {
                "name": "smartrecruiters_compensation-max",
                "value": "?.compensation?.max"
              },
              {
                "name": "smartrecruiters_compensation-currency",
                "value": "?.compensation?.currency"
              },
              {
                "name": "smartrecruiters_industry-id",
                "value": "?.industry?.id"
              },
              {
                "name": "smartrecruiters_creator-firstName",
                "value": "?.firstName"
              },
              {
                "name": "smartrecruiters_creator-lastName",
                "value": "?.lastName"
              },
              {
                "name": "smartrecruiters_function-id",
                "value": "?.function?.id"
              },
              {
                "name": "smartrecruiters_department-id",
                "value": "?.department?.id"
              },
              {
                "name": "smartrecruiters_location-manual",
                "value": "?.location?.manual"
              },
              {
                "name": "smartrecruiters_location-remote",
                "value": "?.location?.remote"
              },
              {
                "name": "smartrecruiters_eeoCategory-id",
                "value": "?.eeoCategory?.id"
              },
              {
                "name": "smartrecruiters_targetHiringDate",
                "value": "?.targetHiringDate"
              }
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import SmartRecruiters\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return SmartRecruiters.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['x_smart_token', 'query', 'updated_after', 'posting_status', 'job_status', 'limit']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return SmartRecruiters.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "WriteProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "SmartRecruiters Profiles",
          "target_parameters": {
            "title": "WriteProfilesParameters",
            "type": "object",
            "properties": {
              "x_smart_token": {
                "title": "X Smart Token",
                "description": "X-SmartToken used to access SmartRecruiters API",
                "field_type": "Auth",
                "type": "string"
              },
              "job_id": {
                "title": "Job Id",
                "description": "Id of a Job to which you want to assign a candidates when it\u2019s created. Profiles are sent to this URL `https://api.smartrecruiters.com/jobs/{job_id}/candidates` ",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "x_smart_token",
              "job_id"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "SmartRecruitersProfile",
            "type": "object",
            "properties": {
              "firstName": {
                "title": "Firstname",
                "type": "string"
              },
              "lastName": {
                "title": "Lastname",
                "type": "string"
              },
              "email": {
                "title": "Email",
                "type": "string"
              },
              "phoneNumber": {
                "title": "Phonenumber",
                "type": "string"
              },
              "location": {
                "$ref": "#/definitions/ProfileLocation"
              },
              "web": {
                "$ref": "#/definitions/Web"
              },
              "tags": {
                "title": "Tags",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "education": {
                "title": "Education",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EducationItem"
                }
              },
              "experience": {
                "title": "Experience",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExperienceItem"
                }
              }
            },
            "required": [
              "firstName",
              "lastName",
              "email",
              "phoneNumber",
              "location",
              "web",
              "tags",
              "education",
              "experience"
            ],
            "definitions": {
              "ProfileLocation": {
                "title": "ProfileLocation",
                "type": "object",
                "properties": {
                  "country": {
                    "title": "Country",
                    "type": "string"
                  },
                  "countryCode": {
                    "title": "Countrycode",
                    "type": "string"
                  },
                  "regionCode": {
                    "title": "Regioncode",
                    "type": "string"
                  },
                  "region": {
                    "title": "Region",
                    "type": "string"
                  },
                  "city": {
                    "title": "City",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "type": "integer"
                  },
                  "lng": {
                    "title": "Lng",
                    "type": "integer"
                  }
                },
                "required": [
                  "country",
                  "countryCode",
                  "regionCode",
                  "region",
                  "city",
                  "lat",
                  "lng"
                ]
              },
              "Web": {
                "title": "Web",
                "type": "object",
                "properties": {
                  "skype": {
                    "title": "Skype",
                    "type": "string"
                  },
                  "linkedin": {
                    "title": "Linkedin",
                    "type": "string"
                  },
                  "facebook": {
                    "title": "Facebook",
                    "type": "string"
                  },
                  "twitter": {
                    "title": "Twitter",
                    "type": "string"
                  },
                  "website": {
                    "title": "Website",
                    "type": "string"
                  }
                },
                "required": [
                  "skype",
                  "linkedin",
                  "facebook",
                  "twitter",
                  "website"
                ]
              },
              "EducationItem": {
                "title": "EducationItem",
                "type": "object",
                "properties": {
                  "institution": {
                    "title": "Institution",
                    "type": "string"
                  },
                  "degree": {
                    "title": "Degree",
                    "type": "string"
                  },
                  "major": {
                    "title": "Major",
                    "type": "string"
                  },
                  "current": {
                    "title": "Current",
                    "type": "boolean"
                  },
                  "location": {
                    "title": "Location",
                    "type": "string"
                  },
                  "startDate": {
                    "title": "Startdate",
                    "type": "string"
                  },
                  "endDate": {
                    "title": "Enddate",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "type": "string"
                  }
                },
                "required": [
                  "institution",
                  "degree",
                  "major",
                  "current",
                  "location",
                  "startDate",
                  "endDate",
                  "description"
                ]
              },
              "ExperienceItem": {
                "title": "ExperienceItem",
                "type": "object",
                "properties": {
                  "title": {
                    "title": "Title",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "type": "string"
                  },
                  "current": {
                    "title": "Current",
                    "type": "boolean"
                  },
                  "startDate": {
                    "title": "Startdate",
                    "type": "string"
                  },
                  "endDate": {
                    "title": "Enddate",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "company",
                  "current",
                  "startDate",
                  "endDate",
                  "location",
                  "description"
                ]
              }
            }
          },
          "jsonmap": {
            "firstName": ".info.first_name",
            "lastName": ".info.last_name",
            "email": ".info.email",
            "phoneNumber": ".info.phone",
            "location": ".info.location | {lat: .lat >> 0, lng: .lng >> 0, city: .fields >> {} | ?.city >> Undefined, country: .fields >> {} | ?.country >> Undefined, region: .fields >> {} | ?.region >> Undefined }",
            "experiences": ".experiences | $map({title: .title >> Undefined, company: .company >> Undefined, description: .description, current: false, startDate: .date_start >> XXXX | $split(T) | .[0], endDate: .date_end >> XXXX | $split(T) | .[0], location: .location.text >> Undefined })",
            "educations": ".educations | $map({institution: .school >> Undefined, degree: .title >> Undefined, major: Undefined, description: .description, current: false, startDate: .date_start >> XXXX | $split(T) | .[0], endDate: .date_end >> XXXX | $split(T) | .[0], location: .location.text >> Undefined })",
            "web": "{'type': 'url'}",
            "tags": "[]",
            "consent": true,
            "attachments": "?.attachments >> []"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import SmartRecruiters\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return SmartRecruiters.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = SmartRecruiters.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return SmartRecruiters.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['x_smart_token', 'job_id']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return SmartRecruiters.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Softgarden",
      "type": "ATS",
      "subtype": "softgarden",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/softgarden/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Staffme",
      "type": "JOBBOARD",
      "subtype": "staffme",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/staffme/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Staffsante",
      "type": "JOBBOARD",
      "subtype": "staffsante",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/staffsante/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Taleez",
      "type": "ATS",
      "subtype": "taleez",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/taleez/logo.png",
      "actions": [
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "ReadJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "Taleez Profiles Warehouse",
          "target_parameters": {
            "title": "WriteProfilesParameters",
            "type": "object",
            "properties": {
              "accept": {
                "title": "Accept",
                "default": "application/json;charset=UTF-8",
                "const": "application/json;charset=UTF-8",
                "field_type": "Query Param",
                "type": "string"
              },
              "x_taleez_api_secret": {
                "title": "X Taleez Api Secret",
                "description": "Client Secret id used to access Taleez API",
                "field_type": "Auth",
                "type": "string"
              },
              "content_type": {
                "title": "Content Type",
                "description": "Content type",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "x_taleez_api_secret",
              "content_type"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "Candidate",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "type": "integer"
              },
              "firstName": {
                "title": "Firstname",
                "type": "string"
              },
              "lastName": {
                "title": "Lastname",
                "type": "string"
              },
              "mail": {
                "title": "Mail",
                "type": "string"
              },
              "initialReferrer": {
                "title": "Initialreferrer",
                "type": "string"
              },
              "lang": {
                "title": "Lang",
                "type": "string"
              },
              "socialLinks": {
                "title": "Sociallinks",
                "type": "object"
              },
              "properties": {
                "title": "Properties",
                "type": "array",
                "items": {}
              },
              "jobs": {
                "title": "Jobs",
                "type": "array",
                "items": {}
              }
            },
            "required": [
              "id",
              "firstName",
              "lastName",
              "mail",
              "initialReferrer",
              "lang",
              "socialLinks"
            ]
          },
          "jsonmap": {
            "candidate": {
              "firstName": ".info.first_name",
              "lastName": ".info.last_name",
              "mail": ".info.email",
              "initialReferrer": "HrFlow",
              "lang": ".text_language | $upper | $str",
              "social_links": {
                "linkedin": ".info.urls | .type == linkedin ?? .url",
                "viadeo": ".info.urls | .type == viadeo ?? .url",
                "twitter": ".info.urls | .type == twitter ?? .url",
                "github": ".info.urls | .type == github ?? .url",
                "behance": ".info.urls | .type == behance ?? .url",
                "other": ".info.urls | .type == other ?? .url",
                "website": ".info.urls | .type == website ?? .url",
                "dribble": ".info.urls | .type == dribble ?? .url"
              }
            },
            "CV": ".attachments | .type == resume ?? ?.public_url : null",
            "properties": "[{id: 51940, value: .source.name}, {id: 56260, value: .skills | $map(.name)| $join(', ')}, {id: 56261, value: .languages | $map(.name)| $join(', ')}, {id: 56262, value: .courses | $map(.name)| $join(', ')}, {id: 56263, value: .experiences ?? .experiences[0].title}, {id: 59898, value: .educations ?? .educations[0].school}]"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Taleez\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Taleez.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Taleez.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Taleez.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['accept', 'x_taleez_api_secret', 'content_type']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Taleez.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "PullJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "Taleez Jobs Warehouse",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "x_taleez_api_secret": {
                "title": "X Taleez Api Secret",
                "description": "X-taleez-api-secret used to access Taleez API",
                "field_type": "Auth",
                "type": "string"
              },
              "with_details": {
                "title": "With Details",
                "description": "xxx",
                "field_type": "Query Param",
                "type": "boolean"
              },
              "job_status": {
                "description": "Posting status of a job. One of ['PUBLISHED']",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/JobStatus"
                  }
                ]
              }
            },
            "required": [
              "x_taleez_api_secret",
              "with_details"
            ],
            "additionalProperties": false,
            "definitions": {
              "JobStatus": {
                "title": "JobStatus",
                "description": "An enumeration.",
                "enum": [
                  "PUBLISHED"
                ],
                "type": "string"
              }
            }
          },
          "origin_data_schema": {
            "title": "Job",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "type": "integer"
              },
              "token": {
                "title": "Token",
                "type": "string"
              },
              "dateCreation": {
                "title": "Datecreation",
                "type": "integer"
              },
              "dateFirstPublish": {
                "title": "Datefirstpublish",
                "type": "integer"
              },
              "dateLastPublish": {
                "title": "Datelastpublish",
                "type": "integer"
              },
              "label": {
                "title": "Label",
                "type": "string"
              },
              "currentStatus": {
                "title": "Currentstatus",
                "type": "string"
              },
              "contract": {
                "title": "Contract",
                "type": "string"
              },
              "contractLength": {
                "title": "Contractlength",
                "type": "integer"
              },
              "fullTime": {
                "title": "Fulltime",
                "type": "boolean"
              },
              "workHours": {
                "title": "Workhours",
                "type": "integer"
              },
              "remote": {
                "title": "Remote",
                "type": "boolean"
              },
              "country": {
                "title": "Country",
                "type": "string"
              },
              "city": {
                "title": "City",
                "type": "string"
              },
              "postalCode": {
                "title": "Postalcode",
                "type": "string"
              },
              "lat": {
                "title": "Lat",
                "type": "string"
              },
              "lng": {
                "title": "Lng",
                "type": "string"
              },
              "recruiterId": {
                "title": "Recruiterid",
                "type": "integer"
              },
              "who": {
                "title": "Who",
                "type": "string"
              },
              "logo": {
                "title": "Logo",
                "type": "string"
              },
              "banner": {
                "title": "Banner",
                "type": "string"
              },
              "companyLabel": {
                "title": "Companylabel",
                "type": "string"
              },
              "tags": {
                "title": "Tags",
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "url": {
                "title": "Url",
                "type": "string"
              },
              "urlApplying": {
                "title": "Urlapplying",
                "type": "string"
              },
              "jobDescription": {
                "title": "Jobdescription",
                "type": "string"
              },
              "profileDescription": {
                "title": "Profiledescription",
                "type": "string"
              },
              "companyDescription": {
                "title": "Companydescription",
                "type": "string"
              },
              "properties": {
                "title": "Properties",
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "public": {
                "title": "Public",
                "type": "boolean"
              }
            },
            "required": [
              "id",
              "token",
              "dateCreation",
              "dateFirstPublish",
              "dateLastPublish",
              "label",
              "currentStatus",
              "contract",
              "contractLength",
              "fullTime",
              "workHours",
              "remote",
              "country",
              "city",
              "postalCode",
              "lat",
              "lng",
              "recruiterId",
              "who",
              "logo",
              "banner",
              "companyLabel",
              "tags",
              "url",
              "urlApplying",
              "jobDescription",
              "profileDescription",
              "companyDescription",
              "properties",
              "public"
            ]
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": "?.label >> Undefined",
            "reference": "?.id | $string",
            "created_at": ".dateCreation | $fromtimestamp",
            "updated_at": ".dateLastPublish | $fromtimestamp",
            "location": {
              "lat": "?.lat != null ?? .lat | $float: null",
              "lng": "?.lng != null ?? .lng | $float: null",
              "text": "$concat(?.postalCode>> '', ' ', ?.city>> '', ' ', ?.country >> '') | $strip"
            },
            "url": "?.url",
            "summary": null,
            "sections": [
              {
                "name": "taleez-sections-jobDescription",
                "title": "jobDescription",
                "description": "?.jobDescription"
              },
              {
                "name": "taleez-sections-profileDescription",
                "title": "profileDescription",
                "description": "?.profileDescription"
              },
              {
                "name": "taleez-sections-companyDescription",
                "title": "companyDescription",
                "description": "?.companyDescription"
              }
            ],
            "tags": "$merge(?.tags == null ?? [] : .tags | $map({name: taleez_tag, value: .}), [{name: taleez_contract, value: ?.contract},{name: taleez_profile, value: ?.profile}, {name: taleez_urlApplying, value: ?.urlApplying},  {name: taleez_currentStatus, value: ?.currentStatus}])"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Taleez\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Taleez.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['x_taleez_api_secret', 'with_details', 'job_status']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Taleez.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Talent Clue",
      "type": "ATS",
      "subtype": "talentclue",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/talentclue/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "TalentAdore",
      "type": "ATS",
      "subtype": "talentadore",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/talentadore/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Talentlink",
      "type": "ATS",
      "subtype": "talentlink",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/talentlink/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "TalentLyft",
      "type": "ATS",
      "subtype": "talentlyft",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/talentlyft/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "TalentReef",
      "type": "ATS",
      "subtype": "talentreef",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/talentreef/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "TalentSoft",
      "type": "HCM",
      "subtype": "talentsoft",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/talentsoft/logo.jpeg",
      "actions": [
        {
          "name": "applicant_new",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ApplicantNewActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "TalentSoft Profiles",
          "origin_parameters": {
            "title": "FixedReadParameters",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client Id",
                "description": "Client ID used to access TalentSoft API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client Secret used to access TalentSoft API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_url": {
                "title": "Client Url",
                "description": "URL of TalentSoft client integration",
                "field_type": "Other",
                "type": "string"
              },
              "filter": {
                "title": "Filter",
                "description": "Filter to apply when reading profiles. See documentation at https://developers.cegid.com/api-details#api=cegid-talentsoft-recruiting-matchingindexation&operation=api-exports-v1-candidates-get . Examples : By id Single Item 'id::_TS-00001'; By id Multiple Items 'id::_TS-00001,_TS-00002'; By email 'email::john.doe@company.corp'; By updateDate updated before the 10th of June 2019 'updateDate:lt:2019-06-10'; By chronoNumber greater than 108921  'chronoNumber:gt:108921'",
                "field_type": "Query Param",
                "type": "string"
              },
              "fileId": {
                "title": "Fileid",
                "description": "If provided only the attachment matching with fileId is left in 'attachments'. If not found all attachments are left.",
                "field_type": "Query Param",
                "type": "string"
              },
              "only_resume": {
                "title": "Only Resume",
                "description": "If enabled only resume attachments are returned",
                "default": true,
                "const": true,
                "field_type": "Query Param",
                "type": "boolean"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "client_url"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_parameters": {
            "title": "FixedWriteParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Other",
                "type": "string"
              },
              "only_insert": {
                "title": "Only Insert",
                "description": "When enabled the profile is written only if it doesn't exist in the source",
                "default": true,
                "const": true,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfileParsing",
            "type": "object",
            "properties": {
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "resume": {
                "$ref": "#/definitions/ResumeToParse"
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              }
            },
            "required": [
              "created_at",
              "resume",
              "tags",
              "metadatas"
            ],
            "definitions": {
              "ResumeToParse": {
                "title": "ResumeToParse",
                "type": "object",
                "properties": {
                  "raw": {
                    "title": "Raw",
                    "type": "string",
                    "format": "binary"
                  },
                  "content_type": {
                    "title": "Content Type",
                    "type": "string"
                  }
                },
                "required": [
                  "raw",
                  "content_type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": ".candidateDetail.id",
            "created_at": ".candidateDetail.creationDate",
            "updated_at": "$now('iso')",
            "resume": ".attachments | .isResume ?? {raw: .raw, content_type: .mimeType} : null ",
            "tags": "$merge([{ 'name': 'talentsoft-isEmployee', 'value': '.isEmployee'},{ 'name': 'talentsoft-isInProgress', 'value': '.isInProgress'},{ 'name': 'talentsoft-residentCountry-id', 'value': '.candidateDetail.personalInformation.residentCountry?.id'},{ 'name': 'talentsoft-contractType-id', 'value': '.candidateDetail.positionSought.contractType.id'},{ 'name': 'talentsoft-profileStatus-id', 'value': '.candidateDetail.positionSought.jobPreferencesCustomFields.customCodeTable1.id'},{ 'name': 'talentsoft-experienceLevel-id', 'value': '.candidateDetail.globalExperience.globalExperienceLevel.id'},{ 'name': 'talentsoft-profile-id', 'value': '.candidateDetail.positionSought.primaryProfile.id'},{ 'name': 'talentsofteducationLevel-id', 'value': '.candidateDetail.educations.educationLevel.id'}], .candidateDetail.educations | $map(.educationLevel != null ?? {name: 'talentsofteducationLevel-id', value: .educationLevel.id} ), .applications | $map({name: 'talentsoft-application-vacancyReference', value: .vacancyReference}))",
            "metadatas": [
              {
                "name": "profile_uid",
                "value": ".candidateDetail.id"
              },
              ".attachments | .isResume ?? {name: 'filename', value: .filename}"
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import TalentSoft\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return TalentSoft.applicant_new(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = TalentSoft.model.action_by_name(\"applicant_new\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return TalentSoft.applicant_new(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['client_id', 'client_secret', 'client_url', 'filter', 'fileId', 'only_resume']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'only_insert']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return TalentSoft.applicant_new(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "applicant_resume_update",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ApplicantResumeUpdateActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "TalentSoft Profiles",
          "origin_parameters": {
            "title": "FixedReadParameters",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client Id",
                "description": "Client ID used to access TalentSoft API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client Secret used to access TalentSoft API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_url": {
                "title": "Client Url",
                "description": "URL of TalentSoft client integration",
                "field_type": "Other",
                "type": "string"
              },
              "filter": {
                "title": "Filter",
                "description": "Filter to apply when reading profiles. See documentation at https://developers.cegid.com/api-details#api=cegid-talentsoft-recruiting-matchingindexation&operation=api-exports-v1-candidates-get . Examples : By id Single Item 'id::_TS-00001'; By id Multiple Items 'id::_TS-00001,_TS-00002'; By email 'email::john.doe@company.corp'; By updateDate updated before the 10th of June 2019 'updateDate:lt:2019-06-10'; By chronoNumber greater than 108921  'chronoNumber:gt:108921'",
                "field_type": "Query Param",
                "type": "string"
              },
              "fileId": {
                "title": "Fileid",
                "description": "If provided only the attachment matching with fileId is left in 'attachments'. If not found all attachments are left.",
                "field_type": "Query Param",
                "type": "string"
              },
              "only_resume": {
                "title": "Only Resume",
                "description": "If enabled only resume attachments are returned",
                "default": true,
                "const": true,
                "field_type": "Query Param",
                "type": "boolean"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "client_url"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_parameters": {
            "title": "FixedWriteParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Other",
                "type": "string"
              },
              "only_insert": {
                "title": "Only Insert",
                "description": "When enabled the profile is written only if it doesn't exist in the source",
                "default": false,
                "const": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfileParsing",
            "type": "object",
            "properties": {
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "resume": {
                "$ref": "#/definitions/ResumeToParse"
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              }
            },
            "required": [
              "created_at",
              "resume",
              "tags",
              "metadatas"
            ],
            "definitions": {
              "ResumeToParse": {
                "title": "ResumeToParse",
                "type": "object",
                "properties": {
                  "raw": {
                    "title": "Raw",
                    "type": "string",
                    "format": "binary"
                  },
                  "content_type": {
                    "title": "Content Type",
                    "type": "string"
                  }
                },
                "required": [
                  "raw",
                  "content_type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": ".candidateDetail.id",
            "created_at": ".candidateDetail.creationDate",
            "updated_at": "$now('iso')",
            "resume": ".attachments | .isResume ?? {raw: .raw, content_type: .mimeType} : null ",
            "tags": "$merge([{ 'name': 'talentsoft-isEmployee', 'value': '.isEmployee'},{ 'name': 'talentsoft-isInProgress', 'value': '.isInProgress'},{ 'name': 'talentsoft-residentCountry-id', 'value': '.candidateDetail.personalInformation.residentCountry?.id'},{ 'name': 'talentsoft-contractType-id', 'value': '.candidateDetail.positionSought.contractType.id'},{ 'name': 'talentsoft-profileStatus-id', 'value': '.candidateDetail.positionSought.jobPreferencesCustomFields.customCodeTable1.id'},{ 'name': 'talentsoft-experienceLevel-id', 'value': '.candidateDetail.globalExperience.globalExperienceLevel.id'},{ 'name': 'talentsoft-profile-id', 'value': '.candidateDetail.positionSought.primaryProfile.id'},{ 'name': 'talentsofteducationLevel-id', 'value': '.candidateDetail.educations.educationLevel.id'}], .candidateDetail.educations | $map(.educationLevel != null ?? {name: 'talentsofteducationLevel-id', value: .educationLevel.id} ), .applications | $map({name: 'talentsoft-application-vacancyReference', value: .vacancyReference}))",
            "metadatas": [
              {
                "name": "profile_uid",
                "value": ".candidateDetail.id"
              },
              ".attachments | .isResume ?? {name: 'filename', value: .filename}"
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import TalentSoft\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return TalentSoft.applicant_resume_update(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = TalentSoft.model.action_by_name(\"applicant_resume_update\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return TalentSoft.applicant_resume_update(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['client_id', 'client_secret', 'client_url', 'filter', 'fileId', 'only_resume']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'only_insert']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return TalentSoft.applicant_resume_update(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "applicant_update",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ApplicantUpdateActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "TalentSoft Profiles",
          "origin_parameters": {
            "title": "ReadProfilesParameters",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client Id",
                "description": "Client ID used to access TalentSoft API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client Secret used to access TalentSoft API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_url": {
                "title": "Client Url",
                "description": "URL of TalentSoft client integration",
                "field_type": "Other",
                "type": "string"
              },
              "filter": {
                "title": "Filter",
                "description": "Filter to apply when reading profiles. See documentation at https://developers.cegid.com/api-details#api=cegid-talentsoft-recruiting-matchingindexation&operation=api-exports-v1-candidates-get . Examples : By id Single Item 'id::_TS-00001'; By id Multiple Items 'id::_TS-00001,_TS-00002'; By email 'email::john.doe@company.corp'; By updateDate updated before the 10th of June 2019 'updateDate:lt:2019-06-10'; By chronoNumber greater than 108921  'chronoNumber:gt:108921'",
                "field_type": "Query Param",
                "type": "string"
              },
              "fileId": {
                "title": "Fileid",
                "description": "If provided only the attachment matching with fileId is left in 'attachments'. If not found all attachments are left.",
                "field_type": "Query Param",
                "type": "string"
              },
              "only_resume": {
                "title": "Only Resume",
                "description": "If enabled only resume attachments are returned",
                "default": false,
                "field_type": "Query Param",
                "type": "boolean"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "client_url"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_parameters": {
            "title": "FixedWriteParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "edit": {
                "title": "Edit",
                "description": "When enabled the profile must exist in the source",
                "default": true,
                "const": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "only_edit_fields": {
                "title": "Only Edit Fields",
                "description": "List of attributes to use for the edit operation e.g. ['tags', 'metadatas']",
                "default": [
                  "tags"
                ],
                "const": [
                  "tags"
                ],
                "field_type": "Other",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": ".candidateDetail.id",
            "created_at": ".candidateDetail.creationDate",
            "updated_at": "$now('iso')",
            "resume": ".attachments | .isResume ?? {raw: .raw, content_type: .mimeType} : null ",
            "tags": "$merge([{ 'name': 'talentsoft-isEmployee', 'value': '.isEmployee'},{ 'name': 'talentsoft-isInProgress', 'value': '.isInProgress'},{ 'name': 'talentsoft-residentCountry-id', 'value': '.candidateDetail.personalInformation.residentCountry?.id'},{ 'name': 'talentsoft-contractType-id', 'value': '.candidateDetail.positionSought.contractType.id'},{ 'name': 'talentsoft-profileStatus-id', 'value': '.candidateDetail.positionSought.jobPreferencesCustomFields.customCodeTable1.id'},{ 'name': 'talentsoft-experienceLevel-id', 'value': '.candidateDetail.globalExperience.globalExperienceLevel.id'},{ 'name': 'talentsoft-profile-id', 'value': '.candidateDetail.positionSought.primaryProfile.id'},{ 'name': 'talentsofteducationLevel-id', 'value': '.candidateDetail.educations.educationLevel.id'}], .candidateDetail.educations | $map(.educationLevel != null ?? {name: 'talentsofteducationLevel-id', value: .educationLevel.id} ), .applications | $map({name: 'talentsoft-application-vacancyReference', value: .vacancyReference}))",
            "metadatas": [
              {
                "name": "profile_uid",
                "value": ".candidateDetail.id"
              },
              ".attachments | .isResume ?? {name: 'filename', value: .filename}"
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import TalentSoft\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return TalentSoft.applicant_update(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = TalentSoft.model.action_by_name(\"applicant_update\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return TalentSoft.applicant_update(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['client_id', 'client_secret', 'client_url', 'filter', 'fileId', 'only_resume']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'edit', 'only_edit_fields']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return TalentSoft.applicant_update(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_profile_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "PullTalentSoftProfilesActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "schedule",
          "origin": "TalentSoft Profiles",
          "origin_parameters": {
            "title": "FixedReadParameters",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client Id",
                "description": "Client ID used to access TalentSoft API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client Secret used to access TalentSoft API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_url": {
                "title": "Client Url",
                "description": "URL of TalentSoft client integration",
                "field_type": "Other",
                "type": "string"
              },
              "filter": {
                "title": "Filter",
                "description": "Filter to apply when reading profiles. See documentation at https://developers.cegid.com/api-details#api=cegid-talentsoft-recruiting-matchingindexation&operation=api-exports-v1-candidates-get . Examples : By id Single Item 'id::_TS-00001'; By id Multiple Items 'id::_TS-00001,_TS-00002'; By email 'email::john.doe@company.corp'; By updateDate updated before the 10th of June 2019 'updateDate:lt:2019-06-10'; By chronoNumber greater than 108921  'chronoNumber:gt:108921'",
                "field_type": "Query Param",
                "type": "string"
              },
              "fileId": {
                "title": "Fileid",
                "description": "If provided only the attachment matching with fileId is left in 'attachments'. If not found all attachments are left.",
                "field_type": "Query Param",
                "type": "string"
              },
              "only_resume": {
                "title": "Only Resume",
                "description": "If enabled only resume attachments are returned",
                "default": true,
                "const": true,
                "field_type": "Query Param",
                "type": "boolean"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "client_url"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_parameters": {
            "title": "WriteProfileParsingParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Other",
                "type": "string"
              },
              "only_insert": {
                "title": "Only Insert",
                "description": "When enabled the profile is written only if it doesn't exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfileParsing",
            "type": "object",
            "properties": {
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "resume": {
                "$ref": "#/definitions/ResumeToParse"
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              }
            },
            "required": [
              "created_at",
              "resume",
              "tags",
              "metadatas"
            ],
            "definitions": {
              "ResumeToParse": {
                "title": "ResumeToParse",
                "type": "object",
                "properties": {
                  "raw": {
                    "title": "Raw",
                    "type": "string",
                    "format": "binary"
                  },
                  "content_type": {
                    "title": "Content Type",
                    "type": "string"
                  }
                },
                "required": [
                  "raw",
                  "content_type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": ".candidateDetail.id",
            "created_at": ".candidateDetail.creationDate",
            "updated_at": "$now('iso')",
            "resume": ".attachments | .isResume ?? {raw: .raw, content_type: .mimeType} : null ",
            "tags": "$merge([{ 'name': 'talentsoft-isEmployee', 'value': '.isEmployee'},{ 'name': 'talentsoft-isInProgress', 'value': '.isInProgress'},{ 'name': 'talentsoft-residentCountry-id', 'value': '.candidateDetail.personalInformation.residentCountry?.id'},{ 'name': 'talentsoft-contractType-id', 'value': '.candidateDetail.positionSought.contractType.id'},{ 'name': 'talentsoft-profileStatus-id', 'value': '.candidateDetail.positionSought.jobPreferencesCustomFields.customCodeTable1.id'},{ 'name': 'talentsoft-experienceLevel-id', 'value': '.candidateDetail.globalExperience.globalExperienceLevel.id'},{ 'name': 'talentsoft-profile-id', 'value': '.candidateDetail.positionSought.primaryProfile.id'},{ 'name': 'talentsofteducationLevel-id', 'value': '.candidateDetail.educations.educationLevel.id'}], .candidateDetail.educations | $map(.educationLevel != null ?? {name: 'talentsofteducationLevel-id', value: .educationLevel.id} ), .applications | $map({name: 'talentsoft-application-vacancyReference', value: .vacancyReference}))",
            "metadatas": [
              {
                "name": "profile_uid",
                "value": ".candidateDetail.id"
              },
              ".attachments | .isResume ?? {name: 'filename', value: .filename}"
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import TalentSoft\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return TalentSoft.pull_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['client_id', 'client_secret', 'client_url', 'filter', 'fileId', 'only_resume']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'only_insert']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return TalentSoft.pull_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "PullTalentSoftProfilesActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "TalentSoft Jobs",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client Id",
                "description": "Client ID used to access TalentSoft API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client Secret used to access TalentSoft API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_url": {
                "title": "Client Url",
                "description": "URL of TalentSoft client integration",
                "field_type": "Other",
                "type": "string"
              },
              "q": {
                "title": "Q",
                "description": "Query search to get vacancies",
                "field_type": "Query Param",
                "type": "string"
              },
              "filter": {
                "title": "Filter",
                "description": "Filter to apply when reading vacancies. See documentation at https://developers.cegid.com/api-details#api=cegid-talentsoft-recruiting-matchingindexation&operation=api-exports-v1-vacancies-get . . You can filter by **chronoNumber**, **updateDate**, **reference** **vacancyStatus**, **clientVacancyStatus**, **publicationMedia**  **publishedOnTheMedia**. Examples : By reference Single Item 'reference::2019-01'; By reference Multiple Items 'reference::2019-01,2019-02,2019-03';  By updateDate updated before the 10th of June 2019 'updateDate:lt:2019-06-10'; By chronoNumber greater than 108921  'chronoNumber:gt:108921' . ",
                "field_type": "Query Param",
                "type": "string"
              },
              "max_read": {
                "title": "Max Read",
                "description": "The maximum number of jobs to pull during the execution. Proper tuning of this parameter should allow to control the execution time and avoid overtimes",
                "default": 100,
                "field_type": "Other",
                "exclusiveMinimum": 0,
                "type": "integer"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "client_url"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "supports_incremental": true,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": ".jobDescription.title",
            "reference": ".reference",
            "created_at": ".creationDate",
            "location": {
              "text": ".location.address",
              "lat": ".location.latitude",
              "lng": ".location.longitude"
            },
            "url": null,
            "summary": null,
            "sections": [
              {
                "name": "description1",
                "title": "description1",
                "description": ".jobDescription.description1 >> ''"
              },
              {
                "name": "description2",
                "title": "description2",
                "description": ".jobDescription.description2 >> ''"
              },
              {
                "name": "'Compl\u00e9ment du descriptif'",
                "title": "'Compl\u00e9ment du descriptif'",
                "description": "$concat(.jobDescription.jobDescriptionCustomFields.longText1 >> '', '\n' , .jobDescription.jobDescriptionCustomFields.longText2>> '', '\n' ,.jobDescription.jobDescriptionCustomFields.longText3>> '')"
              }
            ],
            "tags": [
              {
                "name": "talentsoft-organisation-id",
                "value": "?.organisation?.id"
              },
              {
                "name": "talentsoft-status-id",
                "value": "?.status?.id"
              },
              {
                "name": "talentsoft-professionalCategory-id",
                "value": "?.jobDescription.professionalCategory?.id"
              },
              {
                "name": "talentsoft-country-id",
                "value": "?.jobDescription.country?.id"
              },
              {
                "name": "talentsoft-primaryProfile-id",
                "value": "?.jobDescription.primaryProfile?.id"
              },
              {
                "name": "talentsoft-contractType-id",
                "value": "?.jobDescription.contractType?.id"
              },
              {
                "name": "talentsoft-publishedOnInternet",
                "value": "?.publishedOnInternet"
              },
              {
                "name": "talentsoft-publishedOnIntranet",
                "value": "?.publishedOnIntranet"
              },
              {
                "name": "talentsoft-experienceLevel",
                "value": "?.criteria.experienceLevel?.id"
              },
              {
                "name": "talentsoft-educationLevel",
                "value": "?.criteria.educationLevel?.id"
              }
            ],
            "skills": ".criteria.skills",
            "languages": "?.languages >> [] | {name: .language.label, value: null}"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import TalentSoft\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return TalentSoft.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['client_id', 'client_secret', 'client_url', 'q', 'filter', 'max_read']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return TalentSoft.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "PushProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "TalentSoft Profiles",
          "target_parameters": {
            "title": "WriteProfileParameters",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client Id",
                "description": "client id used to access TalentSoft front office API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "client secret used to access TalentSoft front office API",
                "field_type": "Auth",
                "type": "string"
              },
              "client_url": {
                "title": "Client Url",
                "description": "url used to access TalentSoft front office API",
                "field_type": "Auth",
                "type": "string"
              },
              "job_reference": {
                "title": "Job Reference",
                "description": "reference of the job offer to which the candidate is applying",
                "field_type": "Auth",
                "type": "string"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "client_url"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "jsonmap": {},
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import TalentSoft\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return TalentSoft.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = TalentSoft.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return TalentSoft.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['client_id', 'client_secret', 'client_url', 'job_reference']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return TalentSoft.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Teamtailor",
      "type": "ATS",
      "subtype": "teamtailor",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/teamtailor/logo.png",
      "actions": [
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "Teamtailor Jobs",
          "origin_parameters": {
            "title": "ReadJobsParameters",
            "type": "object",
            "properties": {
              "Authorization": {
                "title": "Authorization",
                "description": "Authorisation token used to access Teamtailor API",
                "field_type": "Auth",
                "type": "string"
              },
              "X_Api_Version": {
                "title": "X Api Version",
                "description": "Dated version of the API",
                "field_type": "Other",
                "type": "string"
              },
              "filter_status": {
                "description": "Posting status of a job. One of ['NONE', 'HYBRID', 'TEMPORARY', 'FULLY']",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/RemoteStatus"
                  }
                ]
              },
              "filter_feed": {
                "description": "Status of a job. One of ['PUBLIC', 'PRIVATE']",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/JobFeed"
                  }
                ]
              }
            },
            "required": [
              "Authorization",
              "X_Api_Version"
            ],
            "additionalProperties": false,
            "definitions": {
              "RemoteStatus": {
                "title": "RemoteStatus",
                "description": "An enumeration.",
                "enum": [
                  "NONE",
                  "HYBRID",
                  "TEMPORARY",
                  "FULLY"
                ],
                "type": "string"
              },
              "JobFeed": {
                "title": "JobFeed",
                "description": "An enumeration.",
                "enum": [
                  "PUBLIC",
                  "PRIVATE"
                ],
                "type": "string"
              }
            }
          },
          "origin_data_schema": {
            "title": "TeamtailorJob",
            "type": "object",
            "properties": {
              "attributes": {
                "$ref": "#/definitions/TeamtailorJobAttribute"
              },
              "links": {
                "title": "Links",
                "type": "object"
              },
              "id": {
                "title": "Id"
              }
            },
            "required": [
              "attributes"
            ],
            "definitions": {
              "TeamtailorJobAttribute": {
                "title": "TeamtailorJobAttribute",
                "type": "object",
                "properties": {
                  "title": {
                    "title": "Title",
                    "type": "string"
                  },
                  "pitch": {
                    "title": "Pitch",
                    "type": "string"
                  },
                  "body": {
                    "title": "Body",
                    "description": "job description",
                    "type": "string"
                  },
                  "created-at": {
                    "title": "Created-At",
                    "type": "string"
                  },
                  "updated-at": {
                    "title": "Updated-At",
                    "type": "string"
                  },
                  "status": {
                    "title": "Status",
                    "type": "string"
                  },
                  "tags": {
                    "title": "Tags",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "remote-status": {
                    "title": "Remote-Status",
                    "type": "string"
                  },
                  "currency": {
                    "title": "Currency",
                    "type": "string"
                  },
                  "salary-time-unit": {
                    "title": "Salary-Time-Unit",
                    "type": "string"
                  },
                  "min-salary": {
                    "title": "Min-Salary",
                    "type": "integer"
                  },
                  "max-salary": {
                    "title": "Max-Salary",
                    "type": "integer"
                  },
                  "employment-type": {
                    "title": "Employment-Type",
                    "type": "string"
                  },
                  "employment-level": {
                    "title": "Employment-Level",
                    "type": "string"
                  },
                  "internal": {
                    "title": "Internal",
                    "type": "boolean"
                  },
                  "start-date": {
                    "title": "Start-Date",
                    "type": "string"
                  },
                  "end-date": {
                    "title": "End-Date",
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "body",
                  "created-at",
                  "updated-at",
                  "tags",
                  "remote-status",
                  "min-salary",
                  "max-salary"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": "?.job?.data?.attributes?.title",
            "reference": "?.job?.data?.id",
            "summary": "?.job?.data?.attributes?.pitch",
            "created_at": "?.job?.data?.attributes?.created-at",
            "updated_at": "?.job?.data?.attributes?.updated-at",
            "url": "?.job?.data?.links?.careersite-job-url",
            "location": {
              "text": "?.job_location?.text",
              "lat": "?.job_location?.lat | $float(0)",
              "lng": "?.job_location?.lng | $float(0)"
            },
            "sections": [
              {
                "name": "teamtailor_description",
                "title": "teamtailor_description",
                "description": "?.job?.data?.attributes?.body | $sub('<.*?>', '') | $sub('&nbsp;', ' ') | $sub('&amp', '&') | $sub('&quot;', '\"') | $sub('&apos;', '\"') | $sub('&lt;', '<') | $sub('&gt;', '>') | $sub('\\s+', ' ') | $strip"
              }
            ],
            "tags": [
              {
                "name": "start-date",
                "value": "?.job?.data?.attributes?.start-date"
              },
              {
                "name": "end-date",
                "value": "?.job?.data?.attributes?.end-date"
              },
              {
                "name": "status",
                "value": "?.job?.data?.attributes?.status"
              },
              {
                "name": "employment-type",
                "value": "?.job?.data?.attributes?.employment-type"
              },
              {
                "name": "employment-level",
                "value": "?.job?.data?.attributes?.employment-level"
              },
              {
                "name": "remote-status",
                "value": "?.job?.data?.attributes?.remote-status"
              },
              {
                "name": "salary-time-unit",
                "value": "?.job?.data?.attributes?.salary-time-unit"
              },
              {
                "name": "min-salary",
                "value": "?.job?.data?.attributes?.min-salary"
              },
              {
                "name": "max-salary",
                "value": "?.job?.data?.attributes?.max-salary"
              },
              {
                "name": "currency",
                "value": "?.job?.data?.attributes?.currency"
              },
              {
                "name": "internal",
                "value": "?.job?.data?.attributes?.internal"
              }
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Teamtailor\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Teamtailor.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['Authorization', 'X_Api_Version', 'filter_status', 'filter_feed']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Teamtailor.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "WriteProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "Teamtailor Profiles",
          "target_parameters": {
            "title": "WriteProfilesParameters",
            "type": "object",
            "properties": {
              "Authorization": {
                "title": "Authorization",
                "description": "Authorisation used to access Teamtailor API",
                "field_type": "Auth",
                "type": "string"
              },
              "X_Api_Version": {
                "title": "X Api Version",
                "description": "Dated version of the API",
                "field_type": "Other",
                "type": "string"
              }
            },
            "required": [
              "Authorization",
              "X_Api_Version"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "TeamtailorCandidateAttribute",
            "type": "object",
            "properties": {
              "first-name": {
                "title": "First-Name",
                "type": "string"
              },
              "last-name": {
                "title": "Last-Name",
                "type": "string"
              },
              "email": {
                "title": "Email",
                "type": "string"
              },
              "phone": {
                "title": "Phone",
                "type": "string"
              },
              "pitch": {
                "title": "Pitch",
                "description": "summary",
                "type": "string"
              },
              "resume": {
                "title": "Resume",
                "description": "candidate profile resume",
                "type": "string"
              },
              "sourced": {
                "title": "Sourced",
                "type": "boolean"
              },
              "tags": {
                "title": "Tags",
                "type": "array",
                "items": {}
              }
            },
            "required": [
              "first-name",
              "last-name",
              "email"
            ]
          },
          "jsonmap": {
            "data": {
              "type": "candidates",
              "attributes": {
                "first-name": "?.info?.first_name",
                "last-name": "?.info?.last_name",
                "email": "?.info?.email",
                "phone": "?.info?.phone",
                "pitch": "?.info?.summary | $slice(0,139)",
                "resume": "?.attachments[1]?.public_url",
                "sourced": "sourced",
                "tags": "?.tags"
              }
            }
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Teamtailor\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Teamtailor.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Teamtailor.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Teamtailor.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['Authorization', 'X_Api_Version']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Teamtailor.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Tekkit",
      "type": "JOBBOARD",
      "subtype": "tekkit",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/tekkit/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Tellent",
      "type": "ATS",
      "subtype": "tellent",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/tellent/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "TRAFFIT",
      "type": "ATS",
      "subtype": "traffit",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/traffit/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Trakstar",
      "type": "ATS",
      "subtype": "trakstar",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/trakstar/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Tribepad",
      "type": "ATS",
      "subtype": "tribepad",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/tribepad/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Twilio",
      "type": "AUTOMATION",
      "subtype": "twilio",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/twilio/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Ubeeo",
      "type": "ATS",
      "subtype": "ubeeo",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/ubeeo/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "UKG Ready Recruiting",
      "type": "ATS",
      "subtype": "ukgreadyrecruiting",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/ukgreadyrecruiting/logo.jpeg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Waalaxy",
      "type": "AUTOMATION",
      "subtype": "waalaxy",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/waalaxy/logo.webp",
      "actions": [
        {
          "name": "catch_profile",
          "action_type": "inbound",
          "action_parameters": {
            "title": "TriggerViewActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "Waalaxy Profiles",
          "origin_parameters": {
            "title": "ReadProfilesParameters",
            "type": "object",
            "properties": {
              "profile": {
                "title": "Profile",
                "description": "Profile object recieved from the Webhook",
                "field_type": "Other",
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_parameters": {
            "title": "WriteProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "edit": {
                "title": "Edit",
                "description": "When enabled the profile must exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "only_edit_fields": {
                "title": "Only Edit Fields",
                "description": "List of attributes to use for the edit operation e.g. ['tags', 'metadatas']",
                "field_type": "Other",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "only_edit_fields"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": "._id",
            "tags": [
              {
                "name": "prospectList",
                "value": ".prospectList"
              },
              {
                "name": "messageSent",
                "value": ".messageSent"
              },
              {
                "name": "messageReplied",
                "value": ".messageReplied"
              },
              {
                "name": "emailSent",
                "value": ".emailSent"
              },
              {
                "name": "emailReplied",
                "value": ".emailReplied"
              }
            ],
            "info": {
              "first_name": ".firstName",
              "last_name": ".lastName",
              "full_name": "$concat(.firstName, ' ', .lastName)",
              "email": ".email",
              "phone": ".phoneNumbers",
              "location": {
                "text": ".location",
                "lat": null,
                "lng": null
              },
              "urls": [
                {
                  "type": "linkedin",
                  "url": ".linkedinUrl"
                },
                {
                  "type": "company_linkedin",
                  "url": ".company_linkedinUrl"
                },
                {
                  "type": "company_website",
                  "url": ".company_website"
                },
                {
                  "type": "salesNavigator",
                  "url": ".salesNavigatorUrl"
                }
              ],
              "summary": ".occupation"
            },
            "text_language": "en",
            "experiences": [],
            "educations": []
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Waalaxy\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Waalaxy.catch_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Waalaxy.model.action_by_name(\"catch_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Waalaxy.catch_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['profile']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'edit', 'only_edit_fields']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Waalaxy.catch_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Welcome To The Jungle",
      "type": "JOBBOARD",
      "subtype": "welcometothejungle",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/welcometothejungle/logo.jpg",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Wizbii",
      "type": "JOBBOARD",
      "subtype": "wizbii",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/wizbii/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "push_job",
          "origin": "HrFlow.ai Jobs",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "catch_profile",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profile Parsing",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Workable",
      "type": "HCM",
      "subtype": "workable",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/workable/logo.jpeg",
      "actions": [
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "PullJobsActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "WorkableJobWarehouse",
          "origin_parameters": {
            "title": "WorkableReadParameters",
            "type": "object",
            "properties": {
              "auth": {
                "title": "Auth",
                "description": "API KEY",
                "field_type": "Auth",
                "type": "string"
              },
              "subdomain": {
                "title": "Subdomain",
                "description": "Subdomain",
                "field_type": "Auth",
                "type": "string"
              }
            },
            "required": [
              "auth",
              "subdomain"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "name": "?.title",
            "reference": "?.shortcode",
            "url": "?.url",
            "location": {
              "text": "?.location?.location_str",
              "geojson": {
                "country": "?.location?.country",
                "country_code": "?.location?.country_code",
                "region_code": "?.location?.region_code",
                "region": "?.location?.region",
                "city": "?.location?.city",
                "zip_code": "?.location?.zip_code",
                "telecommuting": "?.location?.telecommuting"
              }
            },
            "sections": [
              {
                "name": "workable_description",
                "title": "workable_description",
                "description": "?.description | $sub('<[^<]+?>', '')"
              },
              {
                "name": "workable_requirements",
                "title": "workable_requirements",
                "description": "?.requirements | $sub('<[^<]+?>', '')"
              },
              {
                "name": "workable_benefits",
                "title": "workable_benefits",
                "description": "?.benefits | $sub('<[^<]+?>', '')"
              }
            ],
            "created_at": "?.created_at",
            "tags": [
              {
                "name": "workable_employment_type",
                "value": "?.employment_type"
              },
              {
                "name": "workable_full_title",
                "value": "?.full_title"
              },
              {
                "name": "workable_id",
                "value": "?.id"
              },
              {
                "name": "workable_code",
                "value": "?.code"
              },
              {
                "name": "workable_state",
                "value": "?.state"
              },
              {
                "name": "workable_department",
                "value": "?.department"
              },
              {
                "name": "workable_application_url",
                "value": "?.application_url"
              },
              {
                "name": "workable_shortlink",
                "value": "?.shortlink"
              },
              {
                "name": "workable_employment_type",
                "value": "?.employment_type"
              }
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Workable\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Workable.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['auth', 'subdomain']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return Workable.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "push_profile",
          "action_type": "outbound",
          "action_parameters": {
            "title": "WriteProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "WorkableProfileWarehouse",
          "target_parameters": {
            "title": "WorkableWriteParameters",
            "type": "object",
            "properties": {
              "auth": {
                "title": "Auth",
                "description": "API KEY",
                "field_type": "Auth",
                "type": "string"
              },
              "subdomain": {
                "title": "Subdomain",
                "description": "Subdomain",
                "field_type": "Other",
                "type": "string"
              },
              "shortcode": {
                "title": "Shortcode",
                "description": "Job shortcode",
                "field_type": "Other",
                "type": "string"
              }
            },
            "required": [
              "auth",
              "subdomain",
              "shortcode"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "BaseModel",
            "type": "object",
            "properties": {}
          },
          "jsonmap": {
            "sourced": true,
            "candidate": {
              "name": "?.info?.full_name",
              "summary": "?.info?.summary",
              "email": "?.info?.email",
              "phone": "?.info?.phone",
              "address": "?.info?.location?.text",
              "resume_url": "?.attachments | $map(.type == 'resume' ?? .)| .[0].public_url"
            }
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import Workable\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return Workable.push_profile(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = Workable.model.action_by_name(\"push_profile\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return Workable.push_profile(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['auth', 'subdomain', 'shortcode']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return Workable.push_profile(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    },
    {
      "name": "Workday",
      "type": "ATS",
      "subtype": "workday",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/workday/logo.png",
      "actions": [
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "job",
          "jsonmap": {},
          "name": "pull_job_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "inbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "pull_profile_list",
          "origin": "",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "schedule",
          "workflow_code": "",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        },
        {
          "action_parameters": {},
          "action_type": "outbound",
          "data_type": "profile",
          "jsonmap": {},
          "name": "push_profile",
          "origin": "HrFlow.ai Profiles",
          "origin_data_schema": {},
          "origin_parameters": {},
          "supports_incremental": false,
          "target": "",
          "target_data_schema": {},
          "target_parameters": {},
          "trigger_type": "hook",
          "workflow_code": "",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_",
          "workflow_code_workflow_id_settings_key": "__workflow_id"
        }
      ]
    },
    {
      "name": "Zoho Recruit",
      "type": "ATS",
      "subtype": "zohorecruit",
      "logo": "https://raw.githubusercontent.com/Riminder/hrflow-connectors/master/src/hrflow_connectors/connectors/zohorecruit/logo.png",
      "actions": [
        {
          "name": "pull_profile_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "schedule",
          "origin": "Zoho Candidates",
          "origin_parameters": {
            "title": "ReadParameters",
            "type": "object",
            "properties": {
              "fields": {
                "title": "Fields",
                "description": "To list all the module records with respect to fields\nMultiple field API names, comma-separated.\nFor example Last_Name, Email",
                "field_type": "Query Param",
                "type": "string"
              },
              "sort_order": {
                "description": "To sort the available list of records in either ascending or descending order\nasc - ascending order\ndesc - descending order",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/SortOrder"
                  }
                ]
              },
              "sort_by": {
                "title": "Sort By",
                "description": "To sort the available list of records based on the given field\nField API name\nExample: Email",
                "field_type": "Query Param",
                "type": "string"
              },
              "converted": {
                "description": "To get the list of converted records.\nThe default value is false\ntrue - get only converted records\nfalse - get only non-converted records\nboth - get all records",
                "default": "false",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/ZohoBool"
                  }
                ]
              },
              "approved": {
                "description": "To get the list of approved records.\nThe default value is true\ntrue - get only approved records\nfalse - get only non-approved records\nboth - get all records",
                "default": "true",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/ZohoBool"
                  }
                ]
              },
              "cvid": {
                "title": "Cvid",
                "description": "To get the list of records based on custom views\n{custom_view_id}",
                "field_type": "Query Param",
                "type": "integer"
              },
              "territory_id": {
                "title": "Territory Id",
                "description": "To get the list of records based on territory\n{territory_id}",
                "field_type": "Query Param",
                "type": "integer"
              },
              "include_child": {
                "title": "Include Child",
                "description": "To include records from the child territories.\nTrue includes child territory records.\nFalse does not include child territory records.\nThe default value is false.",
                "field_type": "Query Param",
                "type": "boolean"
              },
              "state": {
                "description": "If the value of this parameter is 'draft', then the response will only contain Draft records from the specified module. If the parameter's value is 'save', then the response will return saved records from the specified module.\n\nIf this parameter is not included in your request body, then the response will only return saved records from the specified module.",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/State"
                  }
                ]
              },
              "zoho_accounts_url": {
                "description": "Zoho CRM is hosted at multiple data centers. Therefore, the API domain URL varies for each data center.\nYou must use your domain-specific Zoho Accounts URL to generate access and refresh tokens. The following are the various domains and their corresponding accounts URLs.\n US: https://accounts.zoho.com\n AU: https://accounts.zoho.com.au\n EU: https://accounts.zoho.eu\n IN: https://accounts.zoho.in\n CN: https://accounts.zoho.com.cn\n JP: https://accounts.zoho.jp\n CA: https://accounts.zohocloud.ca",
                "default": "https://accounts.zoho.eu",
                "field_type": "Auth",
                "allOf": [
                  {
                    "$ref": "#/definitions/ZohoAccountsURL"
                  }
                ]
              },
              "client_id": {
                "title": "Client Id",
                "description": "A unique ID displayed under Self Client > Client Secret.",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "A unique confidential secret displayed under Self Client > Client Secret.",
                "field_type": "Auth",
                "type": "string"
              },
              "authorization_code": {
                "title": "Authorization Code",
                "description": "The authorization code generated during the Self Client creation, used to get the refresh token and the first access token.",
                "field_type": "Auth",
                "type": "string"
              },
              "refresh_token": {
                "title": "Refresh Token",
                "description": "The refresh token is used to generate a new access token when the current access token expires.",
                "field_type": "Auth",
                "type": "string"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "authorization_code"
            ],
            "additionalProperties": false,
            "definitions": {
              "SortOrder": {
                "title": "SortOrder",
                "description": "An enumeration.",
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              },
              "ZohoBool": {
                "title": "ZohoBool",
                "description": "An enumeration.",
                "enum": [
                  "true",
                  "false",
                  "both"
                ],
                "type": "string"
              },
              "State": {
                "title": "State",
                "description": "An enumeration.",
                "enum": [
                  "draft",
                  "save"
                ],
                "type": "string"
              },
              "ZohoAccountsURL": {
                "title": "ZohoAccountsURL",
                "description": "An enumeration.",
                "enum": [
                  "https://accounts.zoho.com",
                  "https://accounts.zoho.com.au",
                  "https://accounts.zoho.eu",
                  "https://accounts.zoho.in",
                  "https://accounts.zoho.com.cn",
                  "https://accounts.zoho.jp",
                  "https://accounts.zohocloud.ca"
                ],
                "type": "string"
              }
            }
          },
          "origin_data_schema": {
            "title": "Candidate",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "type": "string"
              },
              "First_Name": {
                "title": "First Name",
                "type": "string"
              },
              "Last_Name": {
                "title": "Last Name",
                "type": "string"
              },
              "Full_Name": {
                "title": "Full Name",
                "type": "string"
              },
              "Salutation": {
                "title": "Salutation",
                "type": "string"
              },
              "Email": {
                "title": "Email",
                "type": "string"
              },
              "Phone": {
                "title": "Phone",
                "type": "string"
              },
              "Mobile": {
                "title": "Mobile",
                "type": "string"
              },
              "Fax": {
                "title": "Fax",
                "type": "string"
              },
              "Street": {
                "title": "Street",
                "type": "string"
              },
              "City": {
                "title": "City",
                "type": "string"
              },
              "State": {
                "title": "State",
                "type": "string"
              },
              "Zip_Code": {
                "title": "Zip Code",
                "type": "string"
              },
              "Country": {
                "title": "Country",
                "type": "string"
              },
              "Current_Job_Title": {
                "title": "Current Job Title",
                "type": "string"
              },
              "Current_Salary": {
                "title": "Current Salary",
                "type": "integer"
              },
              "Expected_Salary": {
                "title": "Expected Salary",
                "type": "integer"
              },
              "Current_Employer": {
                "title": "Current Employer",
                "type": "string"
              },
              "Experience_in_Years": {
                "title": "Experience In Years",
                "type": "integer"
              },
              "Experience_Details": {
                "title": "Experience Details",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience_Detail"
                }
              },
              "Educational_Details": {
                "title": "Educational Details",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Educational_Detail"
                }
              },
              "Highest_Qualification_Held": {
                "title": "Highest Qualification Held",
                "type": "string"
              },
              "Skill_Set": {
                "title": "Skill Set",
                "type": "string"
              },
              "Created_Time": {
                "title": "Created Time",
                "type": "string"
              },
              "Last_Activity_Time": {
                "title": "Last Activity Time",
                "type": "string"
              },
              "Updated_On": {
                "title": "Updated On",
                "type": "string"
              },
              "Last_Mailed_Time": {
                "title": "Last Mailed Time",
                "type": "string"
              },
              "Source": {
                "title": "Source",
                "type": "string"
              },
              "Origin": {
                "title": "Origin",
                "type": "string"
              },
              "$currency_symbol": {
                "title": "$Currency Symbol",
                "type": "string"
              },
              "$whatsapp_available": {
                "title": "$Whatsapp Available",
                "type": "boolean"
              },
              "$state": {
                "$ref": "#/definitions/ZohoState"
              },
              "$converted": {
                "title": "$Converted",
                "type": "boolean"
              },
              "$process_flow": {
                "title": "$Process Flow",
                "type": "boolean"
              },
              "$approved": {
                "title": "$Approved",
                "type": "boolean"
              },
              "$approval": {
                "title": "$Approval",
                "type": "string"
              },
              "$approval_state": {
                "title": "$Approval State",
                "type": "string"
              },
              "Candidate_Status": {
                "title": "Candidate Status",
                "type": "string"
              },
              "Candidate_ID": {
                "title": "Candidate Id",
                "type": "string"
              },
              "Candidate_Owner": {
                "$ref": "#/definitions/ZohoUser"
              },
              "$followed": {
                "title": "$Followed",
                "type": "boolean"
              },
              "LinkedIn__s": {
                "title": "Linkedin  S",
                "type": "string"
              },
              "$editable": {
                "title": "$Editable",
                "type": "boolean"
              },
              "Is_Locked": {
                "title": "Is Locked",
                "type": "boolean"
              },
              "Is_Unqualified": {
                "title": "Is Unqualified",
                "type": "boolean"
              },
              "Associated_Tags": {
                "title": "Associated Tags",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "Additional_Info": {
                "title": "Additional Info",
                "type": "string"
              },
              "Created_By": {
                "$ref": "#/definitions/ZohoUser"
              },
              "Modified_By": {
                "$ref": "#/definitions/ZohoUser"
              },
              "Secondary_Email": {
                "title": "Secondary Email",
                "type": "string"
              },
              "Is_Attachment_Present": {
                "title": "Is Attachment Present",
                "type": "boolean"
              },
              "Rating": {
                "title": "Rating",
                "type": "integer"
              },
              "$applied_with_linkedin": {
                "title": "$Applied With Linkedin",
                "type": "boolean"
              },
              "No_of_Applications": {
                "title": "No Of Applications",
                "type": "integer"
              },
              "Website": {
                "title": "Website",
                "type": "string"
              },
              "Twitter": {
                "title": "Twitter",
                "type": "string"
              },
              "Facebook__s": {
                "title": "Facebook  S",
                "type": "string"
              },
              "$social_profiles": {
                "title": "$Social Profiles",
                "type": "string"
              },
              "Skype_ID": {
                "title": "Skype Id",
                "type": "string"
              },
              "Candidate_Stage": {
                "title": "Candidate Stage",
                "type": "string"
              },
              "Fresh_Candidate": {
                "title": "Fresh Candidate",
                "type": "boolean"
              },
              "Email_Opt_Out": {
                "title": "Email Opt Out",
                "type": "boolean"
              },
              "$converted_detail": {
                "title": "$Converted Detail",
                "type": "object"
              },
              "Career_Page_Invite_Status": {
                "title": "Career Page Invite Status",
                "type": "string"
              },
              "Associated_any_Social_Profiles": {
                "title": "Associated Any Social Profiles",
                "type": "boolean"
              }
            },
            "required": [
              "id",
              "Last_Name"
            ],
            "definitions": {
              "ZohoDuration": {
                "title": "ZohoDuration",
                "type": "object",
                "properties": {
                  "from": {
                    "title": "From",
                    "type": "string"
                  },
                  "to": {
                    "title": "To",
                    "type": "string"
                  }
                },
                "required": [
                  "from"
                ]
              },
              "Experience_Detail": {
                "title": "Experience_Detail",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "string"
                  },
                  "Company": {
                    "title": "Company",
                    "type": "string"
                  },
                  "I_currently_work_here": {
                    "title": "I Currently Work Here",
                    "type": "boolean"
                  },
                  "Summary": {
                    "title": "Summary",
                    "type": "string"
                  },
                  "Work_Duration": {
                    "$ref": "#/definitions/ZohoDuration"
                  },
                  "Occupation_Title": {
                    "title": "Occupation Title",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "Company",
                  "I_currently_work_here",
                  "Summary",
                  "Work_Duration",
                  "Occupation_Title"
                ]
              },
              "Educational_Detail": {
                "title": "Educational_Detail",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "string"
                  },
                  "Institute_School": {
                    "title": "Institute School",
                    "type": "string"
                  },
                  "Currently_pursuing": {
                    "title": "Currently Pursuing",
                    "type": "boolean"
                  },
                  "Degree": {
                    "title": "Degree",
                    "type": "string"
                  },
                  "Major_Department": {
                    "title": "Major Department",
                    "type": "string"
                  },
                  "Duration": {
                    "$ref": "#/definitions/ZohoDuration"
                  }
                },
                "required": [
                  "id",
                  "Institute_School",
                  "Currently_pursuing",
                  "Degree",
                  "Major_Department",
                  "Duration"
                ]
              },
              "ZohoState": {
                "title": "ZohoState",
                "description": "An enumeration.",
                "enum": [
                  "draft",
                  "save"
                ],
                "type": "string"
              },
              "ZohoUser": {
                "title": "ZohoUser",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "id": {
                    "title": "Id",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "id"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Profiles",
          "target_parameters": {
            "title": "WriteProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "edit": {
                "title": "Edit",
                "description": "When enabled the profile must exist in the source",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "only_edit_fields": {
                "title": "Only Edit Fields",
                "description": "List of attributes to use for the edit operation e.g. ['tags', 'metadatas']",
                "field_type": "Other",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "only_edit_fields"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "jsonmap": {
            "reference": ".id",
            "info": {
              "first_name": ".First_Name",
              "last_name": ".Last_Name",
              "full_name": ".Full_Name",
              "email": ".Email",
              "phone": ".Phone",
              "location": {
                "text": "$concat(?.Street >> '', ' ', ?.City >> '',  ' ', ?.State >> '', ' ', ?.Country >> '', ' ', ?.Zip_Code >> '')",
                "lat": null,
                "lng": null,
                "fields": {
                  "postcode": "?.Zip_Code",
                  "city": "?.City",
                  "state": "?.State",
                  "country": "?.Country"
                }
              },
              "urls": [
                {
                  "type": "linkedin",
                  "url": ".LinkedIn__s"
                },
                {
                  "type": "facebook",
                  "url": ".Facebook__s"
                },
                {
                  "type": "twitter",
                  "url": ".Twitter"
                },
                {
                  "type": "from_resume",
                  "url": ".Website"
                }
              ]
            },
            "created_at": ".Created_Time",
            "updated_at": ".Updated_On",
            "experiences_duration": ".Experience_in_Years",
            "experiences": ".Experience_in_Years | $map({title: .Occupation_Title, company: .Company, date_start: .Work_Duration.from, date_end: .Work_Duration?.to, description: .Summary})",
            "educations": ".Educational_Details | $map({title: .Degree, school: .Institute_School, date_start: .Education_Duration.from, date_end: .Education_Duration?.to, description: .Major_Department})",
            "skills": ".Skill_Set | $split(', ') | $map({name: ., value: null, type: 'hard'})",
            "tags": [
              {
                "name": "Current_Job_Title",
                "value": ".Current_Job_Title"
              },
              {
                "name": "Current_Salary",
                "value": ".Current_Salary"
              },
              {
                "name": "Expected_Salary",
                "value": ".Expected_Salary"
              },
              {
                "name": "Current_Employer",
                "value": ".Current_Employer"
              },
              {
                "name": "Highest_Qualification_Held",
                "value": ".Highest_Qualification_Held"
              },
              {
                "name": "Source",
                "value": ".Source"
              },
              {
                "name": "Origin",
                "value": ".Origin"
              },
              {
                "name": "Candidate_Status",
                "value": ".Candidate_Status"
              },
              {
                "name": "Is_Unqualified",
                "value": ".Is_Unqualified"
              },
              {
                "name": "Additional_Info",
                "value": ".Additional_Info"
              },
              {
                "name": "applied_with_linkedin",
                "value": ".applied_with_linkedin"
              },
              {
                "name": "No_of_Applications",
                "value": ".No_of_Applications"
              }
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import ZohoRecruit\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return ZohoRecruit.pull_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['fields', 'sort_order', 'sort_by', 'converted', 'approved', 'cvid', 'territory_id', 'include_child', 'state', 'zoho_accounts_url', 'client_id', 'client_secret', 'authorization_code', 'refresh_token']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'edit', 'only_edit_fields']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return ZohoRecruit.pull_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "push_profile_list",
          "action_type": "outbound",
          "action_parameters": {
            "title": "PushProfileActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              },
              "event_parser": {
                "title": "event_parser",
                "description": "Event parsing function for **CATCH** integrations. You should expose a function named 'event_parser' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef event_parser(event: t.Dict) -> t.Dict:\n    parsed = dict()\n    parsed[\"user_id\"] = event[\"email\"]\n    parsed[\"thread_id\"] = event[\"subscription_id\"]\n    return parsed\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "profile",
          "trigger_type": "hook",
          "origin": "HrFlow.ai Profiles",
          "origin_parameters": {
            "title": "ReadProfileParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "source_key": {
                "title": "Source Key",
                "description": "HrFlow.ai source key",
                "field_type": "Query Param",
                "type": "string"
              },
              "profile_key": {
                "title": "Profile Key",
                "description": "HrFlow.ai profile key",
                "field_type": "Query Param",
                "type": "string"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "source_key",
              "profile_key"
            ],
            "additionalProperties": false
          },
          "origin_data_schema": {
            "title": "HrFlowProfile",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Profile.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Profile.",
                "type": "string"
              },
              "info": {
                "title": "Info",
                "description": "Object containing the Profile's info.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileInfo"
                  }
                ]
              },
              "text_language": {
                "title": "Text Language",
                "description": "Code language of the Profile. type: string code ISO 639-1",
                "type": "string"
              },
              "text": {
                "title": "Text",
                "description": "Full text of the Profile.",
                "type": "string"
              },
              "archived_at": {
                "title": "Archived At",
                "description": "type: datetime ISO8601, Archive date of the Profile. The value is null for unarchived Profiles.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Profile.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Profile.",
                "type": "string"
              },
              "experiences_duration": {
                "title": "Experiences Duration",
                "description": "Total number of years of experience.",
                "type": "number"
              },
              "educations_duration": {
                "title": "Educations Duration",
                "description": "Total number of years of education.",
                "type": "number"
              },
              "experiences": {
                "title": "Experiences",
                "description": "List of experiences of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience"
                }
              },
              "educations": {
                "title": "Educations",
                "description": "List of educations of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Education"
                }
              },
              "attachments": {
                "title": "Attachments",
                "description": "List of documents attached to the Profile.",
                "type": "array",
                "items": {}
              },
              "skills": {
                "title": "Skills",
                "description": "List of skills of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "List of spoken languages of the profile",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "List of certifications of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "List of courses of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "List of tasks of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "interests": {
                "title": "Interests",
                "description": "List of interests of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "List of tags of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "List of metadatas of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "List of labels of the Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Label"
                }
              }
            },
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "InfoUrl": {
                "title": "InfoUrl",
                "type": "object",
                "properties": {
                  "type": {
                    "title": "Type",
                    "enum": [
                      "from_resume",
                      "linkedin",
                      "twitter",
                      "facebook",
                      "github"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "ProfileInfo": {
                "title": "ProfileInfo",
                "type": "object",
                "properties": {
                  "full_name": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "first_name": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "last_name": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "phone": {
                    "title": "Phone",
                    "type": "string"
                  },
                  "date_birth": {
                    "title": "Date Birth",
                    "description": "Profile date of birth",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Profile location object",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "urls": {
                    "title": "Urls",
                    "description": "Profile social networks and URLs",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/InfoUrl"
                    }
                  },
                  "picture": {
                    "title": "Picture",
                    "description": "Profile picture url",
                    "type": "string"
                  },
                  "gender": {
                    "title": "Gender",
                    "description": "Profile gender",
                    "type": "string"
                  },
                  "summary": {
                    "title": "Summary",
                    "description": "Profile summary text",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "Experience": {
                "title": "Experience",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Experience.",
                    "type": "string"
                  },
                  "company": {
                    "title": "Company",
                    "description": "Company name of the Experience.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the Company",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Experience.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Experience.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Experience.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the experience. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Experience.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Education": {
                "title": "Education",
                "type": "object",
                "properties": {
                  "key": {
                    "title": "Key",
                    "description": "Identification key of the Education.",
                    "type": "string"
                  },
                  "school": {
                    "title": "School",
                    "description": "School name of the Education.",
                    "type": "string"
                  },
                  "logo": {
                    "title": "Logo",
                    "description": "Logo of the School",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Title of the Education.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Description of the Education.",
                    "type": "string"
                  },
                  "location": {
                    "title": "Location",
                    "description": "Location object of the Education.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Location"
                      }
                    ]
                  },
                  "date_start": {
                    "title": "Date Start",
                    "description": "Start date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "date_end": {
                    "title": "Date End",
                    "description": "End date of the Education. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "skills": {
                    "title": "Skills",
                    "description": "List of skills of the Education.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Skill"
                    }
                  },
                  "certifications": {
                    "title": "Certifications",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "courses": {
                    "title": "Courses",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  },
                  "tasks": {
                    "title": "Tasks",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GeneralEntitySchema"
                    }
                  }
                }
              },
              "Label": {
                "title": "Label",
                "type": "object",
                "properties": {
                  "board_key": {
                    "title": "Board Key",
                    "description": "Identification key of the Board containing the target Job.",
                    "type": "string"
                  },
                  "job_key": {
                    "title": "Job Key",
                    "description": "Identification key of the Job.",
                    "type": "string"
                  },
                  "job_reference": {
                    "title": "Job Reference",
                    "description": "Custom identifier of the Job.",
                    "type": "string"
                  },
                  "stage": {
                    "title": "Stage",
                    "description": "Stage associated to the Profile following the action of a recruiter (yes, no, later).",
                    "enum": [
                      "yes",
                      "no",
                      "later"
                    ],
                    "type": "string"
                  },
                  "date_stage": {
                    "title": "Date Stage",
                    "description": "Date of the stage edit action. type: ('datetime ISO 8601')",
                    "type": "string"
                  },
                  "rating": {
                    "title": "Rating",
                    "description": "Rating associated to the Profile following the action of a recruiter (from 1 to 5).",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "type": "integer"
                  },
                  "date_rating": {
                    "title": "Date Rating",
                    "description": "Date of the rating action. type: ('datetime ISO 8601')",
                    "type": "string"
                  }
                },
                "required": [
                  "board_key",
                  "job_key",
                  "job_reference",
                  "stage"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "Zoho Candidates",
          "target_parameters": {
            "title": "WriteParameters",
            "type": "object",
            "properties": {
              "zoho_accounts_url": {
                "description": "Zoho CRM is hosted at multiple data centers. Therefore, the API domain URL varies for each data center.\nYou must use your domain-specific Zoho Accounts URL to generate access and refresh tokens. The following are the various domains and their corresponding accounts URLs.\n US: https://accounts.zoho.com\n AU: https://accounts.zoho.com.au\n EU: https://accounts.zoho.eu\n IN: https://accounts.zoho.in\n CN: https://accounts.zoho.com.cn\n JP: https://accounts.zoho.jp\n CA: https://accounts.zohocloud.ca",
                "default": "https://accounts.zoho.eu",
                "field_type": "Auth",
                "allOf": [
                  {
                    "$ref": "#/definitions/ZohoAccountsURL"
                  }
                ]
              },
              "client_id": {
                "title": "Client Id",
                "description": "A unique ID displayed under Self Client > Client Secret.",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "A unique confidential secret displayed under Self Client > Client Secret.",
                "field_type": "Auth",
                "type": "string"
              },
              "authorization_code": {
                "title": "Authorization Code",
                "description": "The authorization code generated during the Self Client creation, used to get the refresh token and the first access token.",
                "field_type": "Auth",
                "type": "string"
              },
              "refresh_token": {
                "title": "Refresh Token",
                "description": "The refresh token is used to generate a new access token when the current access token expires.",
                "field_type": "Auth",
                "type": "string"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "authorization_code"
            ],
            "additionalProperties": false,
            "definitions": {
              "ZohoAccountsURL": {
                "title": "ZohoAccountsURL",
                "description": "An enumeration.",
                "enum": [
                  "https://accounts.zoho.com",
                  "https://accounts.zoho.com.au",
                  "https://accounts.zoho.eu",
                  "https://accounts.zoho.in",
                  "https://accounts.zoho.com.cn",
                  "https://accounts.zoho.jp",
                  "https://accounts.zohocloud.ca"
                ],
                "type": "string"
              }
            }
          },
          "target_data_schema": {
            "title": "Candidate",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "type": "string"
              },
              "First_Name": {
                "title": "First Name",
                "type": "string"
              },
              "Last_Name": {
                "title": "Last Name",
                "type": "string"
              },
              "Full_Name": {
                "title": "Full Name",
                "type": "string"
              },
              "Salutation": {
                "title": "Salutation",
                "type": "string"
              },
              "Email": {
                "title": "Email",
                "type": "string"
              },
              "Phone": {
                "title": "Phone",
                "type": "string"
              },
              "Mobile": {
                "title": "Mobile",
                "type": "string"
              },
              "Fax": {
                "title": "Fax",
                "type": "string"
              },
              "Street": {
                "title": "Street",
                "type": "string"
              },
              "City": {
                "title": "City",
                "type": "string"
              },
              "State": {
                "title": "State",
                "type": "string"
              },
              "Zip_Code": {
                "title": "Zip Code",
                "type": "string"
              },
              "Country": {
                "title": "Country",
                "type": "string"
              },
              "Current_Job_Title": {
                "title": "Current Job Title",
                "type": "string"
              },
              "Current_Salary": {
                "title": "Current Salary",
                "type": "integer"
              },
              "Expected_Salary": {
                "title": "Expected Salary",
                "type": "integer"
              },
              "Current_Employer": {
                "title": "Current Employer",
                "type": "string"
              },
              "Experience_in_Years": {
                "title": "Experience In Years",
                "type": "integer"
              },
              "Experience_Details": {
                "title": "Experience Details",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Experience_Detail"
                }
              },
              "Educational_Details": {
                "title": "Educational Details",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Educational_Detail"
                }
              },
              "Highest_Qualification_Held": {
                "title": "Highest Qualification Held",
                "type": "string"
              },
              "Skill_Set": {
                "title": "Skill Set",
                "type": "string"
              },
              "Created_Time": {
                "title": "Created Time",
                "type": "string"
              },
              "Last_Activity_Time": {
                "title": "Last Activity Time",
                "type": "string"
              },
              "Updated_On": {
                "title": "Updated On",
                "type": "string"
              },
              "Last_Mailed_Time": {
                "title": "Last Mailed Time",
                "type": "string"
              },
              "Source": {
                "title": "Source",
                "type": "string"
              },
              "Origin": {
                "title": "Origin",
                "type": "string"
              },
              "$currency_symbol": {
                "title": "$Currency Symbol",
                "type": "string"
              },
              "$whatsapp_available": {
                "title": "$Whatsapp Available",
                "type": "boolean"
              },
              "$state": {
                "$ref": "#/definitions/ZohoState"
              },
              "$converted": {
                "title": "$Converted",
                "type": "boolean"
              },
              "$process_flow": {
                "title": "$Process Flow",
                "type": "boolean"
              },
              "$approved": {
                "title": "$Approved",
                "type": "boolean"
              },
              "$approval": {
                "title": "$Approval",
                "type": "string"
              },
              "$approval_state": {
                "title": "$Approval State",
                "type": "string"
              },
              "Candidate_Status": {
                "title": "Candidate Status",
                "type": "string"
              },
              "Candidate_ID": {
                "title": "Candidate Id",
                "type": "string"
              },
              "Candidate_Owner": {
                "$ref": "#/definitions/ZohoUser"
              },
              "$followed": {
                "title": "$Followed",
                "type": "boolean"
              },
              "LinkedIn__s": {
                "title": "Linkedin  S",
                "type": "string"
              },
              "$editable": {
                "title": "$Editable",
                "type": "boolean"
              },
              "Is_Locked": {
                "title": "Is Locked",
                "type": "boolean"
              },
              "Is_Unqualified": {
                "title": "Is Unqualified",
                "type": "boolean"
              },
              "Associated_Tags": {
                "title": "Associated Tags",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "Additional_Info": {
                "title": "Additional Info",
                "type": "string"
              },
              "Created_By": {
                "$ref": "#/definitions/ZohoUser"
              },
              "Modified_By": {
                "$ref": "#/definitions/ZohoUser"
              },
              "Secondary_Email": {
                "title": "Secondary Email",
                "type": "string"
              },
              "Is_Attachment_Present": {
                "title": "Is Attachment Present",
                "type": "boolean"
              },
              "Rating": {
                "title": "Rating",
                "type": "integer"
              },
              "$applied_with_linkedin": {
                "title": "$Applied With Linkedin",
                "type": "boolean"
              },
              "No_of_Applications": {
                "title": "No Of Applications",
                "type": "integer"
              },
              "Website": {
                "title": "Website",
                "type": "string"
              },
              "Twitter": {
                "title": "Twitter",
                "type": "string"
              },
              "Facebook__s": {
                "title": "Facebook  S",
                "type": "string"
              },
              "$social_profiles": {
                "title": "$Social Profiles",
                "type": "string"
              },
              "Skype_ID": {
                "title": "Skype Id",
                "type": "string"
              },
              "Candidate_Stage": {
                "title": "Candidate Stage",
                "type": "string"
              },
              "Fresh_Candidate": {
                "title": "Fresh Candidate",
                "type": "boolean"
              },
              "Email_Opt_Out": {
                "title": "Email Opt Out",
                "type": "boolean"
              },
              "$converted_detail": {
                "title": "$Converted Detail",
                "type": "object"
              },
              "Career_Page_Invite_Status": {
                "title": "Career Page Invite Status",
                "type": "string"
              },
              "Associated_any_Social_Profiles": {
                "title": "Associated Any Social Profiles",
                "type": "boolean"
              }
            },
            "required": [
              "id",
              "Last_Name"
            ],
            "definitions": {
              "ZohoDuration": {
                "title": "ZohoDuration",
                "type": "object",
                "properties": {
                  "from": {
                    "title": "From",
                    "type": "string"
                  },
                  "to": {
                    "title": "To",
                    "type": "string"
                  }
                },
                "required": [
                  "from"
                ]
              },
              "Experience_Detail": {
                "title": "Experience_Detail",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "string"
                  },
                  "Company": {
                    "title": "Company",
                    "type": "string"
                  },
                  "I_currently_work_here": {
                    "title": "I Currently Work Here",
                    "type": "boolean"
                  },
                  "Summary": {
                    "title": "Summary",
                    "type": "string"
                  },
                  "Work_Duration": {
                    "$ref": "#/definitions/ZohoDuration"
                  },
                  "Occupation_Title": {
                    "title": "Occupation Title",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "Company",
                  "I_currently_work_here",
                  "Summary",
                  "Work_Duration",
                  "Occupation_Title"
                ]
              },
              "Educational_Detail": {
                "title": "Educational_Detail",
                "type": "object",
                "properties": {
                  "id": {
                    "title": "Id",
                    "type": "string"
                  },
                  "Institute_School": {
                    "title": "Institute School",
                    "type": "string"
                  },
                  "Currently_pursuing": {
                    "title": "Currently Pursuing",
                    "type": "boolean"
                  },
                  "Degree": {
                    "title": "Degree",
                    "type": "string"
                  },
                  "Major_Department": {
                    "title": "Major Department",
                    "type": "string"
                  },
                  "Duration": {
                    "$ref": "#/definitions/ZohoDuration"
                  }
                },
                "required": [
                  "id",
                  "Institute_School",
                  "Currently_pursuing",
                  "Degree",
                  "Major_Department",
                  "Duration"
                ]
              },
              "ZohoState": {
                "title": "ZohoState",
                "description": "An enumeration.",
                "enum": [
                  "draft",
                  "save"
                ],
                "type": "string"
              },
              "ZohoUser": {
                "title": "ZohoUser",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "id": {
                    "title": "Id",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "id"
                ]
              }
            }
          },
          "jsonmap": {
            "First_Name": ".info.first_name",
            "Last_Name": ".info.last_name",
            "Full_Name": ".info.full_name",
            "Email": ".info.email",
            "Phone": ".info.phone",
            "skillSet": ".skills | $map(.name) | $join(', ')",
            "Experience_in_Years": ".experiences_duration",
            "Experience_Details": ".experiences | $map({Occupation_Title: .title,I_currently_work_here: ?.date_end == null  ?? true: false , Company: .company, Work_Duration: {from: .date_start, to: ?.date_end}, Summary: .description})",
            "Educational_Details": ".educations | $map({Institute_School: .school, Currently_pursuing: ?.date_end == null  ?? true: false, Degree: .title, Major_Department: .description, Duration: {from: .date_start, to: ?.date_end}})",
            "Created_Time": ".created_at",
            "Updated_On": ".updated_at",
            "LinkedIn__s": ".info.urls | .type == linkedin ?? .url",
            "Facebook__s": ".info.urls | .type == facebook ?? .url",
            "Twitter": ".info.urls | .type == twitter ?? .url",
            "Street": ".info.location.text",
            "City": ".info.location.fields?.city",
            "State": ".info.location.fields?.state",
            "Zip_Code": ".info.location.fields?.postcode",
            "Country": ".info.location.fields?.country"
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import ZohoRecruit\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n# << event_parser_placeholder >>\n\n\ndef workflow(\n        \n        _request: t.Dict,\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return ZohoRecruit.push_profile_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n    try:\n        event_parser\n        _event_parser = event_parser\n    except NameError as e:\n        action = ZohoRecruit.model.action_by_name(\"push_profile_list\")\n        # Without this trick event_parser is always only fetched from the local scope\n        # meaning that try block always raises NameError even if the function is\n        # defined in the placeholder\n        _event_parser = action.parameters.__fields__[\"event_parser\"].default\n\n    if _event_parser is not None:\n        try:\n            _request = _event_parser(_request)\n        except Exception as e:\n            return ZohoRecruit.push_profile_list(\n                workflow_id=workflow_id,\n                action_parameters=dict(),\n                origin_parameters=dict(),\n                target_parameters=dict(),\n                init_error=ActionInitError(\n                    reason=Reason.event_parsing_failure,\n                    data=dict(error=e, event=_request),\n                )\n            )\n    \n\n    origin_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'source_key', 'profile_key']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            origin_parameters[parameter] = _request[parameter]\n        \n\n    target_parameters = dict()\n    for parameter in ['zoho_accounts_url', 'client_id', 'client_secret', 'authorization_code', 'refresh_token']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n        if parameter in _request:\n            target_parameters[parameter] = _request[parameter]\n        \n\n    return ZohoRecruit.push_profile_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_event_parser_placeholder": "# << event_parser_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        },
        {
          "name": "pull_job_list",
          "action_type": "inbound",
          "action_parameters": {
            "title": "ReadJobActionParameters",
            "type": "object",
            "properties": {
              "read_mode": {
                "description": "If 'incremental' then `read_from` of the last run is given to Origin Warehouse during read. **The actual behavior depends on implementation of read**. In 'sync' mode `read_from` is neither fetched nor given to Origin Warehouse during read.",
                "default": "sync",
                "allOf": [
                  {
                    "$ref": "#/definitions/ReadMode"
                  }
                ]
              },
              "logics": {
                "title": "logics",
                "description": "List of logic functions. Each function should have the following signature typing.Callable[[typing.Dict], typing.Optional[typing.Dict]]. The final list should be exposed in a variable named 'logics'.",
                "template": "\nimport typing as t\n\ndef logic_1(item: t.Dict) -> t.Union[t.Dict, None]:\n    return None\n\ndef logic_2(item: t.Dict) -> t.Uniont[t.Dict, None]:\n    return None\n\nlogics = [logic_1, logic_2]\n",
                "type": "code_editor"
              },
              "format": {
                "title": "format",
                "description": "Formatting function. You should expose a function named 'format' with following signature typing.Callable[[typing.Dict], typing.Dict]",
                "template": "\nimport typing as t\n\ndef format(item: t.Dict) -> t.Dict:\n    return item\n",
                "type": "code_editor"
              }
            },
            "additionalProperties": false,
            "definitions": {
              "ReadMode": {
                "title": "ReadMode",
                "description": "An enumeration.",
                "enum": [
                  "sync",
                  "incremental"
                ]
              }
            }
          },
          "data_type": "job",
          "trigger_type": "schedule",
          "origin": "Zoho Jobs",
          "origin_parameters": {
            "title": "ReadParameters",
            "type": "object",
            "properties": {
              "fields": {
                "title": "Fields",
                "description": "To list all the module records with respect to fields\nMultiple field API names, comma-separated.\nFor example Last_Name, Email",
                "field_type": "Query Param",
                "type": "string"
              },
              "sort_order": {
                "description": "To sort the available list of records in either ascending or descending order\nasc - ascending order\ndesc - descending order",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/SortOrder"
                  }
                ]
              },
              "sort_by": {
                "title": "Sort By",
                "description": "To sort the available list of records based on the given field\nField API name\nExample: Email",
                "field_type": "Query Param",
                "type": "string"
              },
              "converted": {
                "description": "To get the list of converted records.\nThe default value is false\ntrue - get only converted records\nfalse - get only non-converted records\nboth - get all records",
                "default": "false",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/ZohoBool"
                  }
                ]
              },
              "approved": {
                "description": "To get the list of approved records.\nThe default value is true\ntrue - get only approved records\nfalse - get only non-approved records\nboth - get all records",
                "default": "true",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/ZohoBool"
                  }
                ]
              },
              "cvid": {
                "title": "Cvid",
                "description": "To get the list of records based on custom views\n{custom_view_id}",
                "field_type": "Query Param",
                "type": "integer"
              },
              "territory_id": {
                "title": "Territory Id",
                "description": "To get the list of records based on territory\n{territory_id}",
                "field_type": "Query Param",
                "type": "integer"
              },
              "include_child": {
                "title": "Include Child",
                "description": "To include records from the child territories.\nTrue includes child territory records.\nFalse does not include child territory records.\nThe default value is false.",
                "field_type": "Query Param",
                "type": "boolean"
              },
              "state": {
                "description": "If the value of this parameter is 'draft', then the response will only contain Draft records from the specified module. If the parameter's value is 'save', then the response will return saved records from the specified module.\n\nIf this parameter is not included in your request body, then the response will only return saved records from the specified module.",
                "field_type": "Query Param",
                "allOf": [
                  {
                    "$ref": "#/definitions/State"
                  }
                ]
              },
              "zoho_accounts_url": {
                "description": "Zoho CRM is hosted at multiple data centers. Therefore, the API domain URL varies for each data center.\nYou must use your domain-specific Zoho Accounts URL to generate access and refresh tokens. The following are the various domains and their corresponding accounts URLs.\n US: https://accounts.zoho.com\n AU: https://accounts.zoho.com.au\n EU: https://accounts.zoho.eu\n IN: https://accounts.zoho.in\n CN: https://accounts.zoho.com.cn\n JP: https://accounts.zoho.jp\n CA: https://accounts.zohocloud.ca",
                "default": "https://accounts.zoho.eu",
                "field_type": "Auth",
                "allOf": [
                  {
                    "$ref": "#/definitions/ZohoAccountsURL"
                  }
                ]
              },
              "client_id": {
                "title": "Client Id",
                "description": "A unique ID displayed under Self Client > Client Secret.",
                "field_type": "Auth",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "A unique confidential secret displayed under Self Client > Client Secret.",
                "field_type": "Auth",
                "type": "string"
              },
              "authorization_code": {
                "title": "Authorization Code",
                "description": "The authorization code generated during the Self Client creation, used to get the refresh token and the first access token.",
                "field_type": "Auth",
                "type": "string"
              },
              "refresh_token": {
                "title": "Refresh Token",
                "description": "The refresh token is used to generate a new access token when the current access token expires.",
                "field_type": "Auth",
                "type": "string"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "authorization_code"
            ],
            "additionalProperties": false,
            "definitions": {
              "SortOrder": {
                "title": "SortOrder",
                "description": "An enumeration.",
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              },
              "ZohoBool": {
                "title": "ZohoBool",
                "description": "An enumeration.",
                "enum": [
                  "true",
                  "false",
                  "both"
                ],
                "type": "string"
              },
              "State": {
                "title": "State",
                "description": "An enumeration.",
                "enum": [
                  "draft",
                  "save"
                ],
                "type": "string"
              },
              "ZohoAccountsURL": {
                "title": "ZohoAccountsURL",
                "description": "An enumeration.",
                "enum": [
                  "https://accounts.zoho.com",
                  "https://accounts.zoho.com.au",
                  "https://accounts.zoho.eu",
                  "https://accounts.zoho.in",
                  "https://accounts.zoho.com.cn",
                  "https://accounts.zoho.jp",
                  "https://accounts.zohocloud.ca"
                ],
                "type": "string"
              }
            }
          },
          "origin_data_schema": {
            "title": "JobOpening",
            "type": "object",
            "properties": {
              "id": {
                "title": "Id",
                "type": "string"
              },
              "Posting_Title": {
                "title": "Posting Title",
                "type": "string"
              },
              "Client_Name": {
                "title": "Client Name",
                "type": "string"
              },
              "Job_Opening_Name": {
                "title": "Job Opening Name",
                "type": "string"
              },
              "Job_Description": {
                "title": "Job Description",
                "type": "string"
              },
              "Job_Type": {
                "title": "Job Type",
                "type": "string"
              },
              "Job_Opening_Status": {
                "title": "Job Opening Status",
                "type": "string"
              },
              "Job_Opening_ID": {
                "title": "Job Opening Id",
                "type": "string"
              },
              "$currency_symbol": {
                "title": "$Currency Symbol",
                "type": "string"
              },
              "Required_Skills": {
                "title": "Required Skills",
                "type": "string"
              },
              "Industry": {
                "title": "Industry",
                "type": "string"
              },
              "$state": {
                "$ref": "#/definitions/ZohoState"
              },
              "$process_flow": {
                "title": "$Process Flow",
                "type": "boolean"
              },
              "City": {
                "title": "City",
                "type": "string"
              },
              "State": {
                "title": "State",
                "type": "string"
              },
              "Zip_Code": {
                "title": "Zip Code",
                "type": "string"
              },
              "Country": {
                "title": "Country",
                "type": "string"
              },
              "$approved": {
                "title": "$Approved",
                "type": "boolean"
              },
              "Created_Time": {
                "title": "Created Time",
                "type": "string"
              },
              "Modified_Time": {
                "title": "Modified Time",
                "type": "string"
              },
              "Date_Opened": {
                "title": "Date Opened",
                "type": "string"
              },
              "Target_Date": {
                "title": "Target Date",
                "type": "string"
              },
              "Last_Activity_Time": {
                "title": "Last Activity Time",
                "type": "string"
              },
              "$approval": {
                "$ref": "#/definitions/Approval"
              },
              "$approval_state": {
                "title": "$Approval State",
                "type": "string"
              },
              "Remote_Job": {
                "title": "Remote Job",
                "type": "boolean"
              },
              "$followed": {
                "title": "$Followed",
                "type": "boolean"
              },
              "$editable": {
                "title": "$Editable",
                "type": "boolean"
              },
              "Is_Locked": {
                "title": "Is Locked",
                "type": "boolean"
              },
              "Salary": {
                "title": "Salary",
                "type": "string"
              },
              "Work_Experience": {
                "title": "Work Experience",
                "type": "string"
              },
              "Number_of_Positions": {
                "title": "Number Of Positions",
                "type": "string"
              },
              "Associated_Tags": {
                "title": "Associated Tags",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "Account_Manager": {
                "$ref": "#/definitions/ZohoUser"
              },
              "Assigned_Recruiter": {
                "title": "Assigned Recruiter",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ZohoRecruiter"
                }
              },
              "Assigned_Recruiters": {
                "title": "Assigned Recruiters",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ZohoRecruiter"
                }
              },
              "Contact_Name": {
                "$ref": "#/definitions/ZohoUser"
              },
              "Created_By": {
                "$ref": "#/definitions/ZohoUser"
              },
              "Modified_By": {
                "$ref": "#/definitions/ZohoUser"
              },
              "Is_Attachment_Present": {
                "title": "Is Attachment Present",
                "type": "boolean"
              },
              "Keep_on_Career_Site": {
                "title": "Keep On Career Site",
                "type": "boolean"
              },
              "No_of_Candidates_Hired": {
                "title": "No Of Candidates Hired",
                "type": "integer"
              },
              "Expected_Revenue": {
                "title": "Expected Revenue",
                "type": "number"
              },
              "Is_Hot_Job_Opening": {
                "title": "Is Hot Job Opening",
                "type": "boolean"
              },
              "Publish": {
                "title": "Publish",
                "type": "boolean"
              },
              "Actual_Revenue": {
                "title": "Actual Revenue",
                "type": "number"
              },
              "Missed_Revenue": {
                "title": "Missed Revenue",
                "type": "number"
              },
              "No_of_Candidates_Associated": {
                "title": "No Of Candidates Associated",
                "type": "integer"
              },
              "Revenue_per_Position": {
                "title": "Revenue Per Position",
                "type": "number"
              }
            },
            "required": [
              "id",
              "Client_Name",
              "Job_Opening_Name"
            ],
            "definitions": {
              "ZohoState": {
                "title": "ZohoState",
                "description": "An enumeration.",
                "enum": [
                  "draft",
                  "save"
                ],
                "type": "string"
              },
              "Approval": {
                "title": "Approval",
                "type": "object",
                "properties": {
                  "delegate": {
                    "title": "Delegate",
                    "type": "boolean"
                  },
                  "approve": {
                    "title": "Approve",
                    "type": "boolean"
                  },
                  "reject": {
                    "title": "Reject",
                    "type": "boolean"
                  },
                  "resubmit": {
                    "title": "Resubmit",
                    "type": "boolean"
                  }
                },
                "required": [
                  "delegate",
                  "approve",
                  "reject",
                  "resubmit"
                ]
              },
              "ZohoUser": {
                "title": "ZohoUser",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "id": {
                    "title": "Id",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "id"
                ]
              },
              "ZohoRecruiter": {
                "title": "ZohoRecruiter",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "id": {
                    "title": "Id",
                    "type": "string"
                  },
                  "email": {
                    "title": "Email",
                    "type": "string"
                  },
                  "photoSrc": {
                    "title": "Photosrc",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "id",
                  "email",
                  "photoSrc"
                ]
              }
            }
          },
          "supports_incremental": false,
          "target": "HrFlow.ai Jobs",
          "target_parameters": {
            "title": "WriteJobParameters",
            "type": "object",
            "properties": {
              "api_secret": {
                "title": "Api Secret",
                "description": "X-API-KEY used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "api_user": {
                "title": "Api User",
                "description": "X-USER-EMAIL used to access HrFlow.ai API",
                "field_type": "Auth",
                "type": "string"
              },
              "board_key": {
                "title": "Board Key",
                "description": "HrFlow.ai board key",
                "field_type": "Query Param",
                "type": "string"
              },
              "sync": {
                "title": "Sync",
                "description": "When enabled only pushed jobs will remain in the board",
                "default": true,
                "field_type": "Other",
                "type": "boolean"
              },
              "update_content": {
                "title": "Update Content",
                "description": "When enabled jobs already present in the board are updated",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              },
              "enrich_with_parsing": {
                "title": "Enrich With Parsing",
                "description": "When enabled jobs are enriched with HrFlow.ai parsing",
                "default": false,
                "field_type": "Other",
                "type": "boolean"
              }
            },
            "required": [
              "api_secret",
              "api_user",
              "board_key"
            ],
            "additionalProperties": false
          },
          "target_data_schema": {
            "title": "HrFlowJob",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Identification key of the Job.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "Custom identifier of the Job.",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Job title.",
                "type": "string"
              },
              "location": {
                "title": "Location",
                "description": "Job location object.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Location"
                  }
                ]
              },
              "sections": {
                "title": "Sections",
                "description": "Job custom sections.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Section"
                }
              },
              "url": {
                "title": "Url",
                "description": "Job post original URL.",
                "type": "string"
              },
              "summary": {
                "title": "Summary",
                "description": "Brief summary of the Job.",
                "type": "string"
              },
              "archieved_at": {
                "title": "Archieved At",
                "description": "type: datetime ISO8601, Archive date of the Job. The value is null for unarchived Jobs.",
                "type": "string"
              },
              "updated_at": {
                "title": "Updated At",
                "description": "type: datetime ISO8601, Last update date of the Job.",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "description": "type: datetime ISO8601, Creation date of the Job.",
                "type": "string"
              },
              "skills": {
                "title": "Skills",
                "description": "t.List of skills of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Skill"
                }
              },
              "languages": {
                "title": "Languages",
                "description": "t.List of spoken languages of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "certifications": {
                "title": "Certifications",
                "description": "t.List of certifications of the Job.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "courses": {
                "title": "Courses",
                "description": "t.List of courses of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tasks": {
                "title": "Tasks",
                "description": "t.List of tasks of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "tags": {
                "title": "Tags",
                "description": "t.List of tags of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "metadatas": {
                "title": "Metadatas",
                "description": "t.List of metadatas of the Job",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralEntitySchema"
                }
              },
              "ranges_float": {
                "title": "Ranges Float",
                "description": "t.List of ranges of floats",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesFloat"
                }
              },
              "ranges_date": {
                "title": "Ranges Date",
                "description": "t.List of ranges of dates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RangesDate"
                }
              }
            },
            "required": [
              "name"
            ],
            "definitions": {
              "Location": {
                "title": "Location",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "Text",
                    "description": "Location text address.",
                    "type": "string"
                  },
                  "lat": {
                    "title": "Lat",
                    "description": "Geocentric latitude of the Location.",
                    "type": "number"
                  },
                  "lng": {
                    "title": "Lng",
                    "description": "Geocentric longitude of the Location.",
                    "type": "number"
                  }
                }
              },
              "Section": {
                "title": "Section",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Section of the Job. Example: culture",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "description": "Display Title of a Section. Example: Corporate Culture",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description",
                    "description": "Text description of a Section: Example: Our values areNone",
                    "type": "string"
                  }
                }
              },
              "Skill": {
                "title": "Skill",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the skill",
                    "type": "string"
                  },
                  "type": {
                    "title": "Type",
                    "description": "Type of the skill. hard or soft",
                    "enum": [
                      "hard",
                      "soft"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the skill",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "GeneralEntitySchema": {
                "title": "GeneralEntitySchema",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of the Object",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "description": "Value associated to the Object's name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "RangesFloat": {
                "title": "RangesFloat",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of floats attached to the Job. Example: salary",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value. Example: 500.",
                    "type": "number"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value. Example: 100.",
                    "type": "number"
                  },
                  "unit": {
                    "title": "Unit",
                    "description": "Unit of the value. Example: euros.",
                    "type": "string"
                  }
                }
              },
              "RangesDate": {
                "title": "RangesDate",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Identification name of a Range of dates attached to the Job. Example: availability.",
                    "type": "string"
                  },
                  "value_min": {
                    "title": "Value Min",
                    "description": "Min value in datetime ISO 8601, Example: 500.",
                    "type": "string"
                  },
                  "value_max": {
                    "title": "Value Max",
                    "description": "Max value in datetime ISO 8601, Example: 1000",
                    "type": "string"
                  }
                }
              }
            }
          },
          "jsonmap": {
            "reference": ".id",
            "created_at": ".Created_Time",
            "updated_at": ".Modified_Time",
            "name": ".Job_Opening_Name",
            "location": {
              "text": "$concat(?.City >> '',  ' ', ?.State >> '', ' ', ?.Country >> '', ' ', ?.Zip_Code >> '')",
              "lat": null,
              "lng": null,
              "fields": {
                "postcode": "?.Zip_Code",
                "city": "?.City",
                "state": "?.State",
                "country": "?.Country"
              }
            },
            "summary": ".Job_Description",
            "sections": [
              {
                "name": "Job_Description",
                "title": "Job Description",
                "description": ".Job_Description"
              },
              {
                "name": "Additional_Info",
                "title": "Additional Info",
                "description": ".Additional_Info"
              }
            ],
            "tags": [
              {
                "name": "AccountManager",
                "value": ".AccountManager"
              },
              {
                "name": "AssignedRecruiter",
                "value": ".AssignedRecruiter"
              },
              {
                "name": "ClientName",
                "value": ".ClientName"
              },
              {
                "name": "ContactName",
                "value": ".ContactName"
              },
              {
                "name": "Date_Opened",
                "value": ".Date_Opened"
              },
              {
                "name": "Industry",
                "value": ".Industry"
              },
              {
                "name": "Job_Opening_Status",
                "value": ".Job_Opening_Status"
              },
              {
                "name": "JobType",
                "value": ".JobType"
              },
              {
                "name": "Number_of_Positions",
                "value": ".Number_of_Positions"
              },
              {
                "name": "No_of_Candidates_Associated",
                "value": ".No_of_Candidates_Associated"
              },
              {
                "name": "No_of_Candidates_Hired",
                "value": ".No_of_Candidates_Hired"
              },
              {
                "name": "State",
                "value": ".State"
              },
              {
                "name": "WorkExperience",
                "value": ".WorkExperience"
              },
              {
                "name": "Country",
                "value": ".Country"
              },
              {
                "name": "ModifiedBy",
                "value": ".ModifiedBy"
              },
              {
                "name": "Salary",
                "value": ".Salary"
              },
              {
                "name": "Remote_Job",
                "value": ".Remote_Job"
              }
            ]
          },
          "workflow_code": "import typing as t\n\nfrom hrflow_connectors import ZohoRecruit\nfrom hrflow_connectors.core.connector import ActionInitError, Reason\n\nORIGIN_SETTINGS_PREFIX = \"origin_\"\nTARGET_SETTINGS_PREFIX = \"target_\"\n\n# << format_placeholder >>\n\n# << logics_placeholder >>\n\n\ndef workflow(\n        \n        settings: t.Dict\n    ) -> None:\n    actions_parameters = dict()\n    try:\n        format\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"format\"] = format\n\n    try:\n        logics\n    except NameError:\n        pass\n    else:\n        actions_parameters[\"logics\"] = logics\n\n    if \"__workflow_id\" not in settings:\n        return ZohoRecruit.pull_job_list(\n            workflow_id=\"\",\n            action_parameters=dict(),\n            origin_parameters=dict(),\n            target_parameters=dict(),\n            init_error=ActionInitError(\n                reason=Reason.workflow_id_not_found,\n                data=dict(error=\"__workflow_id not found in settings\", settings_keys=list(settings.keys())),\n            )\n        )\n    workflow_id = settings[\"__workflow_id\"]\n\n    \n\n    origin_parameters = dict()\n    for parameter in ['fields', 'sort_order', 'sort_by', 'converted', 'approved', 'cvid', 'territory_id', 'include_child', 'state', 'zoho_accounts_url', 'client_id', 'client_secret', 'authorization_code', 'refresh_token']:\n        if \"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter) in settings:\n            origin_parameters[parameter] = settings[\"{}{}\".format(ORIGIN_SETTINGS_PREFIX, parameter)]\n        \n\n    target_parameters = dict()\n    for parameter in ['api_secret', 'api_user', 'board_key', 'sync', 'update_content', 'enrich_with_parsing']:\n        if \"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter) in settings:\n            target_parameters[parameter] = settings[\"{}{}\".format(TARGET_SETTINGS_PREFIX, parameter)]\n        \n\n    return ZohoRecruit.pull_job_list(\n        workflow_id=workflow_id,\n        action_parameters=actions_parameters,\n        origin_parameters=origin_parameters,\n        target_parameters=target_parameters,\n    )",
          "workflow_code_format_placeholder": "# << format_placeholder >>",
          "workflow_code_logics_placeholder": "# << logics_placeholder >>",
          "workflow_code_workflow_id_settings_key": "__workflow_id",
          "workflow_code_origin_settings_prefix": "origin_",
          "workflow_code_target_settings_prefix": "target_"
        }
      ]
    }
  ]
}